Defining a GammaGraph
Defining a Graph 
Creating the two block presentation of T
WE ARE DONE WITH THE G GRAPH
xx/xx xx/xy 0 0 0 
0 0 xy/yz 0 0 
0 0 0 yz/zy yz/zx 
0 0 zy/yz 0 0 
zx/xx zx/xy 0 0 0 
It's a homom!
Trimming our original T

Starting round 1
GammaT vnames really are: x y z 
Using the old HigherBlock

Looking at vertex u
Looking at G edge a
Found a match!
Looking at G edge b
Found a match!
Looking at G edge d
Found a match!
Found a match!
Found a match!
Found a match!
Looking at vertex v
Looking at G edge a
Found a match!
Looking at G edge b
Found a match!
Looking at G edge d
Found a match!
Found a match!
Found a match!
Looking at vertex w
Looking at G edge c
Found a match!
Looking at G edge e
Found a match!
Found a match!
Found a match!
Found a match!
We're LR!
GammaT vnames really are: a b c d e 
D is a homom
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 2 named 0113 where p and q are uu and uw respectively.
We have created an edge from 0 to 4 named 0116 where p and q are uw and uw respectively.
We have created an edge from 0 to 1 named 0210 where p and q are uu and vv respectively.
We have created an edge from 0 to 3 named 0215 where p and q are uw and vv respectively.
We have created an edge from 1 to 0 named 0311 where p and q are vv and uu respectively.
We have created an edge from 1 to 0 named 0412 where p and q are vv and vv respectively.
We have created an edge from 2 to 1 named 0509 where p and q are uu and wu respectively.
We have created an edge from 2 to 3 named 0514 where p and q are uw and wu respectively.
We have created an edge from 3 to 2 named 0613 where p and q are wu and uw respectively.
We have created an edge from 3 to 4 named 0616 where p and q are ww and uw respectively.
We have created an edge from 3 to 1 named 0710 where p and q are wu and vv respectively.
We have created an edge from 3 to 3 named 0715 where p and q are ww and vv respectively.
We have created an edge from 4 to 1 named 0809 where p and q are wu and wu respectively.
We have created an edge from 4 to 3 named 0814 where p and q are ww and wu respectively.
GammaT vnames really are: uu uw vv wu ww 
Starting round 1
Starting round 2
GammaT vnames really are: a b c d e 

Printing T1

Printing Gamma Graph which has 4 vertices and 11 edges.
uu 0 0113 0210 0509 
uw 0 0116 0215 0514 
vv 0311 0 0412 0 
wu 0 0613 0710 0809 
Printing Representation Matrix
uu 0 a/c a/b c/b 
uw 0 a/e a/d c/d 
vv b/a 0 b/a 0 
wu 0 d/c d/b e/b 
Printing vertex homoms
uu 0 0
uw 0 1
vv 0 0
wu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 

Printing T1*

Printing Gamma Graph which has 5 vertices and 11 edges.
a 0 0210 0113 0215 0116 
b 0311 + 0412 0 0 0 0 
c 0 0509 0 0514 0 
d 0 0710 0613 0 0 
e 0 0809 0 0 0 
Printing Representation Matrix
a 0 uu/vv uu/uw uw/vv uw/uw 
b vv/uu + vv/vv 0 0 0 0 
c 0 uu/wu 0 uw/wu 0 
d 0 wu/vv wu/uw 0 0 
e 0 wu/wu 0 0 0 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 4 edges.
Y uu + vv uw 
Z wu 0 
We're going to rename

Printing Gamma Graph which has 5 vertices and 11 edges.
a 0 0210 0113 0215 0116 
b 0311 + 0412 0 0 0 0 
c 0 0509 0 0514 0 
d 0 0710 0613 0 0 
e 0 0809 0 0 0 
Printing Representation Matrix
a 0 4/3 4/2 2/3 2/2 
b 3/4 + 3/3 0 0 0 0 
c 0 4/1 0 2/1 0 
d 0 1/3 1/2 0 0 
e 0 1/1 0 0 0 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 4 edges.
 4 + 3 2 
 1 0 
WE ARE DONE WITH THE G GRAPH
PRINTING UNTRIMMED TTWOD
Printing Gamma Graph which has 25 vertices and 64 edges.
01130509 0 011305090311 011305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05090311 0 0 0 0 0 0 0 0 0 0 050903110113 050903110116 050903110210 050903110215 0 0 0 0 0 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050904120113 050904120116 050904120210 050904120215 0 0 0 0 0 0 
01130514 0 0 0 0 011305140613 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051406130509 051406130514 0 0 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051407100311 051407100412 
01160809 0 0 0 0 0 0 0 011608090311 011608090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 080903110113 080903110116 080903110210 080903110215 0 0 0 0 0 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 080904120113 080904120116 080904120210 080904120215 0 0 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 0 021003110113 021003110116 021003110210 021003110215 0 0 0 0 0 0 0 0 0 0 0 
03110113 031101130509 0 0 031101130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 0 031101160809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 031102100412 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 031102150710 0 0 
02100412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021004120113 021004120116 021004120210 021004120215 0 0 0 0 0 0 
04120113 041201130509 0 0 041201130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 0 041201160809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120210 0 0 0 0 0 0 0 0 0 041202100311 0 0 0 0 041202100412 0 0 0 0 0 0 0 0 0 0 
04120215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 041202150613 0 0 041202150710 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021506130509 021506130514 0 0 0 
06130509 0 061305090311 061305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 0 061305140613 061305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021507100311 021507100412 
07100311 0 0 0 0 0 0 0 0 0 0 071003110113 071003110116 071003110210 071003110215 0 0 0 0 0 0 0 0 0 0 0 
07100412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 071004120113 071004120116 071004120210 071004120215 0 0 0 0 0 0 
Printing Representation Matrix
01130509 0 443/214 443/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05090311 0 0 0 0 0 0 0 0 0 0 434/142 432/142 434/143 432/143 0 0 0 0 0 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 434/132 432/132 434/133 432/133 0 0 0 0 0 0 
01130514 0 0 0 0 421/212 421/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/121 212/121 0 0 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 213/134 213/133 
01160809 0 0 0 0 0 0 0 213/214 213/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 134/142 132/142 134/143 132/143 0 0 0 0 0 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 134/132 132/132 134/133 132/133 0 0 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 0 434/342 432/342 434/343 432/343 0 0 0 0 0 0 0 0 0 0 0 
03110113 344/421 0 0 342/421 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 0 321/421 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 0 343/434 0 0 0 0 343/433 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 321/432 0 0 321/433 0 0 
02100412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 434/332 432/332 434/333 432/333 0 0 0 0 0 0 
04120113 344/321 0 0 342/321 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 0 321/321 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120210 0 0 0 0 0 0 0 0 0 343/334 0 0 0 0 343/333 0 0 0 0 0 0 0 0 0 0 
04120215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 321/332 0 0 321/333 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/321 212/321 0 0 0 
06130509 0 143/214 143/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 0 121/212 121/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 213/334 213/333 
07100311 0 0 0 0 0 0 0 0 0 0 134/342 132/342 134/343 132/343 0 0 0 0 0 0 0 0 0 0 0 
07100412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 134/332 132/332 134/333 132/333 0 0 0 0 0 0 
Printing vertex homoms
01130509 0 3
05090311 2 7
05090412 2 9
01130514 1 3
05140613 3 8
05140710 3 9
01160809 3 3
08090311 9 7
08090412 9 9
02100311 2 4
03110113 4 1
03110116 5 1
03110210 4 2
03110215 5 2
02100412 2 6
04120113 4 5
04120116 5 5
04120210 4 6
04120215 5 6
02150613 3 5
06130509 7 3
06130514 8 3
02150710 3 6
07100311 9 4
07100412 9 6
Printing G Graph which has 10 vertices and 24 edges.
44 444 442 443 0 0 0 0 0 0 0 
42 0 0 0 421 0 0 0 0 0 0 
43 0 0 0 0 434 432 433 0 0 0 
21 0 0 0 0 0 0 0 214 212 213 
34 344 342 343 0 0 0 0 0 0 0 
32 0 0 0 321 0 0 0 0 0 0 
33 0 0 0 0 334 332 333 0 0 0 
14 144 142 143 0 0 0 0 0 0 0 
12 0 0 0 121 0 0 0 0 0 0 
13 0 0 0 0 134 132 133 0 0 0 
Trimming T[3]1

Starting round 1
Removed Edge (0, 1) named 011305090311
Starting round 2
Removed Edge (0, 2) named 011305090412
Starting round 3
Starting round 4
Removed Edge (13, 14) named 021004120113
Starting round 5
Removed Edge (13, 15) named 021004120116
Starting round 6
Removed Edge (13, 16) named 021004120210
Starting round 7
Removed Edge (13, 17) named 021004120215
Starting round 8
Starting round 9
Removed Edge (20, 21) named 021507100311
Starting round 10
Removed Edge (20, 22) named 021507100412
Starting round 11
Starting round 12
Removed Edge (15, 8) named 041202100311
Starting round 13
Starting round 14
Removed Edge (15, 16) named 041202150613
Starting round 15
Starting round 16
Removed Edge (0, 9) named 050903110113
Starting round 17
Removed Edge (0, 10) named 050903110116
Starting round 18
Removed Edge (4, 19) named 051407100412
Starting round 19
Starting round 20
Removed Edge (6, 9) named 080903110113
Starting round 21
Removed Edge (6, 10) named 080903110116
Starting round 22
We have deleted 6 from G
We have deleted 0 from G
Printing TtwoD
Printing Gamma Graph which has 19 vertices and 35 edges.
05090311 0 0 0 0 0 0 0 0 0 0 0 050903110210 050903110215 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 050904120113 050904120116 0 0 0 0 
01130514 0 0 0 011305140613 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051406130509 051406130514 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051407100311 
01160809 0 0 0 0 0 0 011608090311 011608090412 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 080903110210 080903110215 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 080904120113 080904120116 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 021003110113 021003110116 021003110210 021003110215 0 0 0 0 0 0 
03110113 0 0 031101130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 031101160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 0 
04120113 0 0 041201130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 041201160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021506130509 021506130514 0 
06130509 061305090311 061305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 061305140613 061305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 071003110113 071003110116 071003110210 071003110215 0 0 0 0 0 0 
Printing Representation Matrix
05090311 0 0 0 0 0 0 0 0 0 0 0 434/143 432/143 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 434/132 432/132 0 0 0 0 
01130514 0 0 0 421/212 421/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/121 212/121 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 213/134 
01160809 0 0 0 0 0 0 213/214 213/213 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 134/143 132/143 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 134/132 132/132 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 434/342 432/342 434/343 432/343 0 0 0 0 0 0 
03110113 0 0 342/421 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 321/421 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 343/434 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 321/432 0 0 0 
04120113 0 0 342/321 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 321/321 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/321 212/321 0 
06130509 143/214 143/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 121/212 121/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 134/342 132/342 134/343 132/343 0 0 0 0 0 0 
Printing vertex homoms
05090311 1 5
05090412 1 7
01130514 0 2
05140613 2 6
05140710 2 7
01160809 2 2
08090311 7 5
08090412 7 7
02100311 1 3
03110113 3 0
03110116 4 0
03110210 3 1
03110215 4 1
04120113 3 4
04120116 4 4
02150613 2 4
06130509 5 2
06130514 6 2
07100311 7 3
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
Putting 0 as pvhom for 0
Putting 1 as qvhom for 0
Putting 0 as pvhom for 1
Putting 1 as qvhom for 1
Putting 2 as pvhom for 2
Putting 3 as qvhom for 2
Putting 3 as pvhom for 3
Putting 1 as qvhom for 3
Putting 3 as pvhom for 4
Putting 1 as qvhom for 4
Putting 2 as pvhom for 5
Putting 3 as qvhom for 5
Putting 1 as pvhom for 6
Putting 1 as qvhom for 6
Putting 1 as pvhom for 7
Putting 1 as qvhom for 7
Putting 2 as pvhom for 8
Putting 4 as qvhom for 8
Putting 4 as pvhom for 9
Putting 2 as qvhom for 9
Putting 4 as pvhom for 10
Putting 2 as qvhom for 10
Putting 4 as pvhom for 11
Putting 2 as qvhom for 11
Putting 4 as pvhom for 12
Putting 2 as qvhom for 12
Putting 4 as pvhom for 13
Putting 0 as qvhom for 13
Putting 4 as pvhom for 14
Putting 0 as qvhom for 14
Putting 2 as pvhom for 15
Putting 4 as qvhom for 15
Putting 1 as pvhom for 16
Putting 2 as qvhom for 16
Putting 1 as pvhom for 17
Putting 2 as qvhom for 17
Putting 1 as pvhom for 18
Putting 0 as qvhom for 18
Printing Gamma Graph which has 19 vertices and 35 edges.
05090311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 061305090311 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 061305090412 0 0 
01130514 0 0 0 0 0 0 0 0 0 031101130514 0 0 0 041201130514 0 0 0 0 0 
05140613 0 0 011305140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 061305140613 0 
05140710 0 0 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 061305140710 0 
01160809 0 0 0 0 0 0 0 0 0 0 031101160809 0 0 0 041201160809 0 0 0 0 
08090311 0 0 0 0 0 011608090311 0 0 0 0 0 0 0 0 0 0 0 0 0 
08090412 0 0 0 0 0 011608090412 0 0 0 0 0 0 0 0 0 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 0 0 0 
03110113 0 0 0 0 0 0 0 0 021003110113 0 0 0 0 0 0 0 0 0 071003110113 
03110116 0 0 0 0 0 0 0 0 021003110116 0 0 0 0 0 0 0 0 0 071003110116 
03110210 050903110210 0 0 0 0 0 080903110210 0 021003110210 0 0 0 0 0 0 0 0 0 071003110210 
03110215 050903110215 0 0 0 0 0 080903110215 0 021003110215 0 0 0 0 0 0 0 0 0 071003110215 
04120113 0 050904120113 0 0 0 0 0 080904120113 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 050904120116 0 0 0 0 0 080904120116 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 0 0 0 0 
06130509 0 0 0 051406130509 0 0 0 0 0 0 0 0 0 0 0 021506130509 0 0 0 
06130514 0 0 0 051406130514 0 0 0 0 0 0 0 0 0 0 0 021506130514 0 0 0 
07100311 0 0 0 0 051407100311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing Representation Matrix
05090311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 i/g 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 i/g 0 0 
01130514 0 0 0 0 0 0 0 0 0 k/m 0 0 0 k/j 0 0 0 0 0 
05140613 0 0 m/g 0 0 0 0 0 0 0 0 0 0 0 0 0 0 f/g 0 
05140710 0 0 m/g 0 0 0 0 0 0 0 0 0 0 0 0 0 0 f/g 0 
01160809 0 0 0 0 0 0 0 0 0 0 j/m 0 0 0 j/j 0 0 0 0 
08090311 0 0 0 0 0 g/g 0 0 0 0 0 0 0 0 0 0 0 0 0 
08090412 0 0 0 0 0 g/g 0 0 0 0 0 0 0 0 0 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 0 0 l/n 0 0 0 0 0 0 0 
03110113 0 0 0 0 0 0 0 0 n/k 0 0 0 0 0 0 0 0 0 h/k 
03110116 0 0 0 0 0 0 0 0 n/k 0 0 0 0 0 0 0 0 0 h/k 
03110210 n/i 0 0 0 0 0 h/i 0 n/l 0 0 0 0 0 0 0 0 0 h/l 
03110215 n/i 0 0 0 0 0 h/i 0 n/l 0 0 0 0 0 0 0 0 0 h/l 
04120113 0 n/h 0 0 0 0 0 h/h 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 n/h 0 0 0 0 0 h/h 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 j/n 0 0 0 0 0 0 
06130509 0 0 0 g/f 0 0 0 0 0 0 0 0 0 0 0 g/j 0 0 0 
06130514 0 0 0 g/f 0 0 0 0 0 0 0 0 0 0 0 g/j 0 0 0 
07100311 0 0 0 0 g/h 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing vertex homoms
05090311 0 1
05090412 0 1
01130514 2 3
05140613 3 1
05140710 3 1
01160809 2 3
08090311 1 1
08090412 1 1
02100311 2 4
03110113 4 2
03110116 4 2
03110210 4 2
03110215 4 2
04120113 4 0
04120116 4 0
02150613 2 4
06130509 1 2
06130514 1 2
07100311 1 0
Printing G Graph which has 5 vertices and 9 edges.
 0 f h 0 i 
 g 0 0 0 0 
 0 j 0 k l 
 0 m 0 0 0 
 0 0 n 0 0 
Putting 0 as pvhom for 0
Putting 1 as qvhom for 0
Putting 0 as pvhom for 1
Putting 1 as qvhom for 1
Putting 2 as pvhom for 2
Putting 3 as qvhom for 2
Putting 3 as pvhom for 3
Putting 1 as qvhom for 3
Putting 3 as pvhom for 4
Putting 1 as qvhom for 4
Putting 2 as pvhom for 5
Putting 3 as qvhom for 5
Putting 1 as pvhom for 6
Putting 1 as qvhom for 6
Putting 1 as pvhom for 7
Putting 1 as qvhom for 7
Putting 2 as pvhom for 8
Putting 4 as qvhom for 8
Putting 4 as pvhom for 9
Putting 2 as qvhom for 9
Putting 4 as pvhom for 10
Putting 2 as qvhom for 10
Putting 4 as pvhom for 11
Putting 2 as qvhom for 11
Putting 4 as pvhom for 12
Putting 2 as qvhom for 12
Putting 4 as pvhom for 13
Putting 0 as qvhom for 13
Putting 4 as pvhom for 14
Putting 0 as qvhom for 14
Putting 2 as pvhom for 15
Putting 4 as qvhom for 15
Putting 1 as pvhom for 16
Putting 2 as qvhom for 16
Putting 1 as pvhom for 17
Putting 2 as qvhom for 17
Putting 1 as pvhom for 18
Putting 0 as qvhom for 18
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Naming the 8th vertex
Naming the 9th vertex
Naming the 10th vertex
Naming the 11th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 8
We are trying to find the repn for 11
We found it! It's in the 4th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 9
We found it! It's in the 5th equiv class
We are trying to find the repn for 13
We found it! It's in the 6th equiv class
Starting the 2th round
Looking at currE[0], which is 15
We are trying to find the repn for 12
We found it! It's in the 4th equiv class
Starting the 3th round
Looking at currE[0], which is 5
We are trying to find the repn for 10
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 6th equiv class
Starting the 4th round
Looking at currE[0], which is 11
We are trying to find the repn for 8
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 7th equiv class
We are trying to find the repn for 18
We found it! It's in the 9th equiv class
We are trying to find the repn for 6
We found it! It's in the 11th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 8
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 7th equiv class
We are trying to find the repn for 18
We found it! It's in the 9th equiv class
We are trying to find the repn for 6
We found it! It's in the 11th equiv class
Starting the 5th round
Looking at currE[0], which is 9
We are trying to find the repn for 8
We found it! It's in the 0th equiv class
We are trying to find the repn for 18
We found it! It's in the 9th equiv class
Looking at currE[1], which is 10
We are trying to find the repn for 8
We found it! It's in the 0th equiv class
We are trying to find the repn for 18
We found it! It's in the 9th equiv class
Starting the 6th round
Looking at currE[0], which is 13
We are trying to find the repn for 1
We found it! It's in the 7th equiv class
We are trying to find the repn for 7
We found it! It's in the 11th equiv class
Looking at currE[1], which is 14
We are trying to find the repn for 1
We found it! It's in the 7th equiv class
We are trying to find the repn for 7
We found it! It's in the 11th equiv class
Starting the 7th round
Looking at currE[0], which is 0
We are trying to find the repn for 16
We found it! It's in the 10th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 16
We found it! It's in the 10th equiv class
Starting the 8th round
Looking at currE[0], which is 4
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
We are trying to find the repn for 17
We found it! It's in the 10th equiv class
Looking at currE[1], which is 3
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
We are trying to find the repn for 17
We found it! It's in the 10th equiv class
Starting the 9th round
Looking at currE[0], which is 18
We are trying to find the repn for 4
We found it! It's in the 8th equiv class
Starting the 10th round
Looking at currE[0], which is 16
We are trying to find the repn for 15
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 8th equiv class
Looking at currE[1], which is 17
We are trying to find the repn for 15
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 8th equiv class
Starting the 11th round
Looking at currE[0], which is 6
We are trying to find the repn for 5
We found it! It's in the 3th equiv class
Looking at currE[1], which is 7
We are trying to find the repn for 5
We found it! It's in the 3th equiv class
Putting 4 as pvhom for 0
Putting 2 as qvhom for 0
Putting 3 as pvhom for 1
Putting 1 as qvhom for 1
Putting 1 as pvhom for 2
Putting 2 as qvhom for 2
Putting 1 as pvhom for 3
Putting 1 as qvhom for 3
Putting 2 as pvhom for 4
Putting 4 as qvhom for 4
Putting 2 as pvhom for 5
Putting 3 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 4 as pvhom for 7
Putting 0 as qvhom for 7
Putting 1 as pvhom for 8
Putting 0 as qvhom for 8
Putting 0 as pvhom for 9
Putting 2 as qvhom for 9
Putting 0 as pvhom for 10
Putting 1 as qvhom for 10
Putting 0 as pvhom for 11
Putting 0 as qvhom for 11
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 0 named 0109 where p and q are uu and uu respectively.
We have created an edge from 0 to 2 named 0110 where p and q are uu and uv respectively.
We have created an edge from 0 to 1 named 0213 where p and q are uu and vw respectively.
We have created an edge from 1 to 0 named 0314 where p and q are vw and uu respectively.
We have created an edge from 1 to 2 named 0315 where p and q are vw and uv respectively.
We have created an edge from 1 to 1 named 0416 where p and q are vw and vw respectively.
We have created an edge from 2 to 3 named 0511 where p and q are uv and wu respectively.
We have created an edge from 2 to 4 named 0512 where p and q are uv and wv respectively.
We have created an edge from 3 to 0 named 0609 where p and q are wu and uu respectively.
We have created an edge from 3 to 2 named 0610 where p and q are wu and uv respectively.
We have created an edge from 3 to 1 named 0713 where p and q are wu and vw respectively.
We have created an edge from 4 to 3 named 0811 where p and q are wv and wu respectively.
We have created an edge from 4 to 4 named 0812 where p and q are wv and wv respectively.
GammaT vnames really are: uu uv vw wu wv 
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 1 named 010901 where p and q are uuu and uuu respectively.
We have created an edge from 0 to 2 named 010902 where p and q are uuu and uuv respectively.
We have created an edge from 0 to 0 named 011005 where p and q are uuu and uvw respectively.
We have created an edge from 0 to 3 named 021303 where p and q are uuv and vwu respectively.
We have created an edge from 0 to 4 named 021304 where p and q are uuv and vwv respectively.
We have created an edge from 1 to 1 named 031401 where p and q are vwu and uuu respectively.
We have created an edge from 1 to 2 named 031402 where p and q are vwu and uuv respectively.
We have created an edge from 1 to 0 named 031505 where p and q are vwu and uvw respectively.
We have created an edge from 1 to 3 named 041603 where p and q are vwv and vwu respectively.
We have created an edge from 1 to 4 named 041604 where p and q are vwv and vwv respectively.
We have created an edge from 2 to 1 named 051106 where p and q are uvw and wuu respectively.
We have created an edge from 2 to 2 named 051107 where p and q are uvw and wuv respectively.
We have created an edge from 2 to 0 named 051208 where p and q are uvw and wvw respectively.
We have created an edge from 3 to 1 named 060901 where p and q are wuu and uuu respectively.
We have created an edge from 3 to 2 named 060902 where p and q are wuu and uuv respectively.
We have created an edge from 3 to 0 named 061005 where p and q are wuu and uvw respectively.
We have created an edge from 3 to 3 named 071303 where p and q are wuv and vwu respectively.
We have created an edge from 3 to 4 named 071304 where p and q are wuv and vwv respectively.
We have created an edge from 4 to 1 named 081106 where p and q are wvw and wuu respectively.
We have created an edge from 4 to 2 named 081107 where p and q are wvw and wuv respectively.
We have created an edge from 4 to 0 named 081208 where p and q are wvw and wvw respectively.
GammaT vnames really are: uuu uuv uvw vwu vwv wuu wuv wvw 
Starting round 1
Printing Gamma Graph which has 8 vertices and 21 edges.
uuu 010901 010902 011005 0 0 0 0 0 
uuv 0 0 0 021303 021304 0 0 0 
uvw 0 0 0 0 0 051106 051107 051208 
vwu 031401 031402 031505 0 0 0 0 0 
vwv 0 0 0 041603 041604 0 0 0 
wuu 060901 060902 061005 0 0 0 0 0 
wuv 0 0 0 071303 071304 0 0 0 
wvw 0 0 0 0 0 081106 081107 081208 
Printing Representation Matrix
uuu a/b a/c a/a 0 0 0 0 0 
uuv 0 0 0 a/d a/e 0 0 0 
uvw 0 0 0 0 0 c/b c/c c/a 
vwu b/b b/c b/a 0 0 0 0 0 
vwv 0 0 0 b/d b/e 0 0 0 
wuu d/b d/c d/a 0 0 0 0 0 
wuv 0 0 0 d/d d/e 0 0 0 
wvw 0 0 0 0 0 e/b e/c e/a 
Printing vertex homoms
uuu 0 0
uuv 0 1
uvw 0 0
vwu 0 0
vwv 0 1
wuu 1 0
wuv 1 1
wvw 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 0 named 010311 where p and q are uvv and uuu respectively.
We have created an edge from 0 to 0 named 010412 where p and q are uvv and uvv respectively.
We have created an edge from 0 to 1 named 020509 where p and q are uuu and vwu respectively.
We have created an edge from 0 to 3 named 020514 where p and q are uuw and vwu respectively.
We have created an edge from 1 to 2 named 030613 where p and q are vwu and uuw respectively.
We have created an edge from 1 to 1 named 030710 where p and q are vwu and uvv respectively.
We have created an edge from 1 to 1 named 040809 where p and q are vwu and vwu respectively.
We have created an edge from 2 to 2 named 050113 where p and q are uuu and wuw respectively.
We have created an edge from 2 to 4 named 050116 where p and q are uuw and wuw respectively.
We have created an edge from 2 to 1 named 050210 where p and q are uuu and wvv respectively.
We have created an edge from 2 to 3 named 050215 where p and q are uuw and wvv respectively.
We have created an edge from 3 to 0 named 060311 where p and q are wvv and uuu respectively.
We have created an edge from 3 to 0 named 060412 where p and q are wvv and uvv respectively.
We have created an edge from 3 to 1 named 070509 where p and q are wuu and vwu respectively.
We have created an edge from 3 to 3 named 070514 where p and q are wuw and vwu respectively.
We have created an edge from 4 to 2 named 080113 where p and q are wuu and wuw respectively.
We have created an edge from 4 to 4 named 080116 where p and q are wuw and wuw respectively.
We have created an edge from 4 to 1 named 080210 where p and q are wuu and wvv respectively.
We have created an edge from 4 to 3 named 080215 where p and q are wuw and wvv respectively.
GammaT vnames really are: uuu uuw uvv vwu wuu wuw wvv 
Starting round 1
Starting round 2
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 2 named 01030613 where p and q are uvwu and uuuw respectively.
We have created an edge from 0 to 1 named 01030710 where p and q are uvwu and uuvv respectively.
We have created an edge from 0 to 1 named 01040809 where p and q are uvwu and uvwu respectively.
We have created an edge from 0 to 2 named 02050113 where p and q are uuuu and vwuw respectively.
We have created an edge from 0 to 4 named 02050116 where p and q are uuuw and vwuw respectively.
We have created an edge from 0 to 1 named 02050210 where p and q are uuuu and vwvv respectively.
We have created an edge from 0 to 3 named 02050215 where p and q are uuuw and vwvv respectively.
We have created an edge from 1 to 0 named 03060311 where p and q are vwvv and uuuu respectively.
We have created an edge from 1 to 0 named 03060412 where p and q are vwvv and uuvv respectively.
We have created an edge from 1 to 3 named 03070514 where p and q are vwuw and uvwu respectively.
We have created an edge from 1 to 4 named 04080116 where p and q are vwuw and vwuw respectively.
We have created an edge from 1 to 3 named 04080215 where p and q are vwuw and vwvv respectively.
We have created an edge from 2 to 0 named 05010311 where p and q are uuvv and wuuu respectively.
We have created an edge from 2 to 0 named 05010412 where p and q are uuvv and wuvv respectively.
We have created an edge from 2 to 1 named 05020509 where p and q are uuuu and wvwu respectively.
We have created an edge from 2 to 3 named 05020514 where p and q are uuuw and wvwu respectively.
We have created an edge from 3 to 2 named 06030613 where p and q are wvwu and uuuw respectively.
We have created an edge from 3 to 1 named 06030710 where p and q are wvwu and uuvv respectively.
We have created an edge from 3 to 1 named 06040809 where p and q are wvwu and uvwu respectively.
We have created an edge from 3 to 2 named 07050113 where p and q are wuuu and vwuw respectively.
We have created an edge from 3 to 4 named 07050116 where p and q are wuuw and vwuw respectively.
We have created an edge from 3 to 1 named 07050210 where p and q are wuuu and vwvv respectively.
We have created an edge from 3 to 3 named 07050215 where p and q are wuuw and vwvv respectively.
We have created an edge from 4 to 0 named 08010311 where p and q are wuvv and wuuu respectively.
We have created an edge from 4 to 0 named 08010412 where p and q are wuvv and wuvv respectively.
We have created an edge from 4 to 1 named 08020509 where p and q are wuuu and wvwu respectively.
We have created an edge from 4 to 3 named 08020514 where p and q are wuuw and wvwu respectively.
GammaT vnames really are: uuuu uuuw uuvv uvwu vwuw vwvv wuuu wuuw wuvv wvwu 
Starting round 1
Starting round 2
Printing Gamma Graph which has 9 vertices and 24 edges.
uuuu 0 0 0 0 02050113 02050210 0 0 05020509 
uuuw 0 0 0 0 02050116 02050215 0 0 05020514 
uuvv 0 0 0 0 0 0 05010311 05010412 0 
uvwu 0 01030613 01030710 01040809 0 0 0 0 0 
vwuw 0 0 0 03070514 04080116 04080215 0 0 0 
vwvv 03060311 0 03060412 0 0 0 0 0 0 
wuuu 0 0 0 0 07050113 07050210 0 0 08020509 
wuvv 0 0 0 0 0 0 08010311 08010412 0 
wvwu 0 06030613 06030710 06040809 0 0 0 0 0 
Printing Representation Matrix
uuuu 0 0 0 0 a/c a/b 0 0 c/b 
uuuw 0 0 0 0 a/e a/d 0 0 c/d 
uuvv 0 0 0 0 0 0 c/a c/a 0 
uvwu 0 a/c a/b a/b 0 0 0 0 0 
vwuw 0 0 0 b/d b/e b/d 0 0 0 
vwvv b/a 0 b/a 0 0 0 0 0 0 
wuuu 0 0 0 0 d/c d/b 0 0 e/b 
wuvv 0 0 0 0 0 0 e/a e/a 0 
wvwu 0 d/c d/b d/b 0 0 0 0 0 
Printing vertex homoms
uuuu 0 0
uuuw 0 1
uuvv 0 0
uvwu 0 0
vwuw 0 1
vwvv 0 0
wuuu 1 0
wuvv 1 0
wvwu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Looking at vertex uuuu
Looking at G edge a
This G edge has 0 matches
(-1,4) is not LR!
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 0 named 0103060311 where p and q are uvwvv and uuuuu respectively.
We have created an edge from 0 to 0 named 0103060412 where p and q are uvwvv and uuuvv respectively.
We have created an edge from 0 to 3 named 0103070514 where p and q are uvwuw and uuvwu respectively.
We have created an edge from 0 to 4 named 0104080116 where p and q are uvwuw and uvwuw respectively.
We have created an edge from 0 to 3 named 0104080215 where p and q are uvwuw and uvwvv respectively.
We have created an edge from 0 to 0 named 0205010311 where p and q are uuuvv and vwuuu respectively.
We have created an edge from 0 to 0 named 0205010412 where p and q are uuuvv and vwuvv respectively.
We have created an edge from 0 to 1 named 0205020509 where p and q are uuuuu and vwvwu respectively.
We have created an edge from 0 to 3 named 0205020514 where p and q are uuuuw and vwvwu respectively.
We have created an edge from 1 to 2 named 0306030613 where p and q are vwvwu and uuuuw respectively.
We have created an edge from 1 to 1 named 0306030710 where p and q are vwvwu and uuuvv respectively.
We have created an edge from 1 to 1 named 0306040809 where p and q are vwvwu and uuvwu respectively.
We have created an edge from 1 to 2 named 0307050113 where p and q are vwuuu and uvwuw respectively.
We have created an edge from 1 to 1 named 0307050210 where p and q are vwuuu and uvwvv respectively.
We have created an edge from 1 to 0 named 0408010311 where p and q are vwuvv and vwuuu respectively.
We have created an edge from 1 to 0 named 0408010412 where p and q are vwuvv and vwuvv respectively.
We have created an edge from 1 to 1 named 0408020509 where p and q are vwuuu and vwvwu respectively.
We have created an edge from 2 to 2 named 0501030613 where p and q are uuvwu and wuuuw respectively.
We have created an edge from 2 to 1 named 0501030710 where p and q are uuvwu and wuuvv respectively.
We have created an edge from 2 to 1 named 0501040809 where p and q are uuvwu and wuvwu respectively.
We have created an edge from 2 to 2 named 0502050113 where p and q are uuuuu and wvwuw respectively.
We have created an edge from 2 to 4 named 0502050116 where p and q are uuuuw and wvwuw respectively.
We have created an edge from 2 to 1 named 0502050210 where p and q are uuuuu and wvwvv respectively.
We have created an edge from 2 to 3 named 0502050215 where p and q are uuuuw and wvwvv respectively.
We have created an edge from 3 to 0 named 0603060311 where p and q are wvwvv and uuuuu respectively.
We have created an edge from 3 to 0 named 0603060412 where p and q are wvwvv and uuuvv respectively.
We have created an edge from 3 to 3 named 0603070514 where p and q are wvwuw and uuvwu respectively.
We have created an edge from 3 to 4 named 0604080116 where p and q are wvwuw and uvwuw respectively.
We have created an edge from 3 to 3 named 0604080215 where p and q are wvwuw and uvwvv respectively.
We have created an edge from 3 to 0 named 0705010311 where p and q are wuuvv and vwuuu respectively.
We have created an edge from 3 to 0 named 0705010412 where p and q are wuuvv and vwuvv respectively.
We have created an edge from 3 to 1 named 0705020509 where p and q are wuuuu and vwvwu respectively.
We have created an edge from 3 to 3 named 0705020514 where p and q are wuuuw and vwvwu respectively.
We have created an edge from 4 to 2 named 0801030613 where p and q are wuvwu and wuuuw respectively.
We have created an edge from 4 to 1 named 0801030710 where p and q are wuvwu and wuuvv respectively.
We have created an edge from 4 to 1 named 0801040809 where p and q are wuvwu and wuvwu respectively.
We have created an edge from 4 to 2 named 0802050113 where p and q are wuuuu and wvwuw respectively.
We have created an edge from 4 to 4 named 0802050116 where p and q are wuuuw and wvwuw respectively.
We have created an edge from 4 to 1 named 0802050210 where p and q are wuuuu and wvwvv respectively.
We have created an edge from 4 to 3 named 0802050215 where p and q are wuuuw and wvwvv respectively.
GammaT vnames really are: uuuuu uuuuw uuuvv uuvwu uvwuw uvwvv vwuuu vwuvv vwvwu wuuuu wuuuw wuuvv wuvwu wvwuw wvwvv 
Starting round 1
Starting round 2
CREATING INDUCED RIGHT P REP FOR T2D
Our final Seen consists of:
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 1} 0 0 0 0 0 0 0 0 ({0 1},434) ({0 1},432) 0 0 0 
{2} 0 0 ({2},421) 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 ({3 4},214) ({3 4},212) ({3 4},213) 
{5 15} 0 0 0 0 ({5 15},213) 0 0 0 0 0 ({5 15},214) ({5 15},212) 0 
{6 7} 0 0 0 0 0 0 0 0 ({6 7},134) ({6 7},132) 0 0 0 
{8} 0 0 0 0 0 0 ({8},434) ({8},432) 0 0 0 0 0 
{9 11} 0 ({9 11},342) 0 0 0 ({9 11},343) 0 0 0 0 0 0 0 
{10 12} 0 0 0 ({10 12},321) 0 0 0 0 0 0 0 0 0 
{11 13} 0 ({11 13},342) 0 0 0 ({11 13},343) 0 0 0 0 0 0 0 
{12 14} 0 0 0 ({12 14},321) 0 0 0 0 0 0 0 0 0 
{16} ({16},143) 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 ({17},121) 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 ({18},134) ({18},132) 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 0 0 0 0 0 434/ 432/ 0 0 0 
{2} 0 0 421/ 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 214/ 212/ 213/ 
{5 15} 0 0 0 0 213/ 0 0 0 0 0 214/ 212/ 0 
{6 7} 0 0 0 0 0 0 0 0 134/ 132/ 0 0 0 
{8} 0 0 0 0 0 0 434/ 432/ 0 0 0 0 0 
{9 11} 0 342/ 0 0 0 343/ 0 0 0 0 0 0 0 
{10 12} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{11 13} 0 342/ 0 0 0 343/ 0 0 0 0 0 0 0 
{12 14} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{16} 143/ 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 121/ 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 134/ 132/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 1 0
{2} 0 0
{3 4} 2 0
{5 15} 2 0
{6 7} 7 0
{8} 1 0
{9 11} 3 0
{10 12} 4 0
{11 13} 3 0
{12 14} 4 0
{16} 5 0
{17} 6 0
{18} 7 0
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
CHECKING IF INDUCED RIGHT P REP FOR T2D IS P RIGHT DEF
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Found a match, new m value is: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 1
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 1
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Got pair 1,432
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 1,434
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 5
typeMatrix is 2 by 8
Looking at type 3
Found a match for our vvcit: 2
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Found a match for our vvcit: 1
Got pair 4,321
Looking at element 7 of our current vertex collection
Looking at element 9 of our current vertex collection
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,132
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
We have created an edge between 4 and 1
Got pair 7,134
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
Looking at vertex 1 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
PRINTING TTWOD TEXTILE INFO
Printing Gamma Graph which has 19 vertices and 35 edges.
05090311 0 0 0 0 0 0 0 0 0 0 0 050903110210 050903110215 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 050904120113 050904120116 0 0 0 0 
01130514 0 0 0 011305140613 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051406130509 051406130514 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051407100311 
01160809 0 0 0 0 0 0 011608090311 011608090412 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 080903110210 080903110215 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 080904120113 080904120116 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 021003110113 021003110116 021003110210 021003110215 0 0 0 0 0 0 
03110113 0 0 031101130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 031101160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 0 
04120113 0 0 041201130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 041201160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021506130509 021506130514 0 
06130509 061305090311 061305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 061305140613 061305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 071003110113 071003110116 071003110210 071003110215 0 0 0 0 0 0 
Printing Representation Matrix
05090311 0 0 0 0 0 0 0 0 0 0 0 434/143 432/143 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 434/132 432/132 0 0 0 0 
01130514 0 0 0 421/212 421/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/121 212/121 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 213/134 
01160809 0 0 0 0 0 0 213/214 213/213 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 134/143 132/143 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 134/132 132/132 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 434/342 432/342 434/343 432/343 0 0 0 0 0 0 
03110113 0 0 342/421 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 321/421 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 343/434 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 321/432 0 0 0 
04120113 0 0 342/321 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 321/321 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/321 212/321 0 
06130509 143/214 143/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 121/212 121/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 134/342 132/342 134/343 132/343 0 0 0 0 0 0 
Printing vertex homoms
05090311 1 5
05090412 1 7
01130514 0 2
05140613 2 6
05140710 2 7
01160809 2 2
08090311 7 5
08090412 7 7
02100311 1 3
03110113 3 0
03110116 4 0
03110210 3 1
03110215 4 1
04120113 3 4
04120116 4 4
02150613 2 4
06130509 5 2
06130514 6 2
07100311 7 3
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
Putting 5 as pvhom for 0
Putting 2 as qvhom for 0
Putting 5 as pvhom for 1
Putting 2 as qvhom for 1
Putting 3 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 2 as qvhom for 3
Putting 0 as pvhom for 4
Putting 2 as qvhom for 4
Putting 4 as pvhom for 5
Putting 0 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 3 as pvhom for 8
Putting 1 as qvhom for 8
Putting 1 as pvhom for 9
Putting 3 as qvhom for 9
Putting 1 as pvhom for 10
Putting 3 as qvhom for 10
Putting 1 as pvhom for 11
Putting 3 as qvhom for 11
Putting 1 as pvhom for 12
Putting 3 as qvhom for 12
Putting 1 as pvhom for 13
Putting 7 as qvhom for 13
Putting 1 as pvhom for 14
Putting 7 as qvhom for 14
Putting 4 as pvhom for 15
Putting 1 as qvhom for 15
Putting 2 as pvhom for 16
Putting 4 as qvhom for 16
Putting 2 as pvhom for 17
Putting 4 as qvhom for 17
Putting 2 as pvhom for 18
Putting 7 as qvhom for 18
Our final Seen consists of:
Putting 1 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
Putting 2 as pvhom for 3
Putting 2 as pvhom for 4
Putting 7 as pvhom for 5
Putting 7 as pvhom for 6
Putting 3 as pvhom for 7
Putting 4 as pvhom for 8
Putting 3 as pvhom for 9
Putting 4 as pvhom for 10
Putting 5 as pvhom for 11
Putting 6 as pvhom for 12
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 8} 0 0 0 0 0 0 0 0 0 ({11},434) ({12},432) 0 0 
{1 8} 0 0 0 0 0 0 0 ({9 13},434) ({10 14},432) 0 0 0 0 
{2} 0 0 0 ({3 15},421) ({4 5},421) 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 ({16},214) ({17},212) 
{4 5} 0 0 0 0 0 ({6 18},213) ({7 18},213) 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 ({11},134) ({12},132) 0 0 
{7 18} 0 0 0 0 0 0 0 ({9 13},134) ({10 14},132) 0 0 0 0 
{9 13} 0 0 ({2},342) 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 ({4 5},321) 0 0 0 0 0 0 0 0 
{11} ({0 8},343) ({1 8},343) 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 ({3 15},321) 0 0 0 0 0 0 0 0 0 
{16} ({0 8},143) ({1 8},143) 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 ({3 15},121) ({4 5},121) 0 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 8} 0 0 0 0 0 0 0 0 0 434/ 432/ 0 0 
{1 8} 0 0 0 0 0 0 0 434/ 432/ 0 0 0 0 
{2} 0 0 0 421/ 421/ 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 214/ 212/ 
{4 5} 0 0 0 0 0 213/ 213/ 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 134/ 132/ 0 0 
{7 18} 0 0 0 0 0 0 0 134/ 132/ 0 0 0 0 
{9 13} 0 0 342/ 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 321/ 0 0 0 0 0 0 0 0 
{11} 343/ 343/ 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{16} 143/ 143/ 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 121/ 121/ 0 0 0 0 0 0 0 0 
Printing vertex homoms
{0 8} 1 0
{1 8} 1 0
{2} 0 0
{3 15} 2 0
{4 5} 2 0
{6 18} 7 0
{7 18} 7 0
{9 13} 3 0
{10 14} 4 0
{11} 3 0
{12} 4 0
{16} 5 0
{17} 6 0
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
CHECKING IF INDUCED LEFT P REP FOR T2D IS P LEFT DEF
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 1
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 0
Got pair 1,143
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Looking at type 2
Did not find a match for vvcit, oldv set as 1
Got pair 2,121
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 2 and 1
Got pair 2,421
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 3
Did not find a match for vvcit, oldv set as 3
Got pair 3,134
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 4 and 3
Got pair 3,434
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 3
Looking at type 4
Found a match for our vvcit: 2
Got pair 4,132
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 7
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Got pair 4,432
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,213
Looking at element 5 of our current vertex collection
Current phom is 213
Looking at element 6 of our current vertex collection
Current phom is 213
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Looking at vertex 3 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 1 which is connected to 2 and is colored 0
Looking at vertex 3 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
Our final Seen consists of:
Printing Gamma Graph which has 13 vertices and 22 edges.
{0} 0 0 0 0 0 0 0 0 ({0},143) 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 ({1 4},132) 0 0 ({1 4},134) 
{2 5} 0 0 0 ({2 5},212) ({2 5},213) ({2 5},214) 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 ({3},121) 0 
{4 7} 0 0 0 0 0 0 0 0 0 ({4 7},132) 0 0 ({4 7},134) 
{6} 0 0 0 0 0 0 0 0 ({6},143) 0 0 0 0 
{8} 0 0 0 0 0 0 0 ({8},342) ({8},343) 0 0 0 0 
{9 10} 0 0 ({9 10},421) 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 ({11 12},434) 0 0 0 ({11 12},432) 0 0 
{13 14} 0 0 ({13 14},321) 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 ({15},321) 0 
{16 17} ({16 17},214) ({16 17},213) 0 ({16 17},212) 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 ({18},342) ({18},343) 0 0 0 0 
Printing Representation Matrix
{0} 0 0 0 0 0 0 0 0 /143 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 /132 0 0 /134 
{2 5} 0 0 0 /212 /213 /214 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 /121 0 
{4 7} 0 0 0 0 0 0 0 0 0 /132 0 0 /134 
{6} 0 0 0 0 0 0 0 0 /143 0 0 0 0 
{8} 0 0 0 0 0 0 0 /342 /343 0 0 0 0 
{9 10} 0 0 /421 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 /434 0 0 0 /432 0 0 
{13 14} 0 0 /321 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 /321 0 
{16 17} /214 /213 0 /212 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 /342 /343 0 0 0 0 
Printing vertex homoms
{0} 0 5
{1 4} 0 7
{2 5} 0 2
{3} 0 6
{4 7} 0 7
{6} 0 5
{8} 0 3
{9 10} 0 0
{11 12} 0 1
{13 14} 0 4
{15} 0 4
{16 17} 0 2
{18} 0 3
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
CHECKING IF INDUCED RIGHT REP FOR T2D IS Q RIGHT DEF
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 2
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
We are 0
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 5
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 3
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Got pair 4,321
Looking at element 9 of our current vertex collection
Looking at element 10 of our current vertex collection
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 4 and 0
Looking at type 5
Found a match for our vvcit: 2
Got pair 5,143
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 5,142
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 0 and newType is 1
typeMatrix is 2 by 8
We are 0
Looking at type 7
Found a match for our vvcit: 1
Got pair 7,132
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 4
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 7,134
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Vertex 4 is white
Looking at vertex 0 which is connected to 4 and is colored 2
We are definite
Putting 2 as pvhom for 0
Putting 5 as qvhom for 0
Putting 2 as pvhom for 1
Putting 5 as qvhom for 1
Putting 0 as pvhom for 2
Putting 3 as qvhom for 2
Putting 2 as pvhom for 3
Putting 0 as qvhom for 3
Putting 2 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 4 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 1 as pvhom for 8
Putting 3 as qvhom for 8
Putting 3 as pvhom for 9
Putting 1 as qvhom for 9
Putting 3 as pvhom for 10
Putting 1 as qvhom for 10
Putting 3 as pvhom for 11
Putting 1 as qvhom for 11
Putting 3 as pvhom for 12
Putting 1 as qvhom for 12
Putting 7 as pvhom for 13
Putting 1 as qvhom for 13
Putting 7 as pvhom for 14
Putting 1 as qvhom for 14
Putting 1 as pvhom for 15
Putting 4 as qvhom for 15
Putting 4 as pvhom for 16
Putting 2 as qvhom for 16
Putting 4 as pvhom for 17
Putting 2 as qvhom for 17
Putting 7 as pvhom for 18
Putting 2 as qvhom for 18
Our final Seen consists of:
Putting 5 as pvhom for 0
Putting 7 as pvhom for 1
Putting 2 as pvhom for 2
Putting 6 as pvhom for 3
Putting 7 as pvhom for 4
Putting 2 as pvhom for 5
Putting 3 as pvhom for 6
Putting 0 as pvhom for 7
Putting 0 as pvhom for 8
Putting 1 as pvhom for 9
Putting 1 as pvhom for 10
Putting 4 as pvhom for 11
Putting 4 as pvhom for 12
Printing Gamma Graph which has 13 vertices and 22 edges.
{0 6} 0 0 0 0 0 0 0 0 0 ({11},143) ({12},143) 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},132) ({14 15},132) 
{2 17} 0 0 0 ({3},212) ({4},213) 0 0 0 0 0 0 0 0 
{3} 0 0 ({2 17},121) 0 0 ({5 16},121) 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 ({8 18},134) 0 0 0 0 0 0 
{5 16} ({0 6},214) ({1 7},213) 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 ({9},342) ({10},342) ({11},343) ({12},343) 0 0 
{9} 0 0 ({2 17},421) 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 ({5 16},421) 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 ({8 18},434) 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},432) ({14 15},432) 
{13 15} 0 0 ({2 17},321) 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 ({5 16},321) 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 6} 0 0 0 0 0 0 0 0 0 /143 /143 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 /132 /132 
{2 17} 0 0 0 /212 /213 0 0 0 0 0 0 0 0 
{3} 0 0 /121 0 0 /121 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 /134 0 0 0 0 0 0 
{5 16} /214 /213 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 /342 /342 /343 /343 0 0 
{9} 0 0 /421 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 /421 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 /434 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 /432 /432 
{13 15} 0 0 /321 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 /321 0 0 0 0 0 0 0 
Printing vertex homoms
{0 6} 0 5
{1 7} 0 7
{2 17} 0 2
{3} 0 6
{4} 0 7
{5 16} 0 2
{8 18} 0 3
{9} 0 0
{10} 0 0
{11} 0 1
{12} 0 1
{13 15} 0 4
{14 15} 0 4
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
CHECKING IF INDUCED LEFT Q REP FOR T2D IS Q LEFT DEF
Printing Gamma Graph which has 13 vertices and 22 edges.
{0 6} 0 0 0 0 0 0 0 0 0 ({11},143) ({12},143) 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},132) ({14 15},132) 
{2 17} 0 0 0 ({3},212) ({4},213) 0 0 0 0 0 0 0 0 
{3} 0 0 ({2 17},121) 0 0 ({5 16},121) 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 ({8 18},134) 0 0 0 0 0 0 
{5 16} ({0 6},214) ({1 7},213) 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 ({9},342) ({10},342) ({11},343) ({12},343) 0 0 
{9} 0 0 ({2 17},421) 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 ({5 16},421) 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 ({8 18},434) 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},432) ({14 15},432) 
{13 15} 0 0 ({2 17},321) 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 ({5 16},321) 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 6} 0 0 0 0 0 0 0 0 0 /143 /143 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 /132 /132 
{2 17} 0 0 0 /212 /213 0 0 0 0 0 0 0 0 
{3} 0 0 /121 0 0 /121 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 /134 0 0 0 0 0 0 
{5 16} /214 /213 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 /342 /342 /343 /343 0 0 
{9} 0 0 /421 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 /421 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 /434 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 /432 /432 
{13 15} 0 0 /321 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 /321 0 0 0 0 0 0 0 
Printing vertex homoms
{0 6} 0 5
{1 7} 0 7
{2 17} 0 2
{3} 0 6
{4} 0 7
{5 16} 0 2
{8 18} 0 3
{9} 0 0
{10} 0 0
{11} 0 1
{12} 0 1
{13 15} 0 4
{14 15} 0 4
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,142
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 0 and newType is 0
typeMatrix is 2 by 8
Got pair 0,342
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,143
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 2
Did not find a match for vvcit, oldv set as 2
Got pair 2,121
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 2
Got pair 2,421
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 0
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
Looking at type 4
Found a match for our vvcit: 3
Got pair 4,132
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 7
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 4,432
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Did not find a match for vvcit, oldv set as 4
Got pair 7,213
Looking at element 1 of our current vertex collection
Current phom is 213
Looking at element 4 of our current vertex collection
Current phom is 213
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 2 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 4 which is connected to 2 and is colored 0
Looking at vertex 2 which is connected to 3 and is colored 2
We are definite
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Found a match, new m value is: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 1
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 1
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Got pair 1,432
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 1,434
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 5
typeMatrix is 2 by 8
Looking at type 3
Found a match for our vvcit: 2
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Found a match for our vvcit: 1
Got pair 4,321
Looking at element 7 of our current vertex collection
Looking at element 9 of our current vertex collection
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,132
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
We have created an edge between 4 and 1
Got pair 7,134
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
Looking at vertex 1 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 1
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 0
Got pair 1,143
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Looking at type 2
Did not find a match for vvcit, oldv set as 1
Got pair 2,121
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 2 and 1
Got pair 2,421
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 3
Did not find a match for vvcit, oldv set as 3
Got pair 3,134
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 4 and 3
Got pair 3,434
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 3
Looking at type 4
Found a match for our vvcit: 2
Got pair 4,132
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 7
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Got pair 4,432
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,213
Looking at element 5 of our current vertex collection
Current phom is 213
Looking at element 6 of our current vertex collection
Current phom is 213
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Looking at vertex 3 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 1 which is connected to 2 and is colored 0
Looking at vertex 3 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 2
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
We are 0
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 5
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 3
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Got pair 4,321
Looking at element 9 of our current vertex collection
Looking at element 10 of our current vertex collection
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 4 and 0
Looking at type 5
Found a match for our vvcit: 2
Got pair 5,143
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 5,142
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 0 and newType is 1
typeMatrix is 2 by 8
We are 0
Looking at type 7
Found a match for our vvcit: 1
Got pair 7,132
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 4
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 7,134
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Vertex 4 is white
Looking at vertex 0 which is connected to 4 and is colored 2
We are definite
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,142
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 0 and newType is 0
typeMatrix is 2 by 8
Got pair 0,342
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,143
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 2
Did not find a match for vvcit, oldv set as 2
Got pair 2,121
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 2
Got pair 2,421
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 0
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
Looking at type 4
Found a match for our vvcit: 3
Got pair 4,132
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 7
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 4,432
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Did not find a match for vvcit, oldv set as 4
Got pair 7,213
Looking at element 1 of our current vertex collection
Current phom is 213
Looking at element 4 of our current vertex collection
Current phom is 213
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 2 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 4 which is connected to 2 and is colored 0
Looking at vertex 2 which is connected to 3 and is colored 2
We are definite
Everything checks out, we're 1-1
Our final Seen consists of:
Putting 5 as pvhom for 0
Putting 2 as qvhom for 0
Putting 5 as pvhom for 1
Putting 2 as qvhom for 1
Putting 3 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 2 as qvhom for 3
Putting 0 as pvhom for 4
Putting 2 as qvhom for 4
Putting 4 as pvhom for 5
Putting 0 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 3 as pvhom for 8
Putting 1 as qvhom for 8
Putting 1 as pvhom for 9
Putting 3 as qvhom for 9
Putting 1 as pvhom for 10
Putting 3 as qvhom for 10
Putting 1 as pvhom for 11
Putting 3 as qvhom for 11
Putting 1 as pvhom for 12
Putting 3 as qvhom for 12
Putting 1 as pvhom for 13
Putting 7 as qvhom for 13
Putting 1 as pvhom for 14
Putting 7 as qvhom for 14
Putting 4 as pvhom for 15
Putting 1 as qvhom for 15
Putting 2 as pvhom for 16
Putting 4 as qvhom for 16
Putting 2 as pvhom for 17
Putting 4 as qvhom for 17
Putting 2 as pvhom for 18
Putting 7 as qvhom for 18
Our final Seen consists of:
Putting 1 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
Putting 2 as pvhom for 3
Putting 2 as pvhom for 4
Putting 7 as pvhom for 5
Putting 7 as pvhom for 6
Putting 3 as pvhom for 7
Putting 4 as pvhom for 8
Putting 3 as pvhom for 9
Putting 4 as pvhom for 10
Putting 5 as pvhom for 11
Putting 6 as pvhom for 12
Our final Seen consists of:
Putting 2 as pvhom for 0
Putting 5 as qvhom for 0
Putting 2 as pvhom for 1
Putting 5 as qvhom for 1
Putting 0 as pvhom for 2
Putting 3 as qvhom for 2
Putting 2 as pvhom for 3
Putting 0 as qvhom for 3
Putting 2 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 4 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 1 as pvhom for 8
Putting 3 as qvhom for 8
Putting 3 as pvhom for 9
Putting 1 as qvhom for 9
Putting 3 as pvhom for 10
Putting 1 as qvhom for 10
Putting 3 as pvhom for 11
Putting 1 as qvhom for 11
Putting 3 as pvhom for 12
Putting 1 as qvhom for 12
Putting 7 as pvhom for 13
Putting 1 as qvhom for 13
Putting 7 as pvhom for 14
Putting 1 as qvhom for 14
Putting 1 as pvhom for 15
Putting 4 as qvhom for 15
Putting 4 as pvhom for 16
Putting 2 as qvhom for 16
Putting 4 as pvhom for 17
Putting 2 as qvhom for 17
Putting 7 as pvhom for 18
Putting 2 as qvhom for 18
Our final Seen consists of:
Putting 5 as pvhom for 0
Putting 7 as pvhom for 1
Putting 2 as pvhom for 2
Putting 6 as pvhom for 3
Putting 7 as pvhom for 4
Putting 2 as pvhom for 5
Putting 3 as pvhom for 6
Putting 0 as pvhom for 7
Putting 0 as pvhom for 8
Putting 1 as pvhom for 9
Putting 1 as pvhom for 10
Putting 4 as pvhom for 11
Putting 4 as pvhom for 12
In 1-1 function for textile 
Printing Gamma Graph which has 19 vertices and 35 edges.
05090311 0 0 0 0 0 0 0 0 0 0 0 050903110210 050903110215 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 050904120113 050904120116 0 0 0 0 
01130514 0 0 0 011305140613 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051406130509 051406130514 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051407100311 
01160809 0 0 0 0 0 0 011608090311 011608090412 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 080903110210 080903110215 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 080904120113 080904120116 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 021003110113 021003110116 021003110210 021003110215 0 0 0 0 0 0 
03110113 0 0 031101130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 031101160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 0 
04120113 0 0 041201130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 041201160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021506130509 021506130514 0 
06130509 061305090311 061305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 061305140613 061305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 071003110113 071003110116 071003110210 071003110215 0 0 0 0 0 0 
Printing Representation Matrix
05090311 0 0 0 0 0 0 0 0 0 0 0 434/143 432/143 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 434/132 432/132 0 0 0 0 
01130514 0 0 0 421/212 421/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/121 212/121 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 213/134 
01160809 0 0 0 0 0 0 213/214 213/213 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 134/143 132/143 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 134/132 132/132 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 434/342 432/342 434/343 432/343 0 0 0 0 0 0 
03110113 0 0 342/421 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 321/421 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 343/434 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 321/432 0 0 0 
04120113 0 0 342/321 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 321/321 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 214/321 212/321 0 
06130509 143/214 143/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 121/212 121/213 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 134/342 132/342 134/343 132/343 0 0 0 0 0 0 
Printing vertex homoms
05090311 1 5
05090412 1 7
01130514 0 2
05140613 2 6
05140710 2 7
01160809 2 2
08090311 7 5
08090412 7 7
02100311 1 3
03110113 3 0
03110116 4 0
03110210 3 1
03110215 4 1
04120113 3 4
04120116 4 4
02150613 2 4
06130509 5 2
06130514 6 2
07100311 7 3
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
Printing IRQ
Printing Gamma Graph which has 13 vertices and 22 edges.
{0} 0 0 0 0 0 0 0 0 ({0},143) 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 ({1 4},132) 0 0 ({1 4},134) 
{2 5} 0 0 0 ({2 5},212) ({2 5},213) ({2 5},214) 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 ({3},121) 0 
{4 7} 0 0 0 0 0 0 0 0 0 ({4 7},132) 0 0 ({4 7},134) 
{6} 0 0 0 0 0 0 0 0 ({6},143) 0 0 0 0 
{8} 0 0 0 0 0 0 0 ({8},342) ({8},343) 0 0 0 0 
{9 10} 0 0 ({9 10},421) 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 ({11 12},434) 0 0 0 ({11 12},432) 0 0 
{13 14} 0 0 ({13 14},321) 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 ({15},321) 0 
{16 17} ({16 17},214) ({16 17},213) 0 ({16 17},212) 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 ({18},342) ({18},343) 0 0 0 0 
Printing Representation Matrix
{0} 0 0 0 0 0 0 0 0 /143 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 /132 0 0 /134 
{2 5} 0 0 0 /212 /213 /214 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 /121 0 
{4 7} 0 0 0 0 0 0 0 0 0 /132 0 0 /134 
{6} 0 0 0 0 0 0 0 0 /143 0 0 0 0 
{8} 0 0 0 0 0 0 0 /342 /343 0 0 0 0 
{9 10} 0 0 /421 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 /434 0 0 0 /432 0 0 
{13 14} 0 0 /321 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 /321 0 
{16 17} /214 /213 0 /212 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 /342 /343 0 0 0 0 
Printing vertex homoms
{0} 0 5
{1 4} 0 7
{2 5} 0 2
{3} 0 6
{4 7} 0 7
{6} 0 5
{8} 0 3
{9 10} 0 0
{11 12} 0 1
{13 14} 0 4
{15} 0 4
{16 17} 0 2
{18} 0 3
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 2
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
We are 0
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 5
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 3
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Got pair 4,321
Looking at element 9 of our current vertex collection
Looking at element 10 of our current vertex collection
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 4 and 0
Looking at type 5
Found a match for our vvcit: 2
Got pair 5,143
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 5,142
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 0 and newType is 1
typeMatrix is 2 by 8
We are 0
Looking at type 7
Found a match for our vvcit: 1
Got pair 7,132
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 4
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 7,134
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Vertex 4 is white
Looking at vertex 0 which is connected to 4 and is colored 2
We are definite
Printing ILQ
Printing Gamma Graph which has 13 vertices and 22 edges.
{0 6} 0 0 0 0 0 0 0 0 0 ({11},143) ({12},143) 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},132) ({14 15},132) 
{2 17} 0 0 0 ({3},212) ({4},213) 0 0 0 0 0 0 0 0 
{3} 0 0 ({2 17},121) 0 0 ({5 16},121) 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 ({8 18},134) 0 0 0 0 0 0 
{5 16} ({0 6},214) ({1 7},213) 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 ({9},342) ({10},342) ({11},343) ({12},343) 0 0 
{9} 0 0 ({2 17},421) 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 ({5 16},421) 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 ({8 18},434) 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},432) ({14 15},432) 
{13 15} 0 0 ({2 17},321) 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 ({5 16},321) 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 6} 0 0 0 0 0 0 0 0 0 /143 /143 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 /132 /132 
{2 17} 0 0 0 /212 /213 0 0 0 0 0 0 0 0 
{3} 0 0 /121 0 0 /121 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 /134 0 0 0 0 0 0 
{5 16} /214 /213 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 /342 /342 /343 /343 0 0 
{9} 0 0 /421 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 /421 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 /434 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 /432 /432 
{13 15} 0 0 /321 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 /321 0 0 0 0 0 0 0 
Printing vertex homoms
{0 6} 0 5
{1 7} 0 7
{2 17} 0 2
{3} 0 6
{4} 0 7
{5 16} 0 2
{8 18} 0 3
{9} 0 0
{10} 0 0
{11} 0 1
{12} 0 1
{13 15} 0 4
{14 15} 0 4
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,142
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 0 and newType is 0
typeMatrix is 2 by 8
Got pair 0,342
Looking at element 7 of our current vertex collection
Current phom is 342
Looking at element 8 of our current vertex collection
Current phom is 342
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,143
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 9 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 10 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 2
Did not find a match for vvcit, oldv set as 2
Got pair 2,121
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 2
Got pair 2,421
Looking at element 2 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 5 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 0
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
Looking at type 4
Found a match for our vvcit: 3
Got pair 4,132
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 7
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 4,432
Looking at element 11 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 12 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Did not find a match for vvcit, oldv set as 4
Got pair 7,213
Looking at element 1 of our current vertex collection
Current phom is 213
Looking at element 4 of our current vertex collection
Current phom is 213
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 2 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 4 which is connected to 2 and is colored 0
Looking at vertex 2 which is connected to 3 and is colored 2
We are definite
Printing IRP
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 1} 0 0 0 0 0 0 0 0 ({0 1},434) ({0 1},432) 0 0 0 
{2} 0 0 ({2},421) 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 ({3 4},214) ({3 4},212) ({3 4},213) 
{5 15} 0 0 0 0 ({5 15},213) 0 0 0 0 0 ({5 15},214) ({5 15},212) 0 
{6 7} 0 0 0 0 0 0 0 0 ({6 7},134) ({6 7},132) 0 0 0 
{8} 0 0 0 0 0 0 ({8},434) ({8},432) 0 0 0 0 0 
{9 11} 0 ({9 11},342) 0 0 0 ({9 11},343) 0 0 0 0 0 0 0 
{10 12} 0 0 0 ({10 12},321) 0 0 0 0 0 0 0 0 0 
{11 13} 0 ({11 13},342) 0 0 0 ({11 13},343) 0 0 0 0 0 0 0 
{12 14} 0 0 0 ({12 14},321) 0 0 0 0 0 0 0 0 0 
{16} ({16},143) 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 ({17},121) 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 ({18},134) ({18},132) 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 0 0 0 0 0 434/ 432/ 0 0 0 
{2} 0 0 421/ 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 214/ 212/ 213/ 
{5 15} 0 0 0 0 213/ 0 0 0 0 0 214/ 212/ 0 
{6 7} 0 0 0 0 0 0 0 0 134/ 132/ 0 0 0 
{8} 0 0 0 0 0 0 434/ 432/ 0 0 0 0 0 
{9 11} 0 342/ 0 0 0 343/ 0 0 0 0 0 0 0 
{10 12} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{11 13} 0 342/ 0 0 0 343/ 0 0 0 0 0 0 0 
{12 14} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{16} 143/ 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 121/ 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 134/ 132/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 1 0
{2} 0 0
{3 4} 2 0
{5 15} 2 0
{6 7} 7 0
{8} 1 0
{9 11} 3 0
{10 12} 4 0
{11 13} 3 0
{12 14} 4 0
{16} 5 0
{17} 6 0
{18} 7 0
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
We have inserted 42 into types.
We have pushed 421 onto the current string collection
We have inserted 43 into types.
We have pushed 434 onto the current string collection
We have pushed 432 onto the current string collection
We have inserted 21 into types.
We have pushed 214 onto the current string collection
We have pushed 212 onto the current string collection
We have pushed 213 onto the current string collection
We have inserted 34 into types.
We have pushed 342 onto the current string collection
We have pushed 343 onto the current string collection
We have inserted 32 into types.
We have pushed 321 onto the current string collection
We have inserted 14 into types.
We have pushed 142 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 12 into types.
We have pushed 121 onto the current string collection
We have inserted 13 into types.
We have pushed 134 onto the current string collection
We have pushed 132 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Found a match, new m value is: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 1
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 1
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Got pair 1,432
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 1,434
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 2
Got pair 2,213
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Got pair 2,212
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,214
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 5
typeMatrix is 2 by 8
Looking at type 3
Found a match for our vvcit: 2
Got pair 3,343
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 3,342
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Found a match for our vvcit: 1
Got pair 4,321
Looking at element 7 of our current vertex collection
Looking at element 9 of our current vertex collection
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,132
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
We have created an edge between 4 and 1
Got pair 7,134
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
Looking at vertex 1 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
Printing ILP
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 8} 0 0 0 0 0 0 0 0 0 ({11},434) ({12},432) 0 0 
{1 8} 0 0 0 0 0 0 0 ({9 13},434) ({10 14},432) 0 0 0 0 
{2} 0 0 0 ({3 15},421) ({4 5},421) 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 ({16},214) ({17},212) 
{4 5} 0 0 0 0 0 ({6 18},213) ({7 18},213) 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 ({11},134) ({12},132) 0 0 
{7 18} 0 0 0 0 0 0 0 ({9 13},134) ({10 14},132) 0 0 0 0 
{9 13} 0 0 ({2},342) 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 ({4 5},321) 0 0 0 0 0 0 0 0 
{11} ({0 8},343) ({1 8},343) 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 ({3 15},321) 0 0 0 0 0 0 0 0 0 
{16} ({0 8},143) ({1 8},143) 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 ({3 15},121) ({4 5},121) 0 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 8} 0 0 0 0 0 0 0 0 0 434/ 432/ 0 0 
{1 8} 0 0 0 0 0 0 0 434/ 432/ 0 0 0 0 
{2} 0 0 0 421/ 421/ 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 214/ 212/ 
{4 5} 0 0 0 0 0 213/ 213/ 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 134/ 132/ 0 0 
{7 18} 0 0 0 0 0 0 0 134/ 132/ 0 0 0 0 
{9 13} 0 0 342/ 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 321/ 0 0 0 0 0 0 0 0 
{11} 343/ 343/ 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 321/ 0 0 0 0 0 0 0 0 0 
{16} 143/ 143/ 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 121/ 121/ 0 0 0 0 0 0 0 0 
Printing vertex homoms
{0 8} 1 0
{1 8} 1 0
{2} 0 0
{3 15} 2 0
{4 5} 2 0
{6 18} 7 0
{7 18} 7 0
{9 13} 3 0
{10 14} 4 0
{11} 3 0
{12} 4 0
{16} 5 0
{17} 6 0
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
We have inserted 42 into types.
We have pushed 342 onto the current string collection
We have pushed 142 onto the current string collection
We have inserted 43 into types.
We have pushed 343 onto the current string collection
We have pushed 143 onto the current string collection
We have inserted 21 into types.
We have pushed 421 onto the current string collection
We have pushed 321 onto the current string collection
We have pushed 121 onto the current string collection
We have inserted 34 into types.
We have pushed 434 onto the current string collection
We have pushed 134 onto the current string collection
We have inserted 32 into types.
We have pushed 432 onto the current string collection
We have pushed 132 onto the current string collection
We have inserted 14 into types.
We have pushed 214 onto the current string collection
We have inserted 12 into types.
We have pushed 212 onto the current string collection
We have inserted 13 into types.
We have pushed 213 onto the current string collection
Looking at type: 42
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: 43
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: 21
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: 34
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: 32
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: 14
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: 12
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 1
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: 13
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 0
Got pair 1,143
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,343
Looking at element 0 of our current vertex collection
Current phom is 343
Current phom is 143
Looking at element 1 of our current vertex collection
Current phom is 343
Current phom is 143
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Looking at type 2
Did not find a match for vvcit, oldv set as 1
Got pair 2,121
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,321
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 2 and 1
Got pair 2,421
Looking at element 3 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
Looking at element 4 of our current vertex collection
Current phom is 421
Current phom is 321
Current phom is 121
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 3
Did not find a match for vvcit, oldv set as 3
Got pair 3,134
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 4 and 3
Got pair 3,434
Looking at element 7 of our current vertex collection
Current phom is 434
Current phom is 134
Looking at element 9 of our current vertex collection
Current phom is 434
Current phom is 134
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 3
Looking at type 4
Found a match for our vvcit: 2
Got pair 4,132
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 7
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Got pair 4,432
Looking at element 8 of our current vertex collection
Current phom is 432
Current phom is 132
Looking at element 10 of our current vertex collection
Current phom is 432
Current phom is 132
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,213
Looking at element 5 of our current vertex collection
Current phom is 213
Looking at element 6 of our current vertex collection
Current phom is 213
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Looking at vertex 3 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 1 which is connected to 2 and is colored 0
Looking at vertex 3 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
Again, everything checks out!
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 0 as qvhom for 5
Putting 0 as pvhom for 6
Putting 0 as qvhom for 6
Putting 0 as pvhom for 7
Putting 0 as qvhom for 7
Putting 0 as pvhom for 8
Putting 0 as qvhom for 8
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 0 as pvhom for 2
Putting 0 as pvhom for 3
Putting 0 as pvhom for 4
Putting 1 as pvhom for 5
Putting 1 as pvhom for 6
Putting 1 as pvhom for 7
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 0 as qvhom for 5
Putting 0 as pvhom for 6
Putting 0 as qvhom for 6
Putting 0 as pvhom for 7
Putting 0 as qvhom for 7
Putting 0 as pvhom for 8
Putting 0 as qvhom for 8
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
In 1-1 function for textile 
Printing Gamma Graph which has 9 vertices and 24 edges.
uuuu 0 0 0 0 02050113 02050210 0 0 05020509 
uuuw 0 0 0 0 02050116 02050215 0 0 05020514 
uuvv 0 0 0 0 0 0 05010311 05010412 0 
uvwu 0 01030613 01030710 01040809 0 0 0 0 0 
vwuw 0 0 0 03070514 04080116 04080215 0 0 0 
vwvv 03060311 0 03060412 0 0 0 0 0 0 
wuuu 0 0 0 0 07050113 07050210 0 0 08020509 
wuvv 0 0 0 0 0 0 08010311 08010412 0 
wvwu 0 06030613 06030710 06040809 0 0 0 0 0 
Printing Representation Matrix
uuuu 0 0 0 0 a/c a/b 0 0 c/b 
uuuw 0 0 0 0 a/e a/d 0 0 c/d 
uuvv 0 0 0 0 0 0 c/a c/a 0 
uvwu 0 a/c a/b a/b 0 0 0 0 0 
vwuw 0 0 0 b/d b/e b/d 0 0 0 
vwvv b/a 0 b/a 0 0 0 0 0 0 
wuuu 0 0 0 0 d/c d/b 0 0 e/b 
wuvv 0 0 0 0 0 0 e/a e/a 0 
wvwu 0 d/c d/b d/b 0 0 0 0 0 
Printing vertex homoms
uuuu 0 0
uuuw 0 1
uuvv 0 0
uvwu 0 0
vwuw 0 1
vwvv 0 0
wuuu 1 0
wuvv 1 0
wvwu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Printing IRQ
Printing Gamma Graph which has 7 vertices and 19 edges.
{0 2} 0 0 0 0 ({0 2},c) ({0 2},b) ({0 2},a) 
{1} 0 0 0 0 ({1},e) ({1},d) 0 
{2 3} 0 ({2 3},c) ({2 3},b) 0 0 0 ({2 3},a) 
{3 5} ({3 5},a) ({3 5},c) ({3 5},b) 0 0 0 0 
{4} 0 0 0 ({4},d) ({4},e) 0 0 
{5 8} ({5 8},a) ({5 8},c) ({5 8},b) 0 0 0 0 
{6 7} 0 0 0 0 ({6 7},c) ({6 7},b) ({6 7},a) 
Printing Representation Matrix
{0 2} 0 0 0 0 /c /b /a 
{1} 0 0 0 0 /e /d 0 
{2 3} 0 /c /b 0 0 0 /a 
{3 5} /a /c /b 0 0 0 0 
{4} 0 0 0 /d /e 0 0 
{5 8} /a /c /b 0 0 0 0 
{6 7} 0 0 0 0 /c /b /a 
Printing vertex homoms
{0 2} 0 0
{1} 0 1
{2 3} 0 0
{3 5} 0 0
{4} 0 1
{5 8} 0 0
{6 7} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Found a match, new m value is: 3
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 4
We are done checking vertex: 5
Found a match, new m value is: 5
We are done checking vertex: 6
Out of for loop
New maxM is 5
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Out of for loop
Dummy[0] set and maxM-M is 3 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 5
Starting to look at vertex collections of size 5
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 4
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 3
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 1 and 2
Found a match for our vvcit: 2
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Looking at type 1
Got pair 1,e
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 1,d
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 2 edges.
Vertex 0 is white
Vertex 1 is white
Looking at vertex 2 which is connected to 1 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
We are definite
Printing ILQ
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 3 6 8} ({0 3 6 8},b) ({1 4},c) ({2 5 7},b) 
{1 4} ({0 3 6 8},d) ({1 4},e) ({2 5 7},d) 
{2 5 7} ({0 3 6 8},a) 0 ({2 5 7},a) 
Printing Representation Matrix
{0 3 6 8} /b /c /b 
{1 4} /d /e /d 
{2 5 7} /a 0 /a 
Printing vertex homoms
{0 3 6 8} 0 0
{1 4} 0 1
{2 5 7} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
We are definite
Printing IRP
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 2 3 4 5} ({0 2 3 4 5},b) ({0 2 3 4 5},a) ({0 2 3 4 5},c) 
{1 2 3 4 5} ({1 2 3 4 5},b) ({1 2 3 4 5},a) ({1 2 3 4 5},c) 
{6 7 8} 0 ({6 7 8},d) ({6 7 8},e) 
Printing Representation Matrix
{0 2 3 4 5} b/ a/ c/ 
{1 2 3 4 5} b/ a/ c/ 
{6 7 8} 0 d/ e/ 
Printing vertex homoms
{0 2 3 4 5} 0 0
{1 2 3 4 5} 0 0
{6 7 8} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILP
Printing Gamma Graph which has 8 vertices and 21 edges.
{0 1} 0 0 0 ({4},a) ({5},a) 0 0 ({8},c) 
{2} 0 0 0 0 0 ({6},c) ({7},c) 0 
{3} ({0 1},a) ({2},a) ({3},a) 0 0 0 0 0 
{4} 0 0 ({3},b) ({4},b) ({5},b) 0 0 0 
{5} ({0 1},b) ({2},b) 0 0 0 0 0 0 
{6} 0 0 0 ({4},d) ({5},d) 0 0 ({8},e) 
{7} 0 0 0 0 0 ({6},e) ({7},e) 0 
{8} ({0 1},d) ({2},d) ({3},d) 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 a/ a/ 0 0 c/ 
{2} 0 0 0 0 0 c/ c/ 0 
{3} a/ a/ a/ 0 0 0 0 0 
{4} 0 0 b/ b/ b/ 0 0 0 
{5} b/ b/ 0 0 0 0 0 0 
{6} 0 0 0 d/ d/ 0 0 e/ 
{7} 0 0 0 0 0 e/ e/ 0 
{8} d/ d/ d/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 0 0
{2} 0 0
{3} 0 0
{4} 0 0
{5} 0 0
{6} 1 0
{7} 1 0
{8} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
Found a match, new m value is: 3
We are done checking vertex: 2
Found a match, new m value is: 4
We are done checking vertex: 3
Found a match, new m value is: 5
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Out of for loop
New maxM is 5
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
Found a match, new m value is: 3
We are done checking vertex: 7
Out of for loop
Dummy[0] set and maxM-M is 2 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 5
Starting to look at vertex collections of size 5
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Starting to look at vertex collections of size 4
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Starting to look at vertex collections of size 3
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 1
typeMatrix is 5 by 2
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 0
typeMatrix is 5 by 2
Checking to see if we have cycles.
MatrixHelper has 2 vertices and 0 edges.
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 2
Got pair 0,d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Did not find a match for vvcit, oldv set as 3
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
We have created an edge between 2 and 3
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Did not find a match for vvcit, oldv set as 4
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Looking at type 1
Did not find a match for vvcit, oldv set as 5
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 1
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 6 and 5
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 0
typeMatrix is 5 by 2
We have created an edge between 4 and 5
Found a match for our vvcit: 6
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
newM is 1 and newType is 0
typeMatrix is 5 by 2
Checking to see if we have cycles.
MatrixHelper has 7 vertices and 3 edges.
Looking at vertex 3 which is connected to 2 and is colored 0
Looking at vertex 5 which is connected to 4 and is colored 0
Looking at vertex 5 which is connected to 6 and is colored 2
We are definite
TfourNone is 1-1
GammaT vnames really are: a b c d e 
Printing Gamma Graph which has 5 vertices and 8 edges.
a 0 0 0 11 12 
b 09 0 10 0 0 
c 0 13 0 0 0 
d 14 0 15 0 0 
e 0 16 0 0 0 
Printing Representation Matrix
a 0 0 0 v/u v/v 
b u/u 0 u/v 0 0 
c 0 u/w 0 0 0 
d w/u 0 w/v 0 0 
e 0 w/w 0 0 0 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
GammaT vnames really are: a b c d e 
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 1 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 0 as pvhom for 2
Putting 1 as pvhom for 3
Putting 1 as pvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 1 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
In 1-1 function for textile 
Printing Gamma Graph which has 5 vertices and 8 edges.
a 0 0 0 11 12 
b 09 0 10 0 0 
c 0 13 0 0 0 
d 14 0 15 0 0 
e 0 16 0 0 0 
Printing Representation Matrix
a 0 0 0 v/u v/v 
b u/u 0 u/v 0 0 
c 0 u/w 0 0 0 
d w/u 0 w/v 0 0 
e 0 w/w 0 0 0 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
Printing IRQ
Printing Gamma Graph which has 5 vertices and 8 edges.
{0} 0 0 0 ({0},u) ({0},v) 
{1} ({1},u) 0 ({1},v) 0 0 
{2} 0 ({2},w) 0 0 0 
{3} ({3},u) 0 ({3},v) 0 0 
{4} 0 ({4},w) 0 0 0 
Printing Representation Matrix
{0} 0 0 0 /u /v 
{1} /u 0 /v 0 0 
{2} 0 /w 0 0 0 
{3} /u 0 /v 0 0 
{4} 0 /w 0 0 0 
Printing vertex homoms
{0} 0 0
{1} 0 0
{2} 0 1
{3} 0 0
{4} 0 1
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
We have inserted Y into types.
We have pushed u onto the current string collection
We have pushed v onto the current string collection
We have inserted Z into types.
We have pushed w onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 3
We are done checking vertex: 3
We are done checking vertex: 4
Out of for loop
New maxM is 3
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 3
Starting to look at vertex collections of size 3
Looking at type 0
Got pair 0,v
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 1
typeMatrix is 3 by 2
Got pair 0,u
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 3 by 2
Target is 0, putting in a new vector<vColl>
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,v
Looking at element 0 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 1
typeMatrix is 3 by 2
Could not find the vertex, creating a new one
We have created an edge between 1 and 2
Got pair 0,u
Looking at element 0 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 3 by 2
We have created an edge between 1 and 1
Looking at type 1
Found a match for our vvcit: 2
Got pair 1,w
Looking at element 2 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 3 by 2
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 3 vertices and 2 edges.
Vertex 0 is white
Vertex 1 is white
Looking at vertex 2 which is connected to 1 and is colored 0
Looking at vertex 1 which is connected to 1 and is colored 1
Printing ILQ
Printing Gamma Graph which has 2 vertices and 3 edges.
{0 1 3} ({0 1 3},u) ({2 4},v) 
{2 4} ({0 1 3},w) 0 
Printing Representation Matrix
{0 1 3} /u /v 
{2 4} /w 0 
Printing vertex homoms
{0 1 3} 0 0
{2 4} 0 1
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
We have inserted Y into types.
We have pushed u onto the current string collection
We have pushed w onto the current string collection
We have inserted Z into types.
We have pushed v onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 1
We are definite
Printing IRP
Printing Gamma Graph which has 2 vertices and 3 edges.
{0 1 2} ({0 1 2},u) ({0 1 2},v) 
{3 4} ({3 4},w) 0 
Printing Representation Matrix
{0 1 2} u/ v/ 
{3 4} w/ 0 
Printing vertex homoms
{0 1 2} 0 0
{3 4} 1 0
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
We have inserted Y into types.
We have pushed u onto the current string collection
We have pushed v onto the current string collection
We have inserted Z into types.
We have pushed w onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 1
We are definite
Printing ILP
Printing Gamma Graph which has 5 vertices and 8 edges.
{0} 0 0 0 ({3},v) ({4},v) 
{1} ({0},u) 0 ({2},u) 0 0 
{2} 0 ({1},u) 0 0 0 
{3} ({0},w) 0 ({2},w) 0 0 
{4} 0 ({1},w) 0 0 0 
Printing Representation Matrix
{0} 0 0 0 v/ v/ 
{1} u/ 0 u/ 0 0 
{2} 0 u/ 0 0 0 
{3} w/ 0 w/ 0 0 
{4} 0 w/ 0 0 0 
Printing vertex homoms
{0} 0 0
{1} 0 0
{2} 0 0
{3} 1 0
{4} 1 0
Printing G Graph which has 2 vertices and 3 edges.
Y u v 
Z w 0 
We have inserted Y into types.
We have pushed u onto the current string collection
We have pushed w onto the current string collection
We have inserted Z into types.
We have pushed v onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
Found a match, new m value is: 3
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Out of for loop
New maxM is 3
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 3
Starting to look at vertex collections of size 3
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,w
Looking at element 0 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 1 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 2 of our current vertex collection
Current phom is u
Current phom is w
newM is 2 and newType is 1
typeMatrix is 3 by 2
Got pair 0,u
Looking at element 0 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 1 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 2 of our current vertex collection
Current phom is u
Current phom is w
newM is 2 and newType is 0
typeMatrix is 3 by 2
Target is 0, putting in a new vector<vColl>
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 1
Got pair 0,w
Looking at element 1 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 2 of our current vertex collection
Current phom is u
Current phom is w
newM is 2 and newType is 1
typeMatrix is 3 by 2
Could not find the vertex, creating a new one
We have created an edge between 2 and 1
Got pair 0,u
Looking at element 1 of our current vertex collection
Current phom is u
Current phom is w
Looking at element 2 of our current vertex collection
Current phom is u
Current phom is w
newM is 2 and newType is 0
typeMatrix is 3 by 2
We have created an edge between 1 and 1
Looking at type 1
Found a match for our vvcit: 2
Got pair 1,v
Looking at element 3 of our current vertex collection
Current phom is v
Looking at element 4 of our current vertex collection
Current phom is v
newM is 1 and newType is 0
typeMatrix is 3 by 2
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 3 vertices and 2 edges.
Looking at vertex 1 which is connected to 1 and is colored 1
T'* is NOT 1-1 (this is good)
GammaT vnames really are: a b c d e 
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 1 as pvhom for 2
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
In 1-1 function for textile 
Printing Gamma Graph which has 5 vertices and 24 edges.
a 0 01030710 + 01040809 + 02050210 01030613 + 02050113 02050215 02050116 
b 03060311 + 03060412 0 0 03070514 + 04080215 04080116 
c 05010311 + 05010412 05020509 0 05020514 0 
d 0 06030710 + 06040809 + 07050210 06030613 + 07050113 0 0 
e 08010311 + 08010412 08020509 0 0 0 
Printing Representation Matrix
a 0 uvwu/uuvv + uvwu/uvwu + uuuu/vwvv uvwu/uuuw + uuuu/vwuw uuuw/vwvv uuuw/vwuw 
b vwvv/uuuu + vwvv/uuvv 0 0 vwuw/uvwu + vwuw/vwvv vwuw/vwuw 
c uuvv/wuuu + uuvv/wuvv uuuu/wvwu 0 uuuw/wvwu 0 
d 0 wvwu/uuvv + wvwu/uvwu + wuuu/vwvv wvwu/uuuw + wuuu/vwuw 0 0 
e wuvv/wuuu + wuvv/wuvv wuuu/wvwu 0 0 0 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
Printing IRQ
Printing Gamma Graph which has 3 vertices and 15 edges.
{0 1} ({0 1},uuuu) + ({0 1},uuuw) + ({0 1},uuvv) ({0 1},uvwu) + ({0 1},vwvv) ({0 1},vwuw) 
{1 3} ({1 3},uuuu) + ({1 3},uuuw) + ({1 3},uuvv) ({1 3},uvwu) + ({1 3},vwvv) ({1 3},vwuw) 
{2 4} ({2 4},wuuu) + ({2 4},wuvv) ({2 4},wvwu) 0 
Printing Representation Matrix
{0 1} /uuuu + /uuuw + /uuvv /uvwu + /vwvv /vwuw 
{1 3} /uuuu + /uuuw + /uuvv /uvwu + /vwvv /vwuw 
{2 4} /wuuu + /wuvv /wvwu 0 
Printing vertex homoms
{0 1} 0 0
{1 3} 0 0
{2 4} 0 1
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
We have inserted Y into types.
We have pushed uuuu onto the current string collection
We have pushed uuuw onto the current string collection
We have pushed uuvv onto the current string collection
We have pushed uvwu onto the current string collection
We have pushed vwuw onto the current string collection
We have pushed vwvv onto the current string collection
We have inserted Z into types.
We have pushed wuuu onto the current string collection
We have pushed wuvv onto the current string collection
We have pushed wvwu onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,vwvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,vwuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILQ
Printing Gamma Graph which has 2 vertices and 9 edges.
{0 1 3} ({0 1 3},uuuu) + ({0 1 3},uuvv) + ({0 1 3},uvwu) + ({0 1 3},vwvv) ({2 4},uuuw) + ({2 4},vwuw) 
{2 4} ({0 1 3},wuuu) + ({0 1 3},wuvv) + ({0 1 3},wvwu) 0 
Printing Representation Matrix
{0 1 3} /uuuu + /uuvv + /uvwu + /vwvv /uuuw + /vwuw 
{2 4} /wuuu + /wuvv + /wvwu 0 
Printing vertex homoms
{0 1 3} 0 0
{2 4} 0 1
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
We have inserted Y into types.
We have pushed uuuu onto the current string collection
We have pushed uuvv onto the current string collection
We have pushed uvwu onto the current string collection
We have pushed vwvv onto the current string collection
We have pushed wuuu onto the current string collection
We have pushed wuvv onto the current string collection
We have pushed wvwu onto the current string collection
We have inserted Z into types.
We have pushed uuuw onto the current string collection
We have pushed vwuw onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 1
We are definite
Printing IRP
Printing Gamma Graph which has 3 vertices and 11 edges.
{0} 0 ({0},uuuu) + ({0},uvwu) ({0},uuuw) 
{1 2} ({1 2},uuuu) + ({1 2},uuuw) + ({1 2},uuvv) + ({1 2},vwvv) 0 ({1 2},vwuw) 
{3 4} ({3 4},wuvv) ({3 4},wuuu) + ({3 4},wvwu) 0 
Printing Representation Matrix
{0} 0 uuuu/ + uvwu/ uuuw/ 
{1 2} uuuu/ + uuuw/ + uuvv/ + vwvv/ 0 vwuw/ 
{3 4} wuvv/ wuuu/ + wvwu/ 0 
Printing vertex homoms
{0} 0 0
{1 2} 0 0
{3 4} 1 0
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
We have inserted Y into types.
We have pushed uuuu onto the current string collection
We have pushed uuuw onto the current string collection
We have pushed uuvv onto the current string collection
We have pushed uvwu onto the current string collection
We have pushed vwuw onto the current string collection
We have pushed vwvv onto the current string collection
We have inserted Z into types.
We have pushed wuuu onto the current string collection
We have pushed wuvv onto the current string collection
We have pushed wvwu onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,vwvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,vwuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 2 and newType is 1
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 0,uuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 2 by 2
We have created an edge between 0 and 0
Looking at type 1
Found a match for our vvcit: 1
Got pair 1,wvwu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 1,wuvv
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 1,wuuu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Checking to see if we have cycles.
MatrixHelper has 2 vertices and 2 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 0 which is connected to 0 and is colored 1
Printing ILP
Printing Gamma Graph which has 3 vertices and 13 edges.
{0 2} ({0 2},uuuu) + ({0 2},uuvv) + ({0 2},uvwu) + ({0 2},wuuu) + ({0 2},wuvv) + ({0 2},wvwu) ({1},uuuu) + ({1},uvwu) + ({1},wvwu) ({3 4},uuuw) 
{1} ({0 2},vwvv) 0 ({3 4},vwuw) 
{3 4} 0 ({1},wuuu) 0 
Printing Representation Matrix
{0 2} uuuu/ + uuvv/ + uvwu/ + wuuu/ + wuvv/ + wvwu/ uuuu/ + uvwu/ + wvwu/ uuuw/ 
{1} vwvv/ 0 vwuw/ 
{3 4} 0 wuuu/ 0 
Printing vertex homoms
{0 2} 0 0
{1} 0 0
{3 4} 1 0
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
We have inserted Y into types.
We have pushed uuuu onto the current string collection
We have pushed uuvv onto the current string collection
We have pushed uvwu onto the current string collection
We have pushed vwvv onto the current string collection
We have pushed wuuu onto the current string collection
We have pushed wuvv onto the current string collection
We have pushed wvwu onto the current string collection
We have inserted Z into types.
We have pushed uuuw onto the current string collection
We have pushed vwuw onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,wvwu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,wuvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,wuuu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 2 and newType is 0
typeMatrix is 2 by 2
Could not find the vertex, creating a new one
We have created an edge between 1 and 0
Got pair 0,vwvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 1 of our current vertex collection
Current phom is uuuu
Current phom is uvwu
Current phom is wuuu
Current phom is wvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Found a match for our vvcit: 1
Got pair 0,wvwu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,wuvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,wuuu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuvv
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuu
Looking at element 0 of our current vertex collection
Current phom is uuuu
Current phom is uuvv
Current phom is uvwu
Current phom is vwvv
Current phom is wuuu
Current phom is wuvv
Current phom is wvwu
Looking at element 2 of our current vertex collection
Current phom is uuuw
Current phom is vwuw
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 2 vertices and 1 edges.
Looking at vertex 0 which is connected to 1 and is colored 2
We are definite
TfourNone* is NOT 1-1 (this is good)
GammaT vnames really are: a b c d e 
Printing Gamma Graph which has 5 vertices and 37 edges.
a 0103060311 + 0103060412 + 0205010311 + 0205010412 0205020509 0 0103070514 + 0104080215 + 0205020514 0104080116 
b 0408010311 + 0408010412 0306030710 + 0306040809 + 0307050210 + 0408020509 0306030613 + 0307050113 0 0 
c 0 0501030710 + 0501040809 + 0502050210 0501030613 + 0502050113 0502050215 0502050116 
d 0603060311 + 0603060412 + 0705010311 + 0705010412 0 0 0603070514 + 0604080215 + 0705020514 0604080116 
e 0 0801030710 + 0801040809 0801030613 0802050215 0802050116 
Printing Representation Matrix
a uvwvv/uuuuu + uvwvv/uuuvv + uuuvv/vwuuu + uuuvv/vwuvv uuuuu/vwvwu 0 uvwuw/uuvwu + uvwuw/uvwvv + uuuuw/vwvwu uvwuw/uvwuw 
b vwuvv/vwuuu + vwuvv/vwuvv vwvwu/uuuvv + vwvwu/uuvwu + vwuuu/uvwvv + vwuuu/vwvwu vwvwu/uuuuw + vwuuu/uvwuw 0 0 
c 0 uuvwu/wuuvv + uuvwu/wuvwu + uuuuu/wvwvv uuvwu/wuuuw + uuuuu/wvwuw uuuuw/wvwvv uuuuw/wvwuw 
d wvwvv/uuuuu + wvwvv/uuuvv + wuuvv/vwuuu + wuuvv/vwuvv 0 0 wvwuw/uuvwu + wvwuw/uvwvv + wuuuw/vwvwu wvwuw/uvwuw 
e 0 wuvwu/wuuvv + wuvwu/wuvwu wuvwu/wuuuw wuuuw/wvwvv wuuuw/wvwuw 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
GammaT vnames really are: a b c d e 
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 1 as pvhom for 2
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
In 1-1 function for textile 
Printing Gamma Graph which has 5 vertices and 37 edges.
a 0103060311 + 0103060412 + 0205010311 + 0205010412 0205020509 0 0103070514 + 0104080215 + 0205020514 0104080116 
b 0408010311 + 0408010412 0306030710 + 0306040809 + 0307050210 + 0408020509 0306030613 + 0307050113 0 0 
c 0 0501030710 + 0501040809 + 0502050210 0501030613 + 0502050113 0502050215 0502050116 
d 0603060311 + 0603060412 + 0705010311 + 0705010412 0 0 0603070514 + 0604080215 + 0705020514 0604080116 
e 0 0801030710 + 0801040809 0801030613 0802050215 0802050116 
Printing Representation Matrix
a uvwvv/uuuuu + uvwvv/uuuvv + uuuvv/vwuuu + uuuvv/vwuvv uuuuu/vwvwu 0 uvwuw/uuvwu + uvwuw/uvwvv + uuuuw/vwvwu uvwuw/uvwuw 
b vwuvv/vwuuu + vwuvv/vwuvv vwvwu/uuuvv + vwvwu/uuvwu + vwuuu/uvwvv + vwuuu/vwvwu vwvwu/uuuuw + vwuuu/uvwuw 0 0 
c 0 uuvwu/wuuvv + uuvwu/wuvwu + uuuuu/wvwvv uuvwu/wuuuw + uuuuu/wvwuw uuuuw/wvwvv uuuuw/wvwuw 
d wvwvv/uuuuu + wvwvv/uuuvv + wuuvv/vwuuu + wuuvv/vwuvv 0 0 wvwuw/uuvwu + wvwuw/uvwvv + wuuuw/vwvwu wvwuw/uvwuw 
e 0 wuvwu/wuuvv + wuvwu/wuvwu wuvwu/wuuuw wuuuw/wvwvv wuuuw/wvwuw 
Printing vertex homoms
a 0 0
b 0 0
c 0 1
d 1 0
e 1 1
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
Printing IRQ
Printing Gamma Graph which has 3 vertices and 23 edges.
{0 1} ({0 1},uuuuu) + ({0 1},uuuuw) + ({0 1},uuuvv) + ({0 1},vwuuu) + ({0 1},vwuvv) ({0 1},uuvwu) + ({0 1},uvwvv) + ({0 1},vwvwu) ({0 1},uvwuw) 
{1 3} ({1 3},uuuuu) + ({1 3},uuuuw) + ({1 3},uuuvv) + ({1 3},vwuuu) + ({1 3},vwuvv) ({1 3},uuvwu) + ({1 3},uvwvv) + ({1 3},vwvwu) ({1 3},uvwuw) 
{2 4} ({2 4},wuuuw) + ({2 4},wuuvv) + ({2 4},wuvwu) ({2 4},wvwvv) ({2 4},wvwuw) 
Printing Representation Matrix
{0 1} /uuuuu + /uuuuw + /uuuvv + /vwuuu + /vwuvv /uuvwu + /uvwvv + /vwvwu /uvwuw 
{1 3} /uuuuu + /uuuuw + /uuuvv + /vwuuu + /vwuvv /uuvwu + /uvwvv + /vwvwu /uvwuw 
{2 4} /wuuuw + /wuuvv + /wuvwu /wvwvv /wvwuw 
Printing vertex homoms
{0 1} 0 0
{1 3} 0 0
{2 4} 0 1
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
We have inserted Y into types.
We have pushed uuuuu onto the current string collection
We have pushed uuuuw onto the current string collection
We have pushed uuuvv onto the current string collection
We have pushed uuvwu onto the current string collection
We have pushed uvwuw onto the current string collection
We have pushed uvwvv onto the current string collection
We have pushed vwuuu onto the current string collection
We have pushed vwuvv onto the current string collection
We have pushed vwvwu onto the current string collection
We have inserted Z into types.
We have pushed wuuuw onto the current string collection
We have pushed wuuvv onto the current string collection
We have pushed wuvwu onto the current string collection
We have pushed wvwuw onto the current string collection
We have pushed wvwvv onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,vwvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,vwuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uuvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILQ
Printing Gamma Graph which has 2 vertices and 14 edges.
{0 1 3} ({0 1 3},uuuuu) + ({0 1 3},uuuvv) + ({0 1 3},uuvwu) + ({0 1 3},uvwvv) + ({0 1 3},vwuuu) + ({0 1 3},vwuvv) + ({0 1 3},vwvwu) ({2 4},uuuuw) + ({2 4},uvwuw) 
{2 4} ({0 1 3},wuuvv) + ({0 1 3},wuvwu) + ({0 1 3},wvwvv) ({2 4},wuuuw) + ({2 4},wvwuw) 
Printing Representation Matrix
{0 1 3} /uuuuu + /uuuvv + /uuvwu + /uvwvv + /vwuuu + /vwuvv + /vwvwu /uuuuw + /uvwuw 
{2 4} /wuuvv + /wuvwu + /wvwvv /wuuuw + /wvwuw 
Printing vertex homoms
{0 1 3} 0 0
{2 4} 0 1
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
We have inserted Y into types.
We have pushed uuuuu onto the current string collection
We have pushed uuuvv onto the current string collection
We have pushed uuvwu onto the current string collection
We have pushed uvwvv onto the current string collection
We have pushed vwuuu onto the current string collection
We have pushed vwuvv onto the current string collection
We have pushed vwvwu onto the current string collection
We have pushed wuuvv onto the current string collection
We have pushed wuvwu onto the current string collection
We have pushed wvwvv onto the current string collection
We have inserted Z into types.
We have pushed uuuuw onto the current string collection
We have pushed uvwuw onto the current string collection
We have pushed wuuuw onto the current string collection
We have pushed wvwuw onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 1
We are definite
Printing IRP
Printing Gamma Graph which has 3 vertices and 16 edges.
{0} ({0},uuuuu) + ({0},uuuuw) + ({0},uuuvv) + ({0},uvwvv) 0 ({0},uvwuw) 
{1 2} ({1 2},vwuvv) ({1 2},uuuuu) + ({1 2},uuvwu) + ({1 2},vwuuu) + ({1 2},vwvwu) ({1 2},uuuuw) 
{3 4} ({3 4},wuuvv) + ({3 4},wvwvv) ({3 4},wuvwu) ({3 4},wuuuw) + ({3 4},wvwuw) 
Printing Representation Matrix
{0} uuuuu/ + uuuuw/ + uuuvv/ + uvwvv/ 0 uvwuw/ 
{1 2} vwuvv/ uuuuu/ + uuvwu/ + vwuuu/ + vwvwu/ uuuuw/ 
{3 4} wuuvv/ + wvwvv/ wuvwu/ wuuuw/ + wvwuw/ 
Printing vertex homoms
{0} 0 0
{1 2} 0 0
{3 4} 1 0
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
We have inserted Y into types.
We have pushed uuuuu onto the current string collection
We have pushed uuuuw onto the current string collection
We have pushed uuuvv onto the current string collection
We have pushed uuvwu onto the current string collection
We have pushed uvwuw onto the current string collection
We have pushed uvwvv onto the current string collection
We have pushed vwuuu onto the current string collection
We have pushed vwuvv onto the current string collection
We have pushed vwvwu onto the current string collection
We have inserted Z into types.
We have pushed wuuuw onto the current string collection
We have pushed wuuvv onto the current string collection
We have pushed wuvwu onto the current string collection
We have pushed wvwuw onto the current string collection
We have pushed wvwvv onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,vwvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,vwuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uuvwu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuvv
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuw
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 2 by 2
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 0,uuuuu
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 2 by 2
We have created an edge between 0 and 0
Found a match for our vvcit: 1
Got pair 0,vwvwu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 0 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuvv
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 0 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuuu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 0 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwvv
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwuw
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uuvwu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 0 and newType is 1
typeMatrix is 2 by 2
Got pair 0,uuuvv
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuw
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuu
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 2 vertices and 2 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 0 which is connected to 0 and is colored 1
Printing ILP
Printing Gamma Graph which has 3 vertices and 19 edges.
{0 2} ({0 2},uuuuu) + ({0 2},uuuvv) + ({0 2},uuvwu) + ({0 2},uvwvv) + ({0 2},wuuvv) + ({0 2},wuvwu) + ({0 2},wvwvv) ({1},uuuuu) + ({1},uuvwu) + ({1},wuvwu) ({3 4},uuuuw) + ({3 4},uvwuw) + ({3 4},wvwuw) 
{1} ({0 2},vwuuu) + ({0 2},vwuvv) + ({0 2},vwvwu) ({1},vwuuu) + ({1},vwvwu) 0 
{3 4} 0 0 ({3 4},wuuuw) 
Printing Representation Matrix
{0 2} uuuuu/ + uuuvv/ + uuvwu/ + uvwvv/ + wuuvv/ + wuvwu/ + wvwvv/ uuuuu/ + uuvwu/ + wuvwu/ uuuuw/ + uvwuw/ + wvwuw/ 
{1} vwuuu/ + vwuvv/ + vwvwu/ vwuuu/ + vwvwu/ 0 
{3 4} 0 0 wuuuw/ 
Printing vertex homoms
{0 2} 0 0
{1} 0 0
{3 4} 1 0
Printing G Graph which has 2 vertices and 14 edges.
Y uuuuu + uuuvv + uuvwu + uvwvv + vwuuu + vwuvv + vwvwu uuuuw + uvwuw 
Z wuuvv + wuvwu + wvwvv wuuuw + wvwuw 
We have inserted Y into types.
We have pushed uuuuu onto the current string collection
We have pushed uuuvv onto the current string collection
We have pushed uuvwu onto the current string collection
We have pushed uvwvv onto the current string collection
We have pushed vwuuu onto the current string collection
We have pushed vwuvv onto the current string collection
We have pushed vwvwu onto the current string collection
We have pushed wuuvv onto the current string collection
We have pushed wuvwu onto the current string collection
We have pushed wvwvv onto the current string collection
We have inserted Z into types.
We have pushed uuuuw onto the current string collection
We have pushed uvwuw onto the current string collection
We have pushed wuuuw onto the current string collection
We have pushed wvwuw onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,wvwvv
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,wuvwu
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,wuuvv
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwvwu
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuvv
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,vwuuu
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uvwvv
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuvwu
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuvv
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
Got pair 0,uuuuu
Looking at element 0 of our current vertex collection
Current phom is uuuuu
Current phom is uuuvv
Current phom is uuvwu
Current phom is uvwvv
Current phom is vwuuu
Current phom is vwuvv
Current phom is vwvwu
Current phom is wuuvv
Current phom is wuvwu
Current phom is wvwvv
Looking at element 1 of our current vertex collection
Current phom is uuuuu
Current phom is uuvwu
Current phom is vwuuu
Current phom is vwvwu
Current phom is wuvwu
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
We are definite
TfiveNone* is NOT 1-1 (this is good)
STARTING TESTING FOR NEW ISOM LANGUAGES
Printing Gamma Graph which has 4 vertices and 11 edges.
uu 0 0113 0210 0509 
uw 0 0116 0215 0514 
vv 0311 0 0412 0 
wu 0 0613 0710 0809 
Printing Representation Matrix
uu 0 a/c a/b c/b 
uw 0 a/e a/d c/d 
vv b/a 0 b/a 0 
wu 0 d/c d/b e/b 
Printing vertex homoms
uu 0 0
uw 0 1
vv 0 0
wu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Our final Seen consists of:
Printing IRP T1
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 2} ({0 2},b) ({0 2},a) ({0 2},c) 
{1 2} ({1 2},b) ({1 2},a) ({1 2},c) 
{3} 0 ({3},d) ({3},e) 
Printing Representation Matrix
{0 2} b/ a/ c/ 
{1 2} b/ a/ c/ 
{3} 0 d/ e/ 
Printing vertex homoms
{0 2} 0 0
{1 2} 0 0
{3} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
PRINTING MINIMIZED IRPTONE
p is right resolving!
State equivalences for 0 are : 0, 1, 
1 is unneccesary, skipping
State equiv contains: 0, 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Printing Gamma Graph which has 2 vertices and 5 edges.
{0 2} {0 2}a/ + {0 2}b/ {0 2}c/ 
{3} {1 2}d/ {1 2}e/ 
Printing Representation Matrix
{0 2} a/ + b/ c/ 
{3} d/ e/ 
Printing vertex homoms
{0 2} 0 0
{3} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
ORIGINAL TESTER IS
Printing Gamma Graph which has 4 vertices and 6 edges.
A 0 1 2 0 
B 0 0 0 3 
C 4 0 0 0 
D 5 0 6 0 
Printing Representation Matrix
A 0 b/a a/a 0 
B 0 0 0 c/a 
C d/a 0 0 0 
D a/a 0 b/a 0 
Printing vertex homoms
A 0 0
B 0 0
C 0 0
D 0 0
Printing G Graph which has 2 vertices and 0 edges.
E 0 0 
F 0 0 
MINIMIZED TESTER IS
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Printing Gamma Graph which has 4 vertices and 6 edges.
A 0 Ab/a Aa/a 0 
B 0 0 0 Bc/a 
C Cd/a 0 0 0 
D Da/a 0 Db/a 0 
Printing Representation Matrix
A 0 b/a a/a 0 
B 0 0 0 c/a 
C d/a 0 0 0 
D a/a 0 b/a 0 
Printing vertex homoms
A 0 0
B 0 0
C 0 0
D 0 0
Printing G Graph which has 2 vertices and 0 edges.
E 0 0 
F 0 0 
TESTING NEWISOM
Our final Seen consists of:
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 
State equiv contains: 0, 
State equiv contains: 1, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Printing Gamma Graph which has 5 vertices and 10 edges.
{0} 0 {0}uu/ {0}uw/ 0 0 
{1 2} {1 2}uu/ + {1 2}uw/ + {1 2}vv/ 0 0 0 0 
{3 4} 0 {3 4}wu/ 0 0 0 
{0 1 3} 0 0 0 {0 1 3}uu/ + {0 1 3}vv/ {0 1 3}uw/ 
{2 4} 0 0 0 {2 4}wu/ 0 
Printing Representation Matrix
{0} 0 uu/ uw/ 0 0 
{1 2} uu/ + uw/ + vv/ 0 0 0 0 
{3 4} 0 wu/ 0 0 0 
{0 1 3} 0 0 0 uu/ + vv/ uw/ 
{2 4} 0 0 0 wu/ 0 
Printing vertex homoms
{0} 0 0
{1 2} 0 0
{3 4} 0 0
{0 1 3} 0 0
{2 4} 0 0
Printing G Graph which has 2 vertices and 4 edges.
Y uu + vv uw 
Z wu 0 
Checking if 0 and 3 are equivalent. We are at 0 of 2
Checking if 0 and 4 are equivalent. We are at 1 of 2
ToneD not Isom! Phew.
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 1, 
1 is unneccesary, skipping
State equiv contains: 0, 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 2, 
State equivalences for 1 are : 1, 
State equiv contains: 0, 2, 
State equiv contains: 1, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Looking at currE[1], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Printing Gamma Graph which has 4 vertices and 10 edges.
{0 2} {0 2}a/ + {0 2}b/ {0 2}c/ 0 0 
{3} {1 2}d/ {1 2}e/ 0 0 
{0 2} 0 0 {0 2}a/ + {0 2}b/ {0 2}c/ 
{1} 0 0 {1}d/ {1}e/ 
Printing Representation Matrix
{0 2} a/ + b/ c/ 0 0 
{3} d/ e/ 0 0 
{0 2} 0 0 a/ + b/ c/ 
{1} 0 0 d/ e/ 
Printing vertex homoms
{0 2} 0 0
{3} 0 0
{0 2} 0 0
{1} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Checking if 0 and 2 are equivalent. We are at 0 of 2
We have found that 2 and 0 are indistinguishable
Tone Isom! This is good.
Our final Seen consists of:
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 5, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 3, 
3 is unneccesary, skipping
State equivalences for 4 are : 4, 12, 
5 is unneccesary, skipping
State equivalences for 6 are : 6, 8, 
State equivalences for 7 are : 7, 9, 
8 is unneccesary, skipping
9 is unneccesary, skipping
State equivalences for 10 are : 10, 
State equivalences for 11 are : 11, 
State equiv contains: 0, 5, 
State equiv contains: 1, 
State equiv contains: 2, 3, 
State equiv contains: 4, 12, 
State equiv contains: 6, 8, 
State equiv contains: 7, 9, 
State equiv contains: 10, 
State equiv contains: 11, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 8
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 5th equiv class
Looking at currE[1], which is 5
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 10
We found it! It's in the 6th equiv class
We are trying to find the repn for 11
We found it! It's in the 7th equiv class
We are trying to find the repn for 12
We found it! It's in the 3th equiv class
Looking at currE[1], which is 3
We are trying to find the repn for 10
We found it! It's in the 6th equiv class
We are trying to find the repn for 11
We found it! It's in the 7th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
Starting the 3th round
Looking at currE[0], which is 4
We are trying to find the repn for 8
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 5th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
Starting the 4th round
Looking at currE[0], which is 6
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
Looking at currE[1], which is 8
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
Starting the 5th round
Looking at currE[0], which is 7
We are trying to find the repn for 3
We found it! It's in the 2th equiv class
Looking at currE[1], which is 9
We are trying to find the repn for 3
We found it! It's in the 2th equiv class
Starting the 6th round
Looking at currE[0], which is 10
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 7th round
Looking at currE[0], which is 11
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 5, 
State equivalences for 1 are : 1, 4, 
State equivalences for 2 are : 2, 11, 
State equivalences for 3 are : 3, 
4 is unneccesary, skipping
5 is unneccesary, skipping
State equivalences for 6 are : 6, 12, 
State equivalences for 7 are : 7, 
State equivalences for 8 are : 8, 
State equivalences for 9 are : 9, 10, 
10 is unneccesary, skipping
11 is unneccesary, skipping
State equiv contains: 0, 5, 
State equiv contains: 1, 4, 
State equiv contains: 2, 11, 
State equiv contains: 3, 
State equiv contains: 6, 12, 
State equiv contains: 7, 
State equiv contains: 8, 
State equiv contains: 9, 10, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Looking at currE[1], which is 5
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 12
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Looking at currE[1], which is 4
We are trying to find the repn for 12
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Looking at currE[1], which is 11
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 11
We found it! It's in the 2th equiv class
Starting the 4th round
Looking at currE[0], which is 6
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Starting the 5th round
Looking at currE[0], which is 7
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 6th round
Looking at currE[0], which is 8
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 10
We found it! It's in the 7th equiv class
Starting the 7th round
Looking at currE[0], which is 9
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Looking at currE[1], which is 10
We are trying to find the repn for 11
We found it! It's in the 2th equiv class
Printing Gamma Graph which has 16 vertices and 26 edges.
{0 1} 0 0 0 0 {0 1}434/ {0 1}432/ 0 0 0 0 0 0 0 0 0 0 
{2} 0 0 {2}421/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 {3 4}213/ 0 0 {3 4}214/ {3 4}212/ 0 0 0 0 0 0 0 0 
{6 7} 0 0 0 0 {5 15}134/ {5 15}132/ 0 0 0 0 0 0 0 0 0 0 
{9 11} {6 7}343/ {6 7}342/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10 12} 0 0 {8}321/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16} {9 11}143/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 {10 12}121/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {0}143/ 0 
{1 4} 0 0 0 0 0 0 0 0 0 0 0 0 {1 4}134/ 0 0 {1 4}132/ 
{2 5} 0 0 0 0 0 0 0 0 {2 5}214/ {2 5}213/ 0 {2 5}212/ 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 {3}121/ 0 0 0 0 0 
{8} 0 0 0 0 0 0 0 0 0 0 0 0 0 {4 7}342/ {4 7}343/ 0 
{9 10} 0 0 0 0 0 0 0 0 0 0 {6}421/ 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 0 0 0 0 0 0 {8}434/ 0 0 {8}432/ 
{13 14} 0 0 0 0 0 0 0 0 0 0 {9 10}321/ 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 0 434/ 432/ 0 0 0 0 0 0 0 0 0 0 
{2} 0 0 421/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 213/ 0 0 214/ 212/ 0 0 0 0 0 0 0 0 
{6 7} 0 0 0 0 134/ 132/ 0 0 0 0 0 0 0 0 0 0 
{9 11} 343/ 342/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10 12} 0 0 321/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16} 143/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 121/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 143/ 0 
{1 4} 0 0 0 0 0 0 0 0 0 0 0 0 134/ 0 0 132/ 
{2 5} 0 0 0 0 0 0 0 0 214/ 213/ 0 212/ 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 121/ 0 0 0 0 0 
{8} 0 0 0 0 0 0 0 0 0 0 0 0 0 342/ 343/ 0 
{9 10} 0 0 0 0 0 0 0 0 0 0 421/ 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 0 0 0 0 0 0 434/ 0 0 432/ 
{13 14} 0 0 0 0 0 0 0 0 0 0 321/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 0 0
{2} 0 0
{3 4} 0 0
{6 7} 0 0
{9 11} 0 0
{10 12} 0 0
{16} 0 0
{17} 0 0
{0} 0 0
{1 4} 0 0
{2 5} 0 0
{3} 0 0
{8} 0 0
{9 10} 0 0
{11 12} 0 0
{13 14} 0 0
Printing G Graph which has 8 vertices and 14 edges.
42 0 0 421 0 0 0 0 0 
43 0 0 0 434 432 0 0 0 
21 0 0 0 0 0 214 212 213 
34 342 343 0 0 0 0 0 0 
32 0 0 321 0 0 0 0 0 
14 142 143 0 0 0 0 0 0 
12 0 0 121 0 0 0 0 0 
13 0 0 0 134 132 0 0 0 
Checking if 0 and 8 are equivalent. We are at 0 of 8
Checking if 0 and 9 are equivalent. We are at 1 of 8
Checking if 0 and 10 are equivalent. We are at 2 of 8
Checking if 0 and 11 are equivalent. We are at 3 of 8
Checking if 0 and 12 are equivalent. We are at 4 of 8
Checking if 0 and 13 are equivalent. We are at 5 of 8
Checking if 0 and 14 are equivalent. We are at 6 of 8
We have found that 14 and 0 are indistinguishable
TtwoD Isom! This is good.
Printing Gamma Graph which has 12 vertices and 21 edges.
02100311 0 0 0 0 05140710n/l 01160809n/k 0 0 0 0 0 0 
01130514 0 0 0 0 0 0 0 0 02100311m/g 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 03110116g/j 0 
01160809 0 0 0 0 0 0 0 0 0 0 0 03110210g/g 
03110210 05090311l/n 0 01130514j/n 0 0 0 0 0 0 0 0 0 
03110113 0 05090412k/m 0 05140613j/m 0 0 0 0 0 0 0 0 
04120113 0 05090412k/j 0 05140613j/j 0 0 0 0 0 0 0 0 
05090311 0 0 0 0 05140710n/i 0 08090311n/h 0 0 0 0 0 
05140710 0 0 0 0 0 0 0 0 0 03110113g/h 03110116g/f 0 
07100311 0 0 0 0 05140710h/l 01160809h/k 0 0 0 0 0 0 
06130509 0 0 0 0 0 0 0 08090412i/g 02100311f/g 0 0 0 
08090311 0 0 0 0 05140710h/i 0 08090311h/h 0 0 0 0 0 
Printing Representation Matrix
02100311 0 0 0 0 n/l n/k 0 0 0 0 0 0 
01130514 0 0 0 0 0 0 0 0 m/g 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 g/j 0 
01160809 0 0 0 0 0 0 0 0 0 0 0 g/g 
03110210 l/n 0 j/n 0 0 0 0 0 0 0 0 0 
03110113 0 k/m 0 j/m 0 0 0 0 0 0 0 0 
04120113 0 k/j 0 j/j 0 0 0 0 0 0 0 0 
05090311 0 0 0 0 n/i 0 n/h 0 0 0 0 0 
05140710 0 0 0 0 0 0 0 0 0 g/h g/f 0 
07100311 0 0 0 0 h/l h/k 0 0 0 0 0 0 
06130509 0 0 0 0 0 0 0 i/g f/g 0 0 0 
08090311 0 0 0 0 h/i 0 h/h 0 0 0 0 0 
Printing vertex homoms
02100311 4 2
01130514 3 1
02150613 1 2
01160809 1 1
03110210 2 4
03110113 2 3
04120113 2 2
05090311 4 0
05140710 1 0
07100311 0 2
06130509 0 1
08090311 0 0
Printing G Graph which has 5 vertices and 9 edges.
 0 f h 0 i 
 g 0 0 0 0 
 0 j 0 k l 
 0 m 0 0 0 
 0 0 n 0 0 
GammaT vnames really are: f h i g j k l m n 
Printing Gamma Graph which has 9 vertices and 21 edges.
f 0 0 0 02100311f/g 0 0 0 0 0 
h 0 08090311h/h 05140710h/i 0 0 01160809h/k 05140710h/l 0 0 
i 0 0 0 08090412i/g 0 0 0 0 0 
g 03110116g/f 03110113g/h 0 03110210g/g 03110116g/j 0 0 0 0 
j 0 0 0 0 05140613j/j 0 0 05140613j/m 01130514j/n 
k 0 0 0 0 05090412k/j 0 0 05090412k/m 0 
l 0 0 0 0 0 0 0 0 05090311l/n 
m 0 0 0 02100311m/g 0 0 0 0 0 
n 0 08090311n/h 05140710n/i 0 0 01160809n/k 05140710n/l 0 0 
Printing Representation Matrix
f 0 0 0 Q/M 0 0 0 0 0 
h 0 S/I S/E 0 0 P/F P/E 0 0 
i 0 0 0 Q/K 0 0 0 0 0 
g M/Q M/P 0 D/S C/Q 0 0 0 0 
j 0 0 0 0 I/D 0 0 F/D E/C 
k 0 0 0 0 I/B 0 0 F/B 0 
l 0 0 0 0 0 0 0 0 E/A 
m 0 0 0 B/M 0 0 0 0 0 
n 0 K/I K/E 0 0 A/F A/E 0 0 
Printing vertex homoms
f 0 1
h 0 2
i 0 4
g 1 0
j 2 1
k 2 3
l 2 4
m 3 1
n 4 2
Printing G Graph which has 5 vertices and 12 edges.
 S Q P 0 0 
 M D C 0 0 
 0 0 I F E 
 0 B 0 0 0 
 K 0 A 0 0 
Printing Gamma Graph which has 6 vertices and 16 edges.
uuu 0 0 0 020509 050113 050210 
uuw 0 0 0 020514 050116 050215 
uvv 010311 0 010412 0 0 0 
vwu 0 030613 030710 040809 0 0 
wuw 0 0 0 070514 080116 080215 
wvv 060311 0 060412 0 0 0 
Printing Representation Matrix
uuu 0 0 0 a/b c/c c/b 
uuw 0 0 0 a/d c/e c/d 
uvv a/a 0 a/a 0 0 0 
vwu 0 b/c b/b b/b 0 0 
wuw 0 0 0 d/d e/e e/d 
wvv d/a 0 d/a 0 0 0 
Printing vertex homoms
uuu 0 0
uuw 0 1
uvv 0 0
vwu 0 0
wuw 1 1
wvv 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (0, 1) named 010311010311010412
Starting round 2
Removed Edge (1, 4) named 010311010412010311
Starting round 3
Removed Edge (1, 5) named 010311010412010412
Starting round 4
Removed Edge (1, 6) named 010311010412020509
Starting round 5
Removed Edge (1, 7) named 010311010412020514
Starting round 6
Starting round 7
Removed Edge (1, 8) named 010311020509030710
Starting round 8
Removed Edge (2, 11) named 010311020514060412
Starting round 9
Removed Edge (3, 0) named 010412010311010311
Starting round 10
Removed Edge (4, 5) named 010412010412020509
Starting round 11
Removed Edge (4, 6) named 010412010412020514
Starting round 12
Removed Edge (5, 7) named 010412020509030613
Starting round 13
Removed Edge (5, 8) named 010412020509030710
Starting round 14
Removed Edge (5, 9) named 010412020509040809
Starting round 15
Starting round 16
Removed Edge (5, 9) named 010412020514060311
Starting round 17
Removed Edge (5, 10) named 010412020514060412
Starting round 18
Removed Edge (5, 11) named 010412020514070514
Starting round 19
Starting round 20
Removed Edge (6, 15) named 020509030710030613
Starting round 21
Removed Edge (6, 16) named 020509030710030710
Starting round 22
Removed Edge (6, 17) named 020509030710040809
Starting round 23
Starting round 24
Removed Edge (6, 18) named 020509040809030710
Starting round 25
Removed Edge (7, 21) named 020514060311010412
Starting round 26
Removed Edge (8, 24) named 020514060412010311
Starting round 27
Removed Edge (8, 25) named 020514060412010412
Starting round 28
Removed Edge (8, 26) named 020514060412020509
Starting round 29
Removed Edge (8, 27) named 020514060412020514
Starting round 30
Starting round 31
Removed Edge (8, 28) named 020514070514060412
Starting round 32
Removed Edge (9, 31) named 030613050113050116
Starting round 33
Removed Edge (9, 33) named 030613050113050215
Starting round 34
Removed Edge (11, 38) named 030613050210040809
Starting round 35
Removed Edge (12, 41) named 030613050215070514
Starting round 36
Removed Edge (14, 15) named 030710030710040809
Starting round 37
Removed Edge (15, 16) named 030710040809030613
Starting round 38
Removed Edge (15, 17) named 030710040809030710
Starting round 39
Removed Edge (15, 18) named 030710040809040809
Starting round 40
Starting round 41
Removed Edge (16, 13) named 040809030710030613
Starting round 42
Removed Edge (16, 14) named 040809030710030710
Starting round 43
Starting round 44
Removed Edge (28, 29) named 050113050113050116
Starting round 45
Starting round 46
Removed Edge (28, 30) named 050113050113050215
Starting round 47
Starting round 48
Starting round 49
Removed Edge (29, 34) named 050113050210040809
Starting round 50
Starting round 51
Removed Edge (31, 40) named 050116080215070514
Starting round 52
Removed Edge (34, 17) named 050215060311010311
Starting round 53
Removed Edge (34, 18) named 050215060311010412
Starting round 54
Removed Edge (35, 23) named 050215060412020509
Starting round 55
Removed Edge (35, 24) named 050215060412020514
Starting round 56
Removed Edge (18, 3) named 060311010412010311
Starting round 57
Removed Edge (18, 4) named 060311010412010412
Starting round 58
Starting round 59
Removed Edge (20, 0) named 060412010311010311
Starting round 60
Removed Edge (22, 5) named 060412020509030613
Starting round 61
Removed Edge (22, 6) named 060412020509040809
Starting round 62
Starting round 63
Removed Edge (22, 7) named 060412020514060311
Starting round 64
Removed Edge (22, 8) named 060412020514070514
Starting round 65
Starting round 66
Removed Edge (23, 20) named 070514060412010311
Starting round 67
Removed Edge (23, 21) named 070514060412010412
Starting round 68
Starting round 69
Removed Edge (33, 36) named 080116080215070514
Starting round 70
Starting round 71
Removed Edge (34, 17) named 080215060311010311
Starting round 72
We have deleted 19 from G
We have deleted 12 from G
We have deleted 9 from G
We have deleted 2 from G
We have deleted 1 from G
Printing Gamma Graph which has 36 vertices and 84 edges.
010311010311 010311010311010311 010311010311020509 010311010311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010311020509 0 0 0 0 0 010311020509030613 010311020509040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010311020514 0 0 0 0 0 0 0 010311020514060311 010311020514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010412010311 0 010412010311020509 010412010311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010412010412 0 0 0 010412010412010311 010412010412010412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020509030613 0 0 0 0 0 0 0 0 0 020509030613050113 020509030613050116 020509030613050210 020509030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020509040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 020509040809030613 020509040809040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020514060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 020514060311010311 020514060311020509 020514060311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 020514070514060311 020514070514070514 0 0 0 0 0 0 0 0 0 0 0 0 
030613050113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 030613050113050113 030613050113050210 0 0 0 0 0 0 0 0 0 0 
030613050116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 030613050116080116 030613050116080215 0 0 0 0 0 0 0 0 
030613050210 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 030613050210030613 030613050210030710 0 0 0 0 0 0 
030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 030613050215060311 030613050215060412 0 0 0 0 
030710030613 0 0 0 0 0 0 0 0 0 030710030613050113 030710030613050116 030710030613050210 030710030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
030710030710 0 0 0 0 0 0 0 0 0 0 0 0 0 030710030710030613 030710030710030710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
040809030613 0 0 0 0 0 0 0 0 0 040809030613050113 040809030613050116 040809030613050210 040809030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
040809040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 040809040809030613 040809040809040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311010311 060311010311010311 060311010311020509 060311010311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311020509 0 0 0 0 0 060311020509030613 060311020509040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311020514 0 0 0 0 0 0 0 060311020514060311 060311020514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060412010311 0 060412010311020509 060412010311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060412010412 0 0 0 060412010412010311 060412010412010412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
070514060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 070514060311010311 070514060311020509 070514060311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
070514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 070514070514060311 070514070514070514 0 0 0 0 0 0 0 0 0 0 0 0 
050113050113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050113050113050113 050113050113050210 0 0 0 0 0 0 0 0 0 0 
050113050210 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050113050210030613 050113050210030710 0 0 0 0 0 0 
050116080116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050116080116080116 050116080116080215 0 0 
050116080215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050116080215060311 050116080215060412 
050210030613 0 0 0 0 0 0 0 0 0 050210030613050113 050210030613050116 050210030613050210 050210030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050210030710 0 0 0 0 0 0 0 0 0 0 0 0 0 050210030710030613 050210030710030710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050215060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050215060311020509 050215060311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050215060412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 050215060412010311 050215060412010412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
080116080116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 080116080116080116 080116080116080215 0 0 
080116080215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 080116080215060311 080116080215060412 
080215060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 080215060311020509 080215060311020514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
080215060412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 080215060412010311 080215060412010412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing Representation Matrix
010311010311 uvvuvvuvv/uuuuuuuuu uvvuvvuuu/uuuuuuvwu uvvuvvuuw/uuuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010311020509 0 0 0 0 0 uvvuuuvwu/uuuvwuuuw uvvuuuvwu/uuuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010311020514 0 0 0 0 0 0 0 uvvuuwwvv/uuuvwuuuu uvvuuwwuw/uuuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010412010311 0 uvvuvvuuu/uvvuuuvwu uvvuvvuuw/uvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
010412010412 0 0 0 uvvuvvuvv/uvvuvvuuu uvvuvvuvv/uvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020509030613 0 0 0 0 0 0 0 0 0 uuuvwuuuu/vwuuuwwuw uuuvwuuuw/vwuuuwwuw uuuvwuuuu/vwuuuwwvv uuuvwuuuw/vwuuuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020509040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuvwuvwu/vwuvwuuuw uuuvwuvwu/vwuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020514060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwvvuvv/vwuuuuuuu uuwwvvuuu/vwuuuuvwu uuwwvvuuw/vwuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
020514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwuwwvv/vwuvwuuuu uuwwuwwuw/vwuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 
030613050113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuuuuuuu/uuwwuwwuw vwuuuuuuu/uuwwuwwvv 0 0 0 0 0 0 0 0 0 0 
030613050116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuuuwwuw/uuwwuwwuw vwuuuwwuw/uuwwuwwvv 0 0 0 0 0 0 0 0 
030613050210 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuuuuvwu/uuwwvvuuw vwuuuuvwu/uuwwvvuvv 0 0 0 0 0 0 
030613050215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuuuwwvv/uuwwvvuuu vwuuuwwvv/uuwwvvuvv 0 0 0 0 
030710030613 0 0 0 0 0 0 0 0 0 vwuvwuuuu/uvvuuwwuw vwuvwuuuw/uvvuuwwuw vwuvwuuuu/uvvuuwwvv vwuvwuuuw/uvvuuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
030710030710 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuvwuvwu/uvvuvvuuw vwuvwuvwu/uvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
040809030613 0 0 0 0 0 0 0 0 0 vwuvwuuuu/vwuuuwwuw vwuvwuuuw/vwuuuwwuw vwuvwuuuu/vwuuuwwvv vwuvwuuuw/vwuuuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
040809040809 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuvwuvwu/vwuvwuuuw vwuvwuvwu/vwuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311010311 wvvuvvuvv/uuuuuuuuu wvvuvvuuu/uuuuuuvwu wvvuvvuuw/uuuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311020509 0 0 0 0 0 wvvuuuvwu/uuuvwuuuw wvvuuuvwu/uuuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060311020514 0 0 0 0 0 0 0 wvvuuwwvv/uuuvwuuuu wvvuuwwuw/uuuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060412010311 0 wvvuvvuuu/uvvuuuvwu wvvuvvuuw/uvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
060412010412 0 0 0 wvvuvvuvv/uvvuvvuuu wvvuvvuvv/uvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
070514060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwvvuvv/vwuuuuuuu wuwwvvuuu/vwuuuuvwu wuwwvvuuw/vwuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
070514070514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwuwwvv/vwuvwuuuu wuwwuwwuw/vwuvwuvwu 0 0 0 0 0 0 0 0 0 0 0 0 
050113050113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuuuuuu/wuwwuwwuw uuuuuuuuu/wuwwuwwvv 0 0 0 0 0 0 0 0 0 0 
050113050210 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuuuvwu/wuwwvvuuw uuuuuuvwu/wuwwvvuvv 0 0 0 0 0 0 
050116080116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwuwwuw/wuwwuwwuw uuwwuwwuw/wuwwuwwvv 0 0 
050116080215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwuwwvv/wuwwvvuuu uuwwuwwvv/wuwwvvuvv 
050210030613 0 0 0 0 0 0 0 0 0 uuuvwuuuu/wvvuuwwuw uuuvwuuuw/wvvuuwwuw uuuvwuuuu/wvvuuwwvv uuuvwuuuw/wvvuuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050210030710 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuvwuvwu/wvvuvvuuw uuuvwuvwu/wvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050215060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwvvuuu/wvvuuuvwu uuwwvvuuw/wvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
050215060412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuwwvvuvv/wvvuvvuuu uuwwvvuvv/wvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
080116080116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwuwwuw/wuwwuwwuw wuwwuwwuw/wuwwuwwvv 0 0 
080116080215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwuwwvv/wuwwvvuuu wuwwuwwvv/wuwwvvuvv 
080215060311 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwvvuuu/wvvuuuvwu wuwwvvuuw/wvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
080215060412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuwwvvuvv/wvvuvvuuu wuwwvvuvv/wvvuvvuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing vertex homoms
010311010311 6 0
010311020509 4 1
010311020514 5 1
010412010311 6 4
010412010412 6 6
020509030613 1 8
020509040809 1 9
020514060311 3 7
020514070514 2 9
030613050113 7 2
030613050116 8 2
030613050210 7 3
030613050215 8 3
030710030613 9 5
030710030710 9 6
040809030613 9 8
040809040809 9 9
060311010311 14 0
060311020509 12 1
060311020514 13 1
060412010311 14 4
060412010412 14 6
070514060311 11 7
070514070514 10 9
050113050113 0 10
050113050210 0 11
050116080116 2 10
050116080215 2 11
050210030613 1 13
050210030710 1 14
050215060311 3 12
050215060412 3 14
080116080116 10 10
080116080215 10 11
080215060311 11 12
080215060412 11 14
Printing G Graph which has 15 vertices and 36 edges.
uuuuuu uuuuuuuuu uuuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuuvwu 0 0 0 0 0 0 0 uuuvwuuuu uuuvwuuuw uuuvwuvwu 0 0 0 0 0 
uuwwuw 0 0 0 0 0 0 0 0 0 0 uuwwuwwuw uuwwuwwvv 0 0 0 
uuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 uuwwvvuuu uuwwvvuuw uuwwvvuvv 
uvvuuu uvvuuuuuu uvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvvuuw 0 0 uvvuuwwuw uvvuuwwvv 0 0 0 0 0 0 0 0 0 0 0 
uvvuvv 0 0 0 0 uvvuvvuuu uvvuvvuuw uvvuvvuvv 0 0 0 0 0 0 0 0 
vwuuuu vwuuuuuuu vwuuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
vwuuuw 0 0 vwuuuwwuw vwuuuwwvv 0 0 0 0 0 0 0 0 0 0 0 
vwuvwu 0 0 0 0 0 0 0 vwuvwuuuu vwuvwuuuw vwuvwuvwu 0 0 0 0 0 
wuwwuw 0 0 0 0 0 0 0 0 0 0 wuwwuwwuw wuwwuwwvv 0 0 0 
wuwwvv 0 0 0 0 0 0 0 0 0 0 0 0 wuwwvvuuu wuwwvvuuw wuwwvvuvv 
wvvuuu wvvuuuuuu wvvuuuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvvuuw 0 0 wvvuuwwuw wvvuuwwvv 0 0 0 0 0 0 0 0 0 0 0 
wvvuvv 0 0 0 0 wvvuvvuuu wvvuvvuuw wvvuvvuvv 0 0 0 0 0 0 0 0 
Printing Gamma Graph which has 3 vertices and 8 edges.
u 01 02 05 
v 03 04 0 
w 06 07 08 
Printing Representation Matrix
u a/b a/c c/a 
v b/d b/e 0 
w d/b d/c e/a 
Printing vertex homoms
u 0 0
v 0 1
w 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 3 named 0103 where p and q are uv and uu respectively.
We have created an edge from 0 to 4 named 0104 where p and q are uv and uv respectively.
We have created an edge from 0 to 0 named 0205 where p and q are uu and vw respectively.
We have created an edge from 1 to 1 named 0306 where p and q are vw and uu respectively.
We have created an edge from 1 to 2 named 0307 where p and q are vw and uv respectively.
We have created an edge from 1 to 0 named 0408 where p and q are vw and vw respectively.
We have created an edge from 2 to 1 named 0501 where p and q are uu and wu respectively.
We have created an edge from 2 to 2 named 0502 where p and q are uu and wv respectively.
We have created an edge from 3 to 3 named 0603 where p and q are wv and uu respectively.
We have created an edge from 3 to 4 named 0604 where p and q are wv and uv respectively.
We have created an edge from 3 to 0 named 0705 where p and q are wu and vw respectively.
We have created an edge from 4 to 1 named 0801 where p and q are wu and wu respectively.
We have created an edge from 4 to 2 named 0802 where p and q are wu and wv respectively.
GammaT vnames really are: uu uv vw wu wv 
GammaT vnames really are: a b c d e 
GammaT vnames really are: a b c d e 
We're in the for loop
We can make a product! Yay!
We're in the for loop
We can make a product! Yay!
We have created an edge from 0 to 3 named 110603 where p and q are vwv and uuu respectively.
We have created an edge from 0 to 4 named 110604 where p and q are vwv and uuv respectively.
We have created an edge from 0 to 0 named 110705 where p and q are vwu and uvw respectively.
We have created an edge from 0 to 1 named 120801 where p and q are vwu and vwu respectively.
We have created an edge from 0 to 2 named 120802 where p and q are vwu and vwv respectively.
We have created an edge from 1 to 3 named 090103 where p and q are uuv and uuu respectively.
We have created an edge from 1 to 4 named 090104 where p and q are uuv and uuv respectively.
We have created an edge from 1 to 0 named 090205 where p and q are uuu and uvw respectively.
We have created an edge from 1 to 1 named 100501 where p and q are uuu and vwu respectively.
We have created an edge from 1 to 2 named 100502 where p and q are uuu and vwv respectively.
We have created an edge from 2 to 1 named 130306 where p and q are uvw and wuu respectively.
We have created an edge from 2 to 2 named 130307 where p and q are uvw and wuv respectively.
We have created an edge from 2 to 0 named 130408 where p and q are uvw and wvw respectively.
We have created an edge from 3 to 3 named 140103 where p and q are wuv and uuu respectively.
We have created an edge from 3 to 4 named 140104 where p and q are wuv and uuv respectively.
We have created an edge from 3 to 0 named 140205 where p and q are wuu and uvw respectively.
We have created an edge from 3 to 1 named 150501 where p and q are wuu and vwu respectively.
We have created an edge from 3 to 2 named 150502 where p and q are wuu and vwv respectively.
We have created an edge from 4 to 1 named 160306 where p and q are wvw and wuu respectively.
We have created an edge from 4 to 2 named 160307 where p and q are wvw and wuv respectively.
We have created an edge from 4 to 0 named 160408 where p and q are wvw and wvw respectively.
GammaT vnames really are: uuu uuv uvw vwu vwv wuu wuv wvw 
Printing Gamma Graph which has 8 vertices and 21 edges.
uuu 0 0 090205 100501 100502 0 0 0 
uuv 090103 090104 0 0 0 0 0 0 
uvw 0 0 0 0 0 130306 130307 130408 
vwu 0 0 110705 120801 120802 0 0 0 
vwv 110603 110604 0 0 0 0 0 0 
wuu 0 0 140205 150501 150502 0 0 0 
wuv 140103 140104 0 0 0 0 0 0 
wvw 0 0 0 0 0 160306 160307 160408 
Printing Representation Matrix
uuu 0 0 b/a b/b b/c 0 0 0 
uuv b/d b/e 0 0 0 0 0 0 
uvw 0 0 0 0 0 c/b c/c c/a 
vwu 0 0 a/a a/b a/c 0 0 0 
vwv a/d a/e 0 0 0 0 0 0 
wuu 0 0 d/a d/b d/c 0 0 0 
wuv d/d d/e 0 0 0 0 0 0 
wvw 0 0 0 0 0 e/b e/c e/a 
Printing vertex homoms
uuu 0 0
uuv 0 1
uvw 0 0
vwu 0 0
vwv 0 1
wuu 1 0
wuv 1 1
wvw 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
WE ARE DONE WITH THE G GRAPH
Block size is 1
Printing Gamma Graph which has 8 vertices and 21 edges.
01 0101 0102 0105 0 0 0 0 0 
02 0 0 0 0203 0204 0 0 0 
05 0 0 0 0 0 0506 0507 0508 
03 0301 0302 0305 0 0 0 0 0 
04 0 0 0 0403 0404 0 0 0 
06 0601 0602 0605 0 0 0 0 0 
07 0 0 0 0703 0704 0 0 0 
08 0 0 0 0 0 0806 0807 0808 
Printing Representation Matrix
01 a/b a/c a/a 0 0 0 0 0 
02 0 0 0 a/d a/e 0 0 0 
05 0 0 0 0 0 c/b c/c c/a 
03 b/b b/c b/a 0 0 0 0 0 
04 0 0 0 b/d b/e 0 0 0 
06 d/b d/c d/a 0 0 0 0 0 
07 0 0 0 d/d d/e 0 0 0 
08 0 0 0 0 0 e/b e/c e/a 
Printing vertex homoms
01 0 1
02 0 2
05 2 0
03 1 3
04 1 4
06 3 1
07 3 2
08 4 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Checking to see if T is nondegenerate
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 1, 
1 is unneccesary, skipping
State equiv contains: 0, 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 2, 
State equivalences for 1 are : 1, 
State equiv contains: 0, 2, 
State equiv contains: 1, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Looking at currE[1], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Printing Gamma Graph which has 4 vertices and 10 edges.
{0 2} {0 2}a/ + {0 2}b/ {0 2}c/ 0 0 
{3} {1 2}d/ {1 2}e/ 0 0 
{0 2} 0 0 {0 2}a/ + {0 2}b/ {0 2}c/ 
{1} 0 0 {1}d/ {1}e/ 
Printing Representation Matrix
{0 2} a/ + b/ c/ 0 0 
{3} d/ e/ 0 0 
{0 2} 0 0 a/ + b/ c/ 
{1} 0 0 d/ e/ 
Printing vertex homoms
{0 2} 0 0
{3} 0 0
{0 2} 0 0
{1} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Checking if 0 and 2 are equivalent. We are at 0 of 2
We have found that 2 and 0 are indistinguishable
T is nondegen, checking to see if it is 1-1
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 1 as pvhom for 2
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
In 1-1 function for textile 
Printing Gamma Graph which has 4 vertices and 11 edges.
uu 0 0113 0210 0509 
uw 0 0116 0215 0514 
vv 0311 0 0412 0 
wu 0 0613 0710 0809 
Printing Representation Matrix
uu 0 a/c a/b c/b 
uw 0 a/e a/d c/d 
vv b/a 0 b/a 0 
wu 0 d/c d/b e/b 
Printing vertex homoms
uu 0 0
uw 0 1
vv 0 0
wu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Printing IRQ
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 2} ({0 2},a) ({0 2},c) ({0 2},b) 
{1} 0 ({1},e) ({1},d) 
{2 3} ({2 3},a) ({2 3},c) ({2 3},b) 
Printing Representation Matrix
{0 2} /a /c /b 
{1} 0 /e /d 
{2 3} /a /c /b 
Printing vertex homoms
{0 2} 0 0
{1} 0 1
{2 3} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILQ
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 3} ({0 3},b) ({1},c) ({2},b) 
{1} ({0 3},d) ({1},e) ({2},d) 
{2} ({0 3},a) 0 ({2},a) 
Printing Representation Matrix
{0 3} /b /c /b 
{1} /d /e /d 
{2} /a 0 /a 
Printing vertex homoms
{0 3} 0 0
{1} 0 1
{2} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
We are definite
Printing IRP
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 2} ({0 2},b) ({0 2},a) ({0 2},c) 
{1 2} ({1 2},b) ({1 2},a) ({1 2},c) 
{3} 0 ({3},d) ({3},e) 
Printing Representation Matrix
{0 2} b/ a/ c/ 
{1 2} b/ a/ c/ 
{3} 0 d/ e/ 
Printing vertex homoms
{0 2} 0 0
{1 2} 0 0
{3} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILP
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 1} ({0 1},a) ({2},a) ({3},c) 
{2} ({0 1},b) ({2},b) 0 
{3} ({0 1},d) ({2},d) ({3},e) 
Printing Representation Matrix
{0 1} a/ a/ c/ 
{2} b/ b/ 0 
{3} d/ d/ e/ 
Printing vertex homoms
{0 1} 0 0
{2} 0 0
{3} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
We are definite
GammaT vnames really are: a b c d e 
 T is 1-1, created T* and now checking if it's nondegen
Our final Seen consists of:
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 
State equiv contains: 0, 
State equiv contains: 1, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Printing Gamma Graph which has 5 vertices and 10 edges.
{0} 0 {0}uu/ {0}uw/ 0 0 
{1 2} {1 2}uu/ + {1 2}uw/ + {1 2}vv/ 0 0 0 0 
{3 4} 0 {3 4}wu/ 0 0 0 
{0 1 3} 0 0 0 {0 1 3}uu/ + {0 1 3}vv/ {0 1 3}uw/ 
{2 4} 0 0 0 {2 4}wu/ 0 
Printing Representation Matrix
{0} 0 uu/ uw/ 0 0 
{1 2} uu/ + uw/ + vv/ 0 0 0 0 
{3 4} 0 wu/ 0 0 0 
{0 1 3} 0 0 0 uu/ + vv/ uw/ 
{2 4} 0 0 0 wu/ 0 
Printing vertex homoms
{0} 0 0
{1 2} 0 0
{3 4} 0 0
{0 1 3} 0 0
{2 4} 0 0
Printing G Graph which has 2 vertices and 4 edges.
Y uu + vv uw 
Z wu 0 
Checking if 0 and 3 are equivalent. We are at 0 of 2
Checking if 0 and 4 are equivalent. We are at 1 of 2
We are starting to look at trim((T*)^[2])*
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (0, 1) named 01130509
Starting round 2
Removed Edge (5, 7) named 02100412
Starting round 3
Removed Edge (8, 10) named 02150710
Starting round 4
Removed Edge (7, 5) named 04120210
Starting round 5
Removed Edge (7, 8) named 04120215
Starting round 6
Removed Edge (10, 7) named 07100412
Starting round 7
TiD has been created, starting to check if nondegen
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equivalences for 3 are : 3, 
State equivalences for 4 are : 4, 
State equivalences for 5 are : 5, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 
State equiv contains: 4, 
State equiv contains: 5, 
State equiv contains: 6, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 6
We found it! It's in the 6th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
Starting the 4th round
Looking at currE[0], which is 4
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
Starting the 5th round
Looking at currE[0], which is 5
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
Starting the 6th round
Looking at currE[0], which is 6
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 6, 
State equivalences for 1 are : 1, 2, 
2 is unneccesary, skipping
State equivalences for 3 are : 3, 5, 
State equivalences for 4 are : 4, 
5 is unneccesary, skipping
State equiv contains: 0, 6, 
State equiv contains: 1, 2, 
State equiv contains: 3, 5, 
State equiv contains: 4, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Looking at currE[1], which is 6
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 2th equiv class
Looking at currE[1], which is 2
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 2th equiv class
Starting the 2th round
Looking at currE[0], which is 3
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
Looking at currE[1], which is 5
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 3th round
Looking at currE[0], which is 4
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 2th equiv class
Printing Gamma Graph which has 11 vertices and 21 edges.
{0 5} {0 5}uuvv/ 0 {0 5}uuuw/ 0 0 0 0 0 0 0 0 
{1} 0 0 0 0 0 {1}uuvv/ 0 0 0 0 0 
{2} 0 0 0 0 0 0 {2}uwwu/ 0 0 0 0 
{3 8} 0 0 0 0 {3 8}uwwu/ 0 0 0 0 0 0 
{4 9} 0 {4 9}wuuu/ {4 9}wuuw/ 0 0 {4 9}wuvv/ 0 0 0 0 0 
{6 7} {6 7}vvuu/ 0 0 {6 7}vvuw/ 0 0 0 0 0 0 0 
{9 10} {9 10}wuvv/ {9 10}wuuu/ {9 10}wuuw/ 0 0 0 0 0 0 0 0 
{0 3} 0 0 0 0 0 0 0 0 {0 3}uwwu/ 0 0 
{1 2} 0 0 0 0 0 0 0 {1 2}wuuw/ 0 {1 2}wuvv/ {1 2}wuuu/ 
{5 8} 0 0 0 0 0 0 0 {2 4}vvuw/ 0 0 {2 4}vvuu/ 
{6} 0 0 0 0 0 0 0 {5 8}uuuw/ 0 {5 8}uuvv/ 0 
Printing Representation Matrix
{0 5} uuvv/ 0 uuuw/ 0 0 0 0 0 0 0 0 
{1} 0 0 0 0 0 uuvv/ 0 0 0 0 0 
{2} 0 0 0 0 0 0 uwwu/ 0 0 0 0 
{3 8} 0 0 0 0 uwwu/ 0 0 0 0 0 0 
{4 9} 0 wuuu/ wuuw/ 0 0 wuvv/ 0 0 0 0 0 
{6 7} vvuu/ 0 0 vvuw/ 0 0 0 0 0 0 0 
{9 10} wuvv/ wuuu/ wuuw/ 0 0 0 0 0 0 0 0 
{0 3} 0 0 0 0 0 0 0 0 uwwu/ 0 0 
{1 2} 0 0 0 0 0 0 0 wuuw/ 0 wuvv/ wuuu/ 
{5 8} 0 0 0 0 0 0 0 vvuw/ 0 0 vvuu/ 
{6} 0 0 0 0 0 0 0 uuuw/ 0 uuvv/ 0 
Printing vertex homoms
{0 5} 0 0
{1} 0 0
{2} 0 0
{3 8} 0 0
{4 9} 0 0
{6 7} 0 0
{9 10} 0 0
{0 3} 0 0
{1 2} 0 0
{5 8} 0 0
{6} 0 0
Printing G Graph which has 4 vertices and 10 edges.
uu uuuu uuuw uuvv 0 
uw 0 0 0 uwwu 
vv vvuu vvuw vvvv 0 
wu wuuu wuuw wuvv 0 
Checking if 0 and 7 are equivalent. We are at 0 of 4
Checking if 0 and 8 are equivalent. We are at 1 of 4
Checking if 0 and 9 are equivalent. We are at 2 of 4
Checking if 0 and 10 are equivalent. We are at 3 of 4
We are starting to look at trim((T*)^[3])*
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (0, 1) named 011305090311
Starting round 2
Removed Edge (0, 2) named 011305090412
Starting round 3
Starting round 4
Removed Edge (13, 14) named 021004120113
Starting round 5
Removed Edge (13, 15) named 021004120116
Starting round 6
Removed Edge (13, 16) named 021004120210
Starting round 7
Removed Edge (13, 17) named 021004120215
Starting round 8
Starting round 9
Removed Edge (20, 21) named 021507100311
Starting round 10
Removed Edge (20, 22) named 021507100412
Starting round 11
Starting round 12
Removed Edge (15, 8) named 041202100311
Starting round 13
Starting round 14
Removed Edge (15, 16) named 041202150613
Starting round 15
Starting round 16
Removed Edge (0, 9) named 050903110113
Starting round 17
Removed Edge (0, 10) named 050903110116
Starting round 18
Removed Edge (4, 19) named 051407100412
Starting round 19
Starting round 20
Removed Edge (6, 9) named 080903110113
Starting round 21
Removed Edge (6, 10) named 080903110116
Starting round 22
We have deleted 6 from G
We have deleted 0 from G
TiD has been created, starting to check if nondegen
Our final Seen consists of:
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 5, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 3, 
3 is unneccesary, skipping
State equivalences for 4 are : 4, 12, 
5 is unneccesary, skipping
State equivalences for 6 are : 6, 8, 
State equivalences for 7 are : 7, 9, 
8 is unneccesary, skipping
9 is unneccesary, skipping
State equivalences for 10 are : 10, 
State equivalences for 11 are : 11, 
State equiv contains: 0, 5, 
State equiv contains: 1, 
State equiv contains: 2, 3, 
State equiv contains: 4, 12, 
State equiv contains: 6, 8, 
State equiv contains: 7, 9, 
State equiv contains: 10, 
State equiv contains: 11, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 8
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 5th equiv class
Looking at currE[1], which is 5
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 10
We found it! It's in the 6th equiv class
We are trying to find the repn for 11
We found it! It's in the 7th equiv class
We are trying to find the repn for 12
We found it! It's in the 3th equiv class
Looking at currE[1], which is 3
We are trying to find the repn for 10
We found it! It's in the 6th equiv class
We are trying to find the repn for 11
We found it! It's in the 7th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
Starting the 3th round
Looking at currE[0], which is 4
We are trying to find the repn for 8
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 5th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
Starting the 4th round
Looking at currE[0], which is 6
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
Looking at currE[1], which is 8
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
Starting the 5th round
Looking at currE[0], which is 7
We are trying to find the repn for 3
We found it! It's in the 2th equiv class
Looking at currE[1], which is 9
We are trying to find the repn for 3
We found it! It's in the 2th equiv class
Starting the 6th round
Looking at currE[0], which is 10
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 7th round
Looking at currE[0], which is 11
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 5, 
State equivalences for 1 are : 1, 4, 
State equivalences for 2 are : 2, 11, 
State equivalences for 3 are : 3, 
4 is unneccesary, skipping
5 is unneccesary, skipping
State equivalences for 6 are : 6, 12, 
State equivalences for 7 are : 7, 
State equivalences for 8 are : 8, 
State equivalences for 9 are : 9, 10, 
10 is unneccesary, skipping
11 is unneccesary, skipping
State equiv contains: 0, 5, 
State equiv contains: 1, 4, 
State equiv contains: 2, 11, 
State equiv contains: 3, 
State equiv contains: 6, 12, 
State equiv contains: 7, 
State equiv contains: 8, 
State equiv contains: 9, 10, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Looking at currE[1], which is 5
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 12
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Looking at currE[1], which is 4
We are trying to find the repn for 12
We found it! It's in the 4th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Looking at currE[1], which is 11
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 11
We found it! It's in the 2th equiv class
Starting the 4th round
Looking at currE[0], which is 6
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
Starting the 5th round
Looking at currE[0], which is 7
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Starting the 6th round
Looking at currE[0], which is 8
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
We are trying to find the repn for 10
We found it! It's in the 7th equiv class
Starting the 7th round
Looking at currE[0], which is 9
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
Looking at currE[1], which is 10
We are trying to find the repn for 11
We found it! It's in the 2th equiv class
Printing Gamma Graph which has 16 vertices and 26 edges.
{0 1} 0 0 0 0 {0 1}uuvvuu/ {0 1}uuvvuw/ 0 0 0 0 0 0 0 0 0 0 
{2} 0 0 {2}uuuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 {3 4}uwwuvv/ 0 0 {3 4}uwwuuu/ {3 4}uwwuuw/ 0 0 0 0 0 0 0 0 
{6 7} 0 0 0 0 {5 15}wuvvuu/ {5 15}wuvvuw/ 0 0 0 0 0 0 0 0 0 0 
{9 11} {6 7}vvuuvv/ {6 7}vvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10 12} 0 0 {8}vvuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16} {9 11}wuuuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 {10 12}wuuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {0}wuuuvv/ 0 
{1 4} 0 0 0 0 0 0 0 0 0 0 0 0 {1 4}wuvvuu/ 0 0 {1 4}wuvvuw/ 
{2 5} 0 0 0 0 0 0 0 0 {2 5}uwwuuu/ {2 5}uwwuvv/ 0 {2 5}uwwuuw/ 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 {3}wuuwwu/ 0 0 0 0 0 
{8} 0 0 0 0 0 0 0 0 0 0 0 0 0 {4 7}vvuuuw/ {4 7}vvuuvv/ 0 
{9 10} 0 0 0 0 0 0 0 0 0 0 {6}uuuwwu/ 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 0 0 0 0 0 0 {8}uuvvuu/ 0 0 {8}uuvvuw/ 
{13 14} 0 0 0 0 0 0 0 0 0 0 {9 10}vvuwwu/ 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 0 uuvvuu/ uuvvuw/ 0 0 0 0 0 0 0 0 0 0 
{2} 0 0 uuuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 uwwuvv/ 0 0 uwwuuu/ uwwuuw/ 0 0 0 0 0 0 0 0 
{6 7} 0 0 0 0 wuvvuu/ wuvvuw/ 0 0 0 0 0 0 0 0 0 0 
{9 11} vvuuvv/ vvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10 12} 0 0 vvuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16} wuuuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 wuuwwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvv/ 0 
{1 4} 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuu/ 0 0 wuvvuw/ 
{2 5} 0 0 0 0 0 0 0 0 uwwuuu/ uwwuvv/ 0 uwwuuw/ 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 wuuwwu/ 0 0 0 0 0 
{8} 0 0 0 0 0 0 0 0 0 0 0 0 0 vvuuuw/ vvuuvv/ 0 
{9 10} 0 0 0 0 0 0 0 0 0 0 uuuwwu/ 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuu/ 0 0 uuvvuw/ 
{13 14} 0 0 0 0 0 0 0 0 0 0 vvuwwu/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 0 0
{2} 0 0
{3 4} 0 0
{6 7} 0 0
{9 11} 0 0
{10 12} 0 0
{16} 0 0
{17} 0 0
{0} 0 0
{1 4} 0 0
{2 5} 0 0
{3} 0 0
{8} 0 0
{9 10} 0 0
{11 12} 0 0
{13 14} 0 0
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
Checking if 0 and 8 are equivalent. We are at 0 of 8
Checking if 0 and 9 are equivalent. We are at 1 of 8
Checking if 0 and 10 are equivalent. We are at 2 of 8
Checking if 0 and 11 are equivalent. We are at 3 of 8
Checking if 0 and 12 are equivalent. We are at 4 of 8
Checking if 0 and 13 are equivalent. We are at 5 of 8
Checking if 0 and 14 are equivalent. We are at 6 of 8
We have found that 14 and 0 are indistinguishable
TiD is nondegenerate, checking if it's 1-1
Our final Seen consists of:
Putting 5 as pvhom for 0
Putting 2 as qvhom for 0
Putting 5 as pvhom for 1
Putting 2 as qvhom for 1
Putting 3 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 2 as qvhom for 3
Putting 0 as pvhom for 4
Putting 2 as qvhom for 4
Putting 4 as pvhom for 5
Putting 0 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 3 as pvhom for 8
Putting 1 as qvhom for 8
Putting 1 as pvhom for 9
Putting 3 as qvhom for 9
Putting 1 as pvhom for 10
Putting 3 as qvhom for 10
Putting 1 as pvhom for 11
Putting 3 as qvhom for 11
Putting 1 as pvhom for 12
Putting 3 as qvhom for 12
Putting 1 as pvhom for 13
Putting 7 as qvhom for 13
Putting 1 as pvhom for 14
Putting 7 as qvhom for 14
Putting 4 as pvhom for 15
Putting 1 as qvhom for 15
Putting 2 as pvhom for 16
Putting 4 as qvhom for 16
Putting 2 as pvhom for 17
Putting 4 as qvhom for 17
Putting 2 as pvhom for 18
Putting 7 as qvhom for 18
Our final Seen consists of:
Putting 1 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
Putting 2 as pvhom for 3
Putting 2 as pvhom for 4
Putting 7 as pvhom for 5
Putting 7 as pvhom for 6
Putting 3 as pvhom for 7
Putting 4 as pvhom for 8
Putting 3 as pvhom for 9
Putting 4 as pvhom for 10
Putting 5 as pvhom for 11
Putting 6 as pvhom for 12
Our final Seen consists of:
Putting 2 as pvhom for 0
Putting 5 as qvhom for 0
Putting 2 as pvhom for 1
Putting 5 as qvhom for 1
Putting 0 as pvhom for 2
Putting 3 as qvhom for 2
Putting 2 as pvhom for 3
Putting 0 as qvhom for 3
Putting 2 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 4 as qvhom for 5
Putting 2 as pvhom for 6
Putting 2 as qvhom for 6
Putting 2 as pvhom for 7
Putting 2 as qvhom for 7
Putting 1 as pvhom for 8
Putting 3 as qvhom for 8
Putting 3 as pvhom for 9
Putting 1 as qvhom for 9
Putting 3 as pvhom for 10
Putting 1 as qvhom for 10
Putting 3 as pvhom for 11
Putting 1 as qvhom for 11
Putting 3 as pvhom for 12
Putting 1 as qvhom for 12
Putting 7 as pvhom for 13
Putting 1 as qvhom for 13
Putting 7 as pvhom for 14
Putting 1 as qvhom for 14
Putting 1 as pvhom for 15
Putting 4 as qvhom for 15
Putting 4 as pvhom for 16
Putting 2 as qvhom for 16
Putting 4 as pvhom for 17
Putting 2 as qvhom for 17
Putting 7 as pvhom for 18
Putting 2 as qvhom for 18
Our final Seen consists of:
Putting 5 as pvhom for 0
Putting 7 as pvhom for 1
Putting 2 as pvhom for 2
Putting 6 as pvhom for 3
Putting 7 as pvhom for 4
Putting 2 as pvhom for 5
Putting 3 as pvhom for 6
Putting 0 as pvhom for 7
Putting 0 as pvhom for 8
Putting 1 as pvhom for 9
Putting 1 as pvhom for 10
Putting 4 as pvhom for 11
Putting 4 as pvhom for 12
In 1-1 function for textile 
Printing Gamma Graph which has 19 vertices and 35 edges.
05090311 0 0 0 0 0 0 0 0 0 0 0 050903110210 050903110215 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 050904120113 050904120116 0 0 0 0 
01130514 0 0 0 011305140613 011305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051406130509 051406130514 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 051407100311 
01160809 0 0 0 0 0 0 011608090311 011608090412 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 080903110210 080903110215 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 080904120113 080904120116 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 021003110113 021003110116 021003110210 021003110215 0 0 0 0 0 0 
03110113 0 0 031101130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 031101160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 031102100311 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 031102150613 0 0 0 
04120113 0 0 041201130514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 041201160809 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 021506130509 021506130514 0 
06130509 061305090311 061305090412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 061305140613 061305140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 071003110113 071003110116 071003110210 071003110215 0 0 0 0 0 0 
Printing Representation Matrix
05090311 0 0 0 0 0 0 0 0 0 0 0 uuvvuu/wuuuvv uuvvuw/wuuuvv 0 0 0 0 0 0 
05090412 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuu/wuvvuw uuvvuw/wuvvuw 0 0 0 0 
01130514 0 0 0 uuuwwu/uwwuuw uuuwwu/uwwuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
05140613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uwwuuu/wuuwwu uwwuuw/wuuwwu 0 
05140710 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uwwuvv/wuvvuu 
01160809 0 0 0 0 0 0 uwwuvv/uwwuuu uwwuvv/uwwuvv 0 0 0 0 0 0 0 0 0 0 0 
08090311 0 0 0 0 0 0 0 0 0 0 0 wuvvuu/wuuuvv wuvvuw/wuuuvv 0 0 0 0 0 0 
08090412 0 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuu/wuvvuw wuvvuw/wuvvuw 0 0 0 0 
02100311 0 0 0 0 0 0 0 0 0 uuvvuu/vvuuuw uuvvuw/vvuuuw uuvvuu/vvuuvv uuvvuw/vvuuvv 0 0 0 0 0 0 
03110113 0 0 vvuuuw/uuuwwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110116 0 0 0 0 0 vvuwwu/uuuwwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
03110210 0 0 0 0 0 0 0 0 vvuuvv/uuvvuu 0 0 0 0 0 0 0 0 0 0 
03110215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vvuwwu/uuvvuw 0 0 0 
04120113 0 0 vvuuuw/vvuwwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
04120116 0 0 0 0 0 vvuwwu/vvuwwu 0 0 0 0 0 0 0 0 0 0 0 0 0 
02150613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uwwuuu/vvuwwu uwwuuw/vvuwwu 0 
06130509 wuuuvv/uwwuuu wuuuvv/uwwuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
06130514 0 0 0 wuuwwu/uwwuuw wuuwwu/uwwuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
07100311 0 0 0 0 0 0 0 0 0 wuvvuu/vvuuuw wuvvuw/vvuuuw wuvvuu/vvuuvv wuvvuw/vvuuvv 0 0 0 0 0 0 
Printing vertex homoms
05090311 1 5
05090412 1 7
01130514 0 2
05140613 2 6
05140710 2 7
01160809 2 2
08090311 7 5
08090412 7 7
02100311 1 3
03110113 3 0
03110116 4 0
03110210 3 1
03110215 4 1
04120113 3 4
04120116 4 4
02150613 2 4
06130509 5 2
06130514 6 2
07100311 7 3
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
Printing IRQ
Printing Gamma Graph which has 13 vertices and 22 edges.
{0} 0 0 0 0 0 0 0 0 ({0},wuuuvv) 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 ({1 4},wuvvuw) 0 0 ({1 4},wuvvuu) 
{2 5} 0 0 0 ({2 5},uwwuuw) ({2 5},uwwuvv) ({2 5},uwwuuu) 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 ({3},wuuwwu) 0 
{4 7} 0 0 0 0 0 0 0 0 0 ({4 7},wuvvuw) 0 0 ({4 7},wuvvuu) 
{6} 0 0 0 0 0 0 0 0 ({6},wuuuvv) 0 0 0 0 
{8} 0 0 0 0 0 0 0 ({8},vvuuuw) ({8},vvuuvv) 0 0 0 0 
{9 10} 0 0 ({9 10},uuuwwu) 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 ({11 12},uuvvuu) 0 0 0 ({11 12},uuvvuw) 0 0 
{13 14} 0 0 ({13 14},vvuwwu) 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 ({15},vvuwwu) 0 
{16 17} ({16 17},uwwuuu) ({16 17},uwwuvv) 0 ({16 17},uwwuuw) 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 ({18},vvuuuw) ({18},vvuuvv) 0 0 0 0 
Printing Representation Matrix
{0} 0 0 0 0 0 0 0 0 /wuuuvv 0 0 0 0 
{1 4} 0 0 0 0 0 0 0 0 0 /wuvvuw 0 0 /wuvvuu 
{2 5} 0 0 0 /uwwuuw /uwwuvv /uwwuuu 0 0 0 0 0 0 0 
{3} 0 0 0 0 0 0 0 0 0 0 0 /wuuwwu 0 
{4 7} 0 0 0 0 0 0 0 0 0 /wuvvuw 0 0 /wuvvuu 
{6} 0 0 0 0 0 0 0 0 /wuuuvv 0 0 0 0 
{8} 0 0 0 0 0 0 0 /vvuuuw /vvuuvv 0 0 0 0 
{9 10} 0 0 /uuuwwu 0 0 0 0 0 0 0 0 0 0 
{11 12} 0 0 0 0 0 0 /uuvvuu 0 0 0 /uuvvuw 0 0 
{13 14} 0 0 /vvuwwu 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 0 0 0 /vvuwwu 0 
{16 17} /uwwuuu /uwwuvv 0 /uwwuuw 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 0 /vvuuuw /vvuuvv 0 0 0 0 
Printing vertex homoms
{0} 0 5
{1 4} 0 7
{2 5} 0 2
{3} 0 6
{4 7} 0 7
{6} 0 5
{8} 0 3
{9 10} 0 0
{11 12} 0 1
{13 14} 0 4
{15} 0 4
{16 17} 0 2
{18} 0 3
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
We have inserted uuuw into types.
We have pushed uuuwwu onto the current string collection
We have inserted uuvv into types.
We have pushed uuvvuu onto the current string collection
We have pushed uuvvuw onto the current string collection
We have inserted uwwu into types.
We have pushed uwwuuu onto the current string collection
We have pushed uwwuuw onto the current string collection
We have pushed uwwuvv onto the current string collection
We have inserted vvuu into types.
We have pushed vvuuuw onto the current string collection
We have pushed vvuuvv onto the current string collection
We have inserted vvuw into types.
We have pushed vvuwwu onto the current string collection
We have inserted wuuu into types.
We have pushed wuuuuw onto the current string collection
We have pushed wuuuvv onto the current string collection
We have inserted wuuw into types.
We have pushed wuuwwu onto the current string collection
We have inserted wuvv into types.
We have pushed wuvvuu onto the current string collection
We have pushed wuvvuw onto the current string collection
Looking at type: uuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: uuvv
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: uwwu
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 2
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: vvuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: vvuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: wuuu
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 5
successfully initialized dummy
Looking at type: wuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: wuvv
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
We are 0
Looking at type 2
Got pair 2,uwwuvv
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 2,uwwuuw
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,uwwuuu
Looking at element 2 of our current vertex collection
Looking at element 11 of our current vertex collection
newM is 2 and newType is 5
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 3
Got pair 3,vvuuvv
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 3,vvuuuw
Looking at element 6 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Got pair 4,vvuwwu
Looking at element 9 of our current vertex collection
Looking at element 10 of our current vertex collection
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 4 and 0
Looking at type 5
Found a match for our vvcit: 2
Got pair 5,wuuuvv
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Got pair 5,wuuuuw
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 0 and newType is 1
typeMatrix is 2 by 8
We are 0
Looking at type 7
Found a match for our vvcit: 1
Got pair 7,wuvvuw
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 4
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 7,wuvvuu
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Vertex 4 is white
Looking at vertex 0 which is connected to 4 and is colored 2
We are definite
Printing ILQ
Printing Gamma Graph which has 13 vertices and 22 edges.
{0 6} 0 0 0 0 0 0 0 0 0 ({11},wuuuvv) ({12},wuuuvv) 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},wuvvuw) ({14 15},wuvvuw) 
{2 17} 0 0 0 ({3},uwwuuw) ({4},uwwuvv) 0 0 0 0 0 0 0 0 
{3} 0 0 ({2 17},wuuwwu) 0 0 ({5 16},wuuwwu) 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 ({8 18},wuvvuu) 0 0 0 0 0 0 
{5 16} ({0 6},uwwuuu) ({1 7},uwwuvv) 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 ({9},vvuuuw) ({10},vvuuuw) ({11},vvuuvv) ({12},vvuuvv) 0 0 
{9} 0 0 ({2 17},uuuwwu) 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 ({5 16},uuuwwu) 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 ({8 18},uuvvuu) 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 ({13 15},uuvvuw) ({14 15},uuvvuw) 
{13 15} 0 0 ({2 17},vvuwwu) 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 ({5 16},vvuwwu) 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 6} 0 0 0 0 0 0 0 0 0 /wuuuvv /wuuuvv 0 0 
{1 7} 0 0 0 0 0 0 0 0 0 0 0 /wuvvuw /wuvvuw 
{2 17} 0 0 0 /uwwuuw /uwwuvv 0 0 0 0 0 0 0 0 
{3} 0 0 /wuuwwu 0 0 /wuuwwu 0 0 0 0 0 0 0 
{4} 0 0 0 0 0 0 /wuvvuu 0 0 0 0 0 0 
{5 16} /uwwuuu /uwwuvv 0 0 0 0 0 0 0 0 0 0 0 
{8 18} 0 0 0 0 0 0 0 /vvuuuw /vvuuuw /vvuuvv /vvuuvv 0 0 
{9} 0 0 /uuuwwu 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 /uuuwwu 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 /uuvvuu 0 0 0 0 0 0 
{12} 0 0 0 0 0 0 0 0 0 0 0 /uuvvuw /uuvvuw 
{13 15} 0 0 /vvuwwu 0 0 0 0 0 0 0 0 0 0 
{14 15} 0 0 0 0 0 /vvuwwu 0 0 0 0 0 0 0 
Printing vertex homoms
{0 6} 0 5
{1 7} 0 7
{2 17} 0 2
{3} 0 6
{4} 0 7
{5 16} 0 2
{8 18} 0 3
{9} 0 0
{10} 0 0
{11} 0 1
{12} 0 1
{13 15} 0 4
{14 15} 0 4
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
We have inserted uuuw into types.
We have pushed vvuuuw onto the current string collection
We have pushed wuuuuw onto the current string collection
We have inserted uuvv into types.
We have pushed vvuuvv onto the current string collection
We have pushed wuuuvv onto the current string collection
We have inserted uwwu into types.
We have pushed uuuwwu onto the current string collection
We have pushed vvuwwu onto the current string collection
We have pushed wuuwwu onto the current string collection
We have inserted vvuu into types.
We have pushed uuvvuu onto the current string collection
We have pushed wuvvuu onto the current string collection
We have inserted vvuw into types.
We have pushed uuvvuw onto the current string collection
We have pushed wuvvuw onto the current string collection
We have inserted wuuu into types.
We have pushed uwwuuu onto the current string collection
We have inserted wuuw into types.
We have pushed uwwuuw onto the current string collection
We have inserted wuvv into types.
We have pushed uwwuvv onto the current string collection
Looking at type: uuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: uuvv
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 1
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: uwwu
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: vvuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 3
successfully initialized dummy
Looking at type: vvuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: wuuu
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: wuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: wuvv
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,wuuuuw
Looking at element 7 of our current vertex collection
Current phom is vvuuuw
Looking at element 8 of our current vertex collection
Current phom is vvuuuw
newM is 0 and newType is 0
typeMatrix is 2 by 8
Got pair 0,vvuuuw
Looking at element 7 of our current vertex collection
Current phom is vvuuuw
Looking at element 8 of our current vertex collection
Current phom is vvuuuw
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,wuuuvv
Looking at element 9 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
Looking at element 10 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,vvuuvv
Looking at element 9 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
Looking at element 10 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
newM is 1 and newType is 3
typeMatrix is 2 by 8
Looking at type 2
Did not find a match for vvcit, oldv set as 2
Got pair 2,wuuwwu
Looking at element 2 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 5 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,vvuwwu
Looking at element 2 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 5 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 2
Got pair 2,uuuwwu
Looking at element 2 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 5 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 2 and newType is 0
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
Looking at type 4
Found a match for our vvcit: 3
Got pair 4,wuvvuw
Looking at element 11 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
Looking at element 12 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
newM is 1 and newType is 7
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 4,uuvvuw
Looking at element 11 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
Looking at element 12 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Did not find a match for vvcit, oldv set as 4
Got pair 7,uwwuvv
Looking at element 1 of our current vertex collection
Current phom is uwwuvv
Looking at element 4 of our current vertex collection
Current phom is uwwuvv
newM is 2 and newType is 2
typeMatrix is 2 by 8
We have created an edge between 2 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 3 edges.
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 4 which is connected to 2 and is colored 0
Looking at vertex 2 which is connected to 3 and is colored 2
We are definite
Printing IRP
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 1} 0 0 0 0 0 0 0 0 ({0 1},uuvvuu) ({0 1},uuvvuw) 0 0 0 
{2} 0 0 ({2},uuuwwu) 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 ({3 4},uwwuuu) ({3 4},uwwuuw) ({3 4},uwwuvv) 
{5 15} 0 0 0 0 ({5 15},uwwuvv) 0 0 0 0 0 ({5 15},uwwuuu) ({5 15},uwwuuw) 0 
{6 7} 0 0 0 0 0 0 0 0 ({6 7},wuvvuu) ({6 7},wuvvuw) 0 0 0 
{8} 0 0 0 0 0 0 ({8},uuvvuu) ({8},uuvvuw) 0 0 0 0 0 
{9 11} 0 ({9 11},vvuuuw) 0 0 0 ({9 11},vvuuvv) 0 0 0 0 0 0 0 
{10 12} 0 0 0 ({10 12},vvuwwu) 0 0 0 0 0 0 0 0 0 
{11 13} 0 ({11 13},vvuuuw) 0 0 0 ({11 13},vvuuvv) 0 0 0 0 0 0 0 
{12 14} 0 0 0 ({12 14},vvuwwu) 0 0 0 0 0 0 0 0 0 
{16} ({16},wuuuvv) 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 ({17},wuuwwu) 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 ({18},wuvvuu) ({18},wuvvuw) 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 0 0 0 0 0 uuvvuu/ uuvvuw/ 0 0 0 
{2} 0 0 uuuwwu/ 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 uwwuuu/ uwwuuw/ uwwuvv/ 
{5 15} 0 0 0 0 uwwuvv/ 0 0 0 0 0 uwwuuu/ uwwuuw/ 0 
{6 7} 0 0 0 0 0 0 0 0 wuvvuu/ wuvvuw/ 0 0 0 
{8} 0 0 0 0 0 0 uuvvuu/ uuvvuw/ 0 0 0 0 0 
{9 11} 0 vvuuuw/ 0 0 0 vvuuvv/ 0 0 0 0 0 0 0 
{10 12} 0 0 0 vvuwwu/ 0 0 0 0 0 0 0 0 0 
{11 13} 0 vvuuuw/ 0 0 0 vvuuvv/ 0 0 0 0 0 0 0 
{12 14} 0 0 0 vvuwwu/ 0 0 0 0 0 0 0 0 0 
{16} wuuuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 wuuwwu/ 0 0 0 0 0 0 0 0 0 0 
{18} 0 0 0 0 0 0 wuvvuu/ wuvvuw/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 1 0
{2} 0 0
{3 4} 2 0
{5 15} 2 0
{6 7} 7 0
{8} 1 0
{9 11} 3 0
{10 12} 4 0
{11 13} 3 0
{12 14} 4 0
{16} 5 0
{17} 6 0
{18} 7 0
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
We have inserted uuuw into types.
We have pushed uuuwwu onto the current string collection
We have inserted uuvv into types.
We have pushed uuvvuu onto the current string collection
We have pushed uuvvuw onto the current string collection
We have inserted uwwu into types.
We have pushed uwwuuu onto the current string collection
We have pushed uwwuuw onto the current string collection
We have pushed uwwuvv onto the current string collection
We have inserted vvuu into types.
We have pushed vvuuuw onto the current string collection
We have pushed vvuuvv onto the current string collection
We have inserted vvuw into types.
We have pushed vvuwwu onto the current string collection
We have inserted wuuu into types.
We have pushed wuuuuw onto the current string collection
We have pushed wuuuvv onto the current string collection
We have inserted wuuw into types.
We have pushed wuuwwu onto the current string collection
We have inserted wuvv into types.
We have pushed wuvvuu onto the current string collection
We have pushed wuvvuw onto the current string collection
Looking at type: uuuw
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: uuvv
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 2
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: uwwu
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Found a match, new m value is: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: vvuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
Found a match, new m value is: 1
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 2
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: vvuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: wuuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 1
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: wuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: wuvv
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 1
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 2
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Got pair 1,uuvvuw
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 1
Got pair 1,uuvvuu
Looking at element 0 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 0 and 2
Looking at type 2
Got pair 2,uwwuvv
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Got pair 2,uwwuuw
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,uwwuuu
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
newM is 1 and newType is 5
typeMatrix is 2 by 8
Looking at type 3
Found a match for our vvcit: 2
Got pair 3,vvuuvv
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Got pair 3,vvuuuw
Looking at element 6 of our current vertex collection
Looking at element 8 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 4
Found a match for our vvcit: 1
Got pair 4,vvuwwu
Looking at element 7 of our current vertex collection
Looking at element 9 of our current vertex collection
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,wuvvuw
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 4
typeMatrix is 2 by 8
We have created an edge between 4 and 1
Got pair 7,wuvvuu
Looking at element 4 of our current vertex collection
Looking at element 12 of our current vertex collection
newM is 2 and newType is 3
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Vertex 0 is white
Looking at vertex 1 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
Looking at vertex 1 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
Printing ILP
Printing Gamma Graph which has 13 vertices and 23 edges.
{0 8} 0 0 0 0 0 0 0 0 0 ({11},uuvvuu) ({12},uuvvuw) 0 0 
{1 8} 0 0 0 0 0 0 0 ({9 13},uuvvuu) ({10 14},uuvvuw) 0 0 0 0 
{2} 0 0 0 ({3 15},uuuwwu) ({4 5},uuuwwu) 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 ({16},uwwuuu) ({17},uwwuuw) 
{4 5} 0 0 0 0 0 ({6 18},uwwuvv) ({7 18},uwwuvv) 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 ({11},wuvvuu) ({12},wuvvuw) 0 0 
{7 18} 0 0 0 0 0 0 0 ({9 13},wuvvuu) ({10 14},wuvvuw) 0 0 0 0 
{9 13} 0 0 ({2},vvuuuw) 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 ({4 5},vvuwwu) 0 0 0 0 0 0 0 0 
{11} ({0 8},vvuuvv) ({1 8},vvuuvv) 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 ({3 15},vvuwwu) 0 0 0 0 0 0 0 0 0 
{16} ({0 8},wuuuvv) ({1 8},wuuuvv) 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 ({3 15},wuuwwu) ({4 5},wuuwwu) 0 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 8} 0 0 0 0 0 0 0 0 0 uuvvuu/ uuvvuw/ 0 0 
{1 8} 0 0 0 0 0 0 0 uuvvuu/ uuvvuw/ 0 0 0 0 
{2} 0 0 0 uuuwwu/ uuuwwu/ 0 0 0 0 0 0 0 0 
{3 15} 0 0 0 0 0 0 0 0 0 0 0 uwwuuu/ uwwuuw/ 
{4 5} 0 0 0 0 0 uwwuvv/ uwwuvv/ 0 0 0 0 0 0 
{6 18} 0 0 0 0 0 0 0 0 0 wuvvuu/ wuvvuw/ 0 0 
{7 18} 0 0 0 0 0 0 0 wuvvuu/ wuvvuw/ 0 0 0 0 
{9 13} 0 0 vvuuuw/ 0 0 0 0 0 0 0 0 0 0 
{10 14} 0 0 0 0 vvuwwu/ 0 0 0 0 0 0 0 0 
{11} vvuuvv/ vvuuvv/ 0 0 0 0 0 0 0 0 0 0 0 
{12} 0 0 0 vvuwwu/ 0 0 0 0 0 0 0 0 0 
{16} wuuuvv/ wuuuvv/ 0 0 0 0 0 0 0 0 0 0 0 
{17} 0 0 0 wuuwwu/ wuuwwu/ 0 0 0 0 0 0 0 0 
Printing vertex homoms
{0 8} 1 0
{1 8} 1 0
{2} 0 0
{3 15} 2 0
{4 5} 2 0
{6 18} 7 0
{7 18} 7 0
{9 13} 3 0
{10 14} 4 0
{11} 3 0
{12} 4 0
{16} 5 0
{17} 6 0
Printing G Graph which has 8 vertices and 14 edges.
uuuw 0 0 uuuwwu 0 0 0 0 0 
uuvv 0 0 0 uuvvuu uuvvuw 0 0 0 
uwwu 0 0 0 0 0 uwwuuu uwwuuw uwwuvv 
vvuu vvuuuw vvuuvv 0 0 0 0 0 0 
vvuw 0 0 vvuwwu 0 0 0 0 0 
wuuu wuuuuw wuuuvv 0 0 0 0 0 0 
wuuw 0 0 wuuwwu 0 0 0 0 0 
wuvv 0 0 0 wuvvuu wuvvuw 0 0 0 
We have inserted uuuw into types.
We have pushed vvuuuw onto the current string collection
We have pushed wuuuuw onto the current string collection
We have inserted uuvv into types.
We have pushed vvuuvv onto the current string collection
We have pushed wuuuvv onto the current string collection
We have inserted uwwu into types.
We have pushed uuuwwu onto the current string collection
We have pushed vvuwwu onto the current string collection
We have pushed wuuwwu onto the current string collection
We have inserted vvuu into types.
We have pushed uuvvuu onto the current string collection
We have pushed wuvvuu onto the current string collection
We have inserted vvuw into types.
We have pushed uuvvuw onto the current string collection
We have pushed wuvvuw onto the current string collection
We have inserted wuuu into types.
We have pushed uwwuuu onto the current string collection
We have inserted wuuw into types.
We have pushed uwwuuw onto the current string collection
We have inserted wuvv into types.
We have pushed uwwuvv onto the current string collection
Looking at type: uuuw
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 1
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: uuvv
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 1
successfully initialized dummy
Looking at type: uwwu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
Found a match, new m value is: 1
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 2
successfully initialized dummy
Looking at type: vvuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Found a match, new m value is: 1
We are done checking vertex: 7
We are done checking vertex: 8
Found a match, new m value is: 2
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 3
successfully initialized dummy
Looking at type: vvuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Found a match, new m value is: 1
We are done checking vertex: 8
We are done checking vertex: 9
Found a match, new m value is: 2
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 4
successfully initialized dummy
Looking at type: wuuu
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
Found a match, new m value is: 1
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 5
successfully initialized dummy
Looking at type: wuuw
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
Found a match, new m value is: 1
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 6
successfully initialized dummy
Looking at type: wuvv
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
We are done checking vertex: 7
We are done checking vertex: 8
We are done checking vertex: 9
We are done checking vertex: 10
We are done checking vertex: 11
We are done checking vertex: 12
Out of for loop
Dummy[0] set and maxM-M is 0 while curr typeNumber is 7
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 0
Got pair 1,wuuuvv
Looking at element 0 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
Looking at element 1 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
newM is 1 and newType is 5
typeMatrix is 2 by 8
Got pair 1,vvuuvv
Looking at element 0 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
Looking at element 1 of our current vertex collection
Current phom is vvuuvv
Current phom is wuuuvv
newM is 1 and newType is 3
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Looking at type 2
Did not find a match for vvcit, oldv set as 1
Got pair 2,wuuwwu
Looking at element 3 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 4 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 1 and newType is 6
typeMatrix is 2 by 8
Got pair 2,vvuwwu
Looking at element 3 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 4 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 2 and newType is 4
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 2 and 1
Got pair 2,uuuwwu
Looking at element 3 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
Looking at element 4 of our current vertex collection
Current phom is uuuwwu
Current phom is vvuwwu
Current phom is wuuwwu
newM is 1 and newType is 0
typeMatrix is 2 by 8
Looking at type 3
Did not find a match for vvcit, oldv set as 3
Got pair 3,wuvvuu
Looking at element 7 of our current vertex collection
Current phom is uuvvuu
Current phom is wuvvuu
Looking at element 9 of our current vertex collection
Current phom is uuvvuu
Current phom is wuvvuu
newM is 2 and newType is 7
typeMatrix is 2 by 8
Could not find the vertex, creating a new one
We have created an edge between 4 and 3
Got pair 3,uuvvuu
Looking at element 7 of our current vertex collection
Current phom is uuvvuu
Current phom is wuvvuu
Looking at element 9 of our current vertex collection
Current phom is uuvvuu
Current phom is wuvvuu
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 3
Looking at type 4
Found a match for our vvcit: 2
Got pair 4,wuvvuw
Looking at element 8 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
Looking at element 10 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
newM is 2 and newType is 7
typeMatrix is 2 by 8
We have created an edge between 4 and 2
Got pair 4,uuvvuw
Looking at element 8 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
Looking at element 10 of our current vertex collection
Current phom is uuvvuw
Current phom is wuvvuw
newM is 2 and newType is 1
typeMatrix is 2 by 8
We have created an edge between 0 and 2
We are 0
We are 0
Looking at type 7
Found a match for our vvcit: 4
Got pair 7,uwwuvv
Looking at element 5 of our current vertex collection
Current phom is uwwuvv
Looking at element 6 of our current vertex collection
Current phom is uwwuvv
newM is 1 and newType is 2
typeMatrix is 2 by 8
Target is 0, putting in a new vector<vColl>
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 5 edges.
Looking at vertex 3 which is connected to 0 and is colored 0
Looking at vertex 2 which is connected to 0 and is colored 0
Looking at vertex 1 which is connected to 2 and is colored 0
Looking at vertex 3 which is connected to 4 and is colored 2
Looking at vertex 2 which is connected to 4 and is colored 2
We are definite
TiD is also 1-1 at level 3
Checking to see if T is nondegenerate
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 1, 
1 is unneccesary, skipping
State equiv contains: 0, 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 2, 3, 5, 6, 
State equivalences for 1 are : 1, 4, 
2 is unneccesary, skipping
3 is unneccesary, skipping
4 is unneccesary, skipping
5 is unneccesary, skipping
State equiv contains: 0, 2, 3, 5, 6, 
State equiv contains: 1, 4, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Looking at currE[1], which is 2
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Looking at currE[2], which is 3
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Looking at currE[3], which is 5
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Looking at currE[4], which is 6
We are trying to find the repn for 6
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 5
We found it! It's in the 0th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Looking at currE[1], which is 4
We are trying to find the repn for 3
We found it! It's in the 0th equiv class
We are trying to find the repn for 4
We found it! It's in the 1th equiv class
Printing Gamma Graph which has 4 vertices and 10 edges.
{0 2 3 4 5} {0 2 3 4 5}a/ + {0 2 3 4 5}b/ {0 2 3 4 5}c/ 0 0 
{6 7 8} {1 2 3 4 5}d/ {1 2 3 4 5}e/ 0 0 
{0 2} 0 0 {0 2}a/ + {0 2}b/ {0 2}c/ 
{1} 0 0 {1}d/ {1}e/ 
Printing Representation Matrix
{0 2 3 4 5} a/ + b/ c/ 0 0 
{6 7 8} d/ e/ 0 0 
{0 2} 0 0 a/ + b/ c/ 
{1} 0 0 d/ e/ 
Printing vertex homoms
{0 2 3 4 5} 0 0
{6 7 8} 0 0
{0 2} 0 0
{1} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Checking if 0 and 2 are equivalent. We are at 0 of 2
We have found that 2 and 0 are indistinguishable
T is nondegen, checking to see if it is 1-1
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 0 as qvhom for 5
Putting 0 as pvhom for 6
Putting 0 as qvhom for 6
Putting 0 as pvhom for 7
Putting 0 as qvhom for 7
Putting 0 as pvhom for 8
Putting 0 as qvhom for 8
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as pvhom for 1
Putting 0 as pvhom for 2
Putting 0 as pvhom for 3
Putting 0 as pvhom for 4
Putting 1 as pvhom for 5
Putting 1 as pvhom for 6
Putting 1 as pvhom for 7
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 0 as qvhom for 0
Putting 0 as pvhom for 1
Putting 0 as qvhom for 1
Putting 0 as pvhom for 2
Putting 0 as qvhom for 2
Putting 0 as pvhom for 3
Putting 0 as qvhom for 3
Putting 0 as pvhom for 4
Putting 0 as qvhom for 4
Putting 0 as pvhom for 5
Putting 0 as qvhom for 5
Putting 0 as pvhom for 6
Putting 0 as qvhom for 6
Putting 0 as pvhom for 7
Putting 0 as qvhom for 7
Putting 0 as pvhom for 8
Putting 0 as qvhom for 8
Our final Seen consists of:
Putting 0 as pvhom for 0
Putting 1 as pvhom for 1
Putting 0 as pvhom for 2
In 1-1 function for textile 
Printing Gamma Graph which has 9 vertices and 24 edges.
uuuu 0 0 0 0 02050113 02050210 0 0 05020509 
uuuw 0 0 0 0 02050116 02050215 0 0 05020514 
uuvv 0 0 0 0 0 0 05010311 05010412 0 
uvwu 0 01030613 01030710 01040809 0 0 0 0 0 
vwuw 0 0 0 03070514 04080116 04080215 0 0 0 
vwvv 03060311 0 03060412 0 0 0 0 0 0 
wuuu 0 0 0 0 07050113 07050210 0 0 08020509 
wuvv 0 0 0 0 0 0 08010311 08010412 0 
wvwu 0 06030613 06030710 06040809 0 0 0 0 0 
Printing Representation Matrix
uuuu 0 0 0 0 a/c a/b 0 0 c/b 
uuuw 0 0 0 0 a/e a/d 0 0 c/d 
uuvv 0 0 0 0 0 0 c/a c/a 0 
uvwu 0 a/c a/b a/b 0 0 0 0 0 
vwuw 0 0 0 b/d b/e b/d 0 0 0 
vwvv b/a 0 b/a 0 0 0 0 0 0 
wuuu 0 0 0 0 d/c d/b 0 0 e/b 
wuvv 0 0 0 0 0 0 e/a e/a 0 
wvwu 0 d/c d/b d/b 0 0 0 0 0 
Printing vertex homoms
uuuu 0 0
uuuw 0 1
uuvv 0 0
uvwu 0 0
vwuw 0 1
vwvv 0 0
wuuu 1 0
wuvv 1 0
wvwu 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
Printing IRQ
Printing Gamma Graph which has 7 vertices and 19 edges.
{0 2} 0 0 0 0 ({0 2},c) ({0 2},b) ({0 2},a) 
{1} 0 0 0 0 ({1},e) ({1},d) 0 
{2 3} 0 ({2 3},c) ({2 3},b) 0 0 0 ({2 3},a) 
{3 5} ({3 5},a) ({3 5},c) ({3 5},b) 0 0 0 0 
{4} 0 0 0 ({4},d) ({4},e) 0 0 
{5 8} ({5 8},a) ({5 8},c) ({5 8},b) 0 0 0 0 
{6 7} 0 0 0 0 ({6 7},c) ({6 7},b) ({6 7},a) 
Printing Representation Matrix
{0 2} 0 0 0 0 /c /b /a 
{1} 0 0 0 0 /e /d 0 
{2 3} 0 /c /b 0 0 0 /a 
{3 5} /a /c /b 0 0 0 0 
{4} 0 0 0 /d /e 0 0 
{5 8} /a /c /b 0 0 0 0 
{6 7} 0 0 0 0 /c /b /a 
Printing vertex homoms
{0 2} 0 0
{1} 0 1
{2 3} 0 0
{3 5} 0 0
{4} 0 1
{5 8} 0 0
{6 7} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Found a match, new m value is: 3
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 4
We are done checking vertex: 5
Found a match, new m value is: 5
We are done checking vertex: 6
Out of for loop
New maxM is 5
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
Found a match, new m value is: 2
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
Out of for loop
Dummy[0] set and maxM-M is 3 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 5
Starting to look at vertex collections of size 5
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 2 of our current vertex collection
Looking at element 3 of our current vertex collection
Looking at element 5 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 4
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 3
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 2 of our current vertex collection
Looking at element 5 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 1 and 2
Found a match for our vvcit: 2
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 6 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 5 by 2
Looking at type 1
Got pair 1,e
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 1,d
Looking at element 1 of our current vertex collection
Looking at element 4 of our current vertex collection
newM is 2 and newType is 0
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 3 and 4
Checking to see if we have cycles.
MatrixHelper has 5 vertices and 2 edges.
Vertex 0 is white
Vertex 1 is white
Looking at vertex 2 which is connected to 1 and is colored 0
Vertex 3 is white
Looking at vertex 4 which is connected to 3 and is colored 0
We are definite
Printing ILQ
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 3 6 8} ({0 3 6 8},b) ({1 4},c) ({2 5 7},b) 
{1 4} ({0 3 6 8},d) ({1 4},e) ({2 5 7},d) 
{2 5 7} ({0 3 6 8},a) 0 ({2 5 7},a) 
Printing Representation Matrix
{0 3 6 8} /b /c /b 
{1 4} /d /e /d 
{2 5 7} /a 0 /a 
Printing vertex homoms
{0 3 6 8} 0 0
{1 4} 0 1
{2 5 7} 0 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 2
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
Found a match, new m value is: 1
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
We are definite
Printing IRP
Printing Gamma Graph which has 3 vertices and 8 edges.
{0 2 3 4 5} ({0 2 3 4 5},b) ({0 2 3 4 5},a) ({0 2 3 4 5},c) 
{1 2 3 4 5} ({1 2 3 4 5},b) ({1 2 3 4 5},a) ({1 2 3 4 5},c) 
{6 7 8} 0 ({6 7 8},d) ({6 7 8},e) 
Printing Representation Matrix
{0 2 3 4 5} b/ a/ c/ 
{1 2 3 4 5} b/ a/ c/ 
{6 7 8} 0 d/ e/ 
Printing vertex homoms
{0 2 3 4 5} 0 0
{1 2 3 4 5} 0 0
{6 7 8} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed c onto the current string collection
We have inserted Z into types.
We have pushed d onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
We are done checking vertex: 2
Out of for loop
New maxM is 2
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
Found a match, new m value is: 1
We are done checking vertex: 2
Out of for loop
Dummy[0] set and maxM-M is 1 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 2
Starting to look at vertex collections of size 2
Looking at type 0
Got pair 0,c
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 1
typeMatrix is 2 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Looking at element 1 of our current vertex collection
newM is 1 and newType is 0
typeMatrix is 2 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Vertex 0 is white
We are definite
Printing ILP
Printing Gamma Graph which has 8 vertices and 21 edges.
{0 1} 0 0 0 ({4},a) ({5},a) 0 0 ({8},c) 
{2} 0 0 0 0 0 ({6},c) ({7},c) 0 
{3} ({0 1},a) ({2},a) ({3},a) 0 0 0 0 0 
{4} 0 0 ({3},b) ({4},b) ({5},b) 0 0 0 
{5} ({0 1},b) ({2},b) 0 0 0 0 0 0 
{6} 0 0 0 ({4},d) ({5},d) 0 0 ({8},e) 
{7} 0 0 0 0 0 ({6},e) ({7},e) 0 
{8} ({0 1},d) ({2},d) ({3},d) 0 0 0 0 0 
Printing Representation Matrix
{0 1} 0 0 0 a/ a/ 0 0 c/ 
{2} 0 0 0 0 0 c/ c/ 0 
{3} a/ a/ a/ 0 0 0 0 0 
{4} 0 0 b/ b/ b/ 0 0 0 
{5} b/ b/ 0 0 0 0 0 0 
{6} 0 0 0 d/ d/ 0 0 e/ 
{7} 0 0 0 0 0 e/ e/ 0 
{8} d/ d/ d/ 0 0 0 0 0 
Printing vertex homoms
{0 1} 0 0
{2} 0 0
{3} 0 0
{4} 0 0
{5} 0 0
{6} 1 0
{7} 1 0
{8} 1 0
Printing G Graph which has 2 vertices and 5 edges.
Y a + b c 
Z d e 
We have inserted Y into types.
We have pushed a onto the current string collection
We have pushed b onto the current string collection
We have pushed d onto the current string collection
We have inserted Z into types.
We have pushed c onto the current string collection
We have pushed e onto the current string collection
Looking at type: Y
Found a match, new m value is: 1
We are done checking vertex: 0
Found a match, new m value is: 2
We are done checking vertex: 1
Found a match, new m value is: 3
We are done checking vertex: 2
Found a match, new m value is: 4
We are done checking vertex: 3
Found a match, new m value is: 5
We are done checking vertex: 4
We are done checking vertex: 5
We are done checking vertex: 6
We are done checking vertex: 7
Out of for loop
New maxM is 5
Resizing complete.
Dummy[0] set and maxM-M is 0 while curr typeNumber is 0
successfully initialized dummy
Looking at type: Z
We are done checking vertex: 0
We are done checking vertex: 1
We are done checking vertex: 2
We are done checking vertex: 3
We are done checking vertex: 4
Found a match, new m value is: 1
We are done checking vertex: 5
Found a match, new m value is: 2
We are done checking vertex: 6
Found a match, new m value is: 3
We are done checking vertex: 7
Out of for loop
Dummy[0] set and maxM-M is 2 while curr typeNumber is 1
successfully initialized dummy
Moving on with a maxM of 5
Starting to look at vertex collections of size 5
Looking at type 0
Did not find a match for vvcit, oldv set as 0
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Starting to look at vertex collections of size 4
We are 0
We are 0
Checking to see if we have cycles.
MatrixHelper has 1 vertices and 0 edges.
Starting to look at vertex collections of size 3
We are 0
Looking at type 1
Did not find a match for vvcit, oldv set as 1
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 1
typeMatrix is 5 by 2
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 0
typeMatrix is 5 by 2
Checking to see if we have cycles.
MatrixHelper has 2 vertices and 0 edges.
Starting to look at vertex collections of size 2
Looking at type 0
Did not find a match for vvcit, oldv set as 2
Got pair 0,d
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,b
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Target is 0, putting in a new vector<vColl>
Got pair 0,a
Looking at element 3 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 4 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Did not find a match for vvcit, oldv set as 3
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 2 and newType is 0
typeMatrix is 5 by 2
We have created an edge between 2 and 3
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 2 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Did not find a match for vvcit, oldv set as 4
Got pair 0,d
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 0,b
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Got pair 0,a
Looking at element 0 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
Looking at element 1 of our current vertex collection
Current phom is a
Current phom is b
Current phom is d
newM is 1 and newType is 0
typeMatrix is 5 by 2
Looking at type 1
Did not find a match for vvcit, oldv set as 5
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 1
typeMatrix is 5 by 2
Could not find the vertex, creating a new one
We have created an edge between 6 and 5
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 7 of our current vertex collection
Current phom is c
Current phom is e
newM is 2 and newType is 0
typeMatrix is 5 by 2
We have created an edge between 4 and 5
Found a match for our vvcit: 6
Got pair 1,e
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
newM is 1 and newType is 1
typeMatrix is 5 by 2
Got pair 1,c
Looking at element 5 of our current vertex collection
Current phom is c
Current phom is e
Looking at element 6 of our current vertex collection
Current phom is c
Current phom is e
newM is 1 and newType is 0
typeMatrix is 5 by 2
Checking to see if we have cycles.
MatrixHelper has 7 vertices and 3 edges.
Looking at vertex 3 which is connected to 2 and is colored 0
Looking at vertex 5 which is connected to 4 and is colored 0
Looking at vertex 5 which is connected to 6 and is colored 2
We are definite
GammaT vnames really are: a b c d e 
 T is 1-1, created T* and now checking if it's nondegen
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Our final Seen consists of:
p is right resolving!
State equivalences for 0 are : 0, 1, 
1 is unneccesary, skipping
State equiv contains: 0, 1, 
State equiv contains: 2, 
Naming the 0th vertex
Naming the 1th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
Looking at currE[1], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
We are trying to find the repn for 2
We found it! It's in the 1th equiv class
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
Starting the 1th round
Looking at currE[0], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 1
We found it! It's in the 0th equiv class
Printing Gamma Graph which has 5 vertices and 20 edges.
{0} 0 {0}uuuu/ + {0}uvwu/ {0}uuuw/ 0 0 
{1 2} {1 2}uuuu/ + {1 2}uuuw/ + {1 2}uuvv/ + {1 2}vwvv/ 0 {1 2}vwuw/ 0 0 
{3 4} {3 4}wuvv/ {3 4}wuuu/ + {3 4}wvwu/ 0 0 0 
{0 1} 0 0 0 {0 1}uuuu/ + {0 1}uuuw/ + {0 1}uuvv/ + {0 1}uvwu/ + {0 1}vwvv/ {0 1}vwuw/ 
{2 4} 0 0 0 {1 3}wuuu/ + {1 3}wuvv/ + {1 3}wvwu/ 0 
Printing Representation Matrix
{0} 0 uuuu/ + uvwu/ uuuw/ 0 0 
{1 2} uuuu/ + uuuw/ + uuvv/ + vwvv/ 0 vwuw/ 0 0 
{3 4} wuvv/ wuuu/ + wvwu/ 0 0 0 
{0 1} 0 0 0 uuuu/ + uuuw/ + uuvv/ + uvwu/ + vwvv/ vwuw/ 
{2 4} 0 0 0 wuuu/ + wuvv/ + wvwu/ 0 
Printing vertex homoms
{0} 0 0
{1 2} 0 0
{3 4} 0 0
{0 1} 0 0
{2 4} 0 0
Printing G Graph which has 2 vertices and 9 edges.
Y uuuu + uuvv + uvwu + vwvv uuuw + vwuw 
Z wuuu + wuvv + wvwu 0 
Checking if 0 and 3 are equivalent. We are at 0 of 2
Checking if 0 and 4 are equivalent. We are at 1 of 2
We are starting to look at trim((T*)^[2])*
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (5, 7) named 0103071003060412
Starting round 2
Removed Edge (5, 9) named 0103071004080116
Starting round 3
Removed Edge (5, 10) named 0103071004080215
Starting round 4
Removed Edge (11, 8) named 0104080903070514
Starting round 5
Removed Edge (12, 3) named 0205011305020509
Starting round 6
Removed Edge (17, 7) named 0205021003060412
Starting round 7
Removed Edge (17, 9) named 0205021004080116
Starting round 8
Removed Edge (17, 10) named 0205021004080215
Starting round 9
Removed Edge (18, 20) named 0205021506030710
Starting round 10
Removed Edge (18, 22) named 0205021507050113
Starting round 11
Removed Edge (18, 23) named 0205021507050210
Starting round 12
Removed Edge (6, 11) named 0306031101040809
Starting round 13
Removed Edge (7, 5) named 0306041201030710
Starting round 14
Removed Edge (7, 12) named 0306041202050113
Starting round 15
Removed Edge (7, 13) named 0306041202050116
Starting round 16
Removed Edge (7, 17) named 0306041202050210
Starting round 17
Removed Edge (7, 18) named 0306041202050215
Starting round 18
Removed Edge (8, 21) named 0307051406040809
Starting round 19
Removed Edge (10, 20) named 0408021506030710
Starting round 20
Removed Edge (10, 22) named 0408021507050113
Starting round 21
Removed Edge (10, 23) named 0408021507050210
Starting round 22
Removed Edge (1, 11) named 0501031101040809
Starting round 23
Removed Edge (2, 5) named 0501041201030710
Starting round 24
Removed Edge (2, 12) named 0501041202050113
Starting round 25
Removed Edge (2, 13) named 0501041202050116
Starting round 26
Removed Edge (2, 17) named 0501041202050210
Starting round 27
Removed Edge (2, 18) named 0501041202050215
Starting round 28
Removed Edge (3, 8) named 0502050903070514
Starting round 29
Removed Edge (4, 21) named 0502051406040809
Starting round 30
Removed Edge (20, 7) named 0603071003060412
Starting round 31
Removed Edge (20, 9) named 0603071004080116
Starting round 32
Removed Edge (20, 10) named 0603071004080215
Starting round 33
Removed Edge (21, 8) named 0604080903070514
Starting round 34
Removed Edge (22, 3) named 0705011305020509
Starting round 35
Removed Edge (23, 7) named 0705021003060412
Starting round 36
Removed Edge (23, 9) named 0705021004080116
Starting round 37
Removed Edge (23, 10) named 0705021004080215
Starting round 38
Removed Edge (14, 11) named 0801031101040809
Starting round 39
Removed Edge (14, 12) named 0801031102050113
Starting round 40
Removed Edge (14, 17) named 0801031102050210
Starting round 41
Removed Edge (15, 5) named 0801041201030710
Starting round 42
Removed Edge (15, 12) named 0801041202050113
Starting round 43
Removed Edge (15, 13) named 0801041202050116
Starting round 44
Removed Edge (15, 17) named 0801041202050210
Starting round 45
Removed Edge (15, 18) named 0801041202050215
Starting round 46
Removed Edge (16, 8) named 0802050903070514
Starting round 47
TiD has been created, starting to check if nondegen
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equivalences for 3 are : 3, 
State equivalences for 4 are : 4, 
State equivalences for 5 are : 5, 
State equivalences for 6 are : 6, 
State equivalences for 7 are : 7, 
State equivalences for 8 are : 8, 
State equivalences for 9 are : 9, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 
State equiv contains: 4, 
State equiv contains: 5, 
State equiv contains: 6, 
State equiv contains: 7, 
State equiv contains: 8, 
State equiv contains: 9, 
State equiv contains: 10, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Naming the 8th vertex
Naming the 9th vertex
Naming the 10th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 6
We found it! It's in the 6th equiv class
We are trying to find the repn for 7
We found it! It's in the 7th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 4th round
Looking at currE[0], which is 4
We are trying to find the repn for 6
We found it! It's in the 6th equiv class
We are trying to find the repn for 7
We found it! It's in the 7th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 5th round
Looking at currE[0], which is 5
We are trying to find the repn for 9
We found it! It's in the 9th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
We are trying to find the repn for 10
We found it! It's in the 10th equiv class
Starting the 6th round
Looking at currE[0], which is 6
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 7th round
Looking at currE[0], which is 7
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 8th round
Looking at currE[0], which is 8
We are trying to find the repn for 7
We found it! It's in the 7th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 9th round
Looking at currE[0], which is 9
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
Starting the 10th round
Looking at currE[0], which is 10
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 14, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equivalences for 3 are : 3, 4, 
4 is unneccesary, skipping
State equivalences for 5 are : 5, 
State equivalences for 6 are : 6, 
State equivalences for 7 are : 7, 
State equivalences for 8 are : 8, 9, 
9 is unneccesary, skipping
State equivalences for 10 are : 10, 12, 
State equivalences for 11 are : 11, 13, 
12 is unneccesary, skipping
13 is unneccesary, skipping
State equiv contains: 0, 14, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 4, 
State equiv contains: 5, 
State equiv contains: 6, 
State equiv contains: 7, 
State equiv contains: 8, 9, 
State equiv contains: 10, 12, 
State equiv contains: 11, 13, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Naming the 8th vertex
Naming the 9th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
Looking at currE[1], which is 14
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 4th equiv class
We are trying to find the repn for 12
We found it! It's in the 8th equiv class
We are trying to find the repn for 13
We found it! It's in the 9th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 6th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
Looking at currE[1], which is 4
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 6th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
Starting the 4th round
Looking at currE[0], which is 5
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 5th round
Looking at currE[0], which is 6
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 5
We found it! It's in the 4th equiv class
We are trying to find the repn for 12
We found it! It's in the 8th equiv class
We are trying to find the repn for 13
We found it! It's in the 9th equiv class
Starting the 6th round
Looking at currE[0], which is 7
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 8
We found it! It's in the 7th equiv class
Starting the 7th round
Looking at currE[0], which is 8
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 6th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
Looking at currE[1], which is 9
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 6th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
Starting the 8th round
Looking at currE[0], which is 10
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
Looking at currE[1], which is 12
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
Starting the 9th round
Looking at currE[0], which is 11
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Looking at currE[1], which is 13
We are trying to find the repn for 6
We found it! It's in the 5th equiv class
We are trying to find the repn for 14
We found it! It's in the 0th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Printing Gamma Graph which has 21 vertices and 70 edges.
{0 5 11} 0 {0 5 11}uvwuuuvv/ {0 5 11}uvwuuuuu/ {0 5 11}uvwuuuuw/ {0 5 11}uvwuvwvv/ {0 5 11}uvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 2} {1 2}uuvvuvwu/ 0 0 0 0 0 {1 2}uuvvuuuu/ {1 2}uuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3} {3}uuuuvwuw/ 0 0 0 {3}uuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{4} {4}uuuwwuuu/ + {4}uuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{6 7} {6 7}vwvvuvwu/ 0 0 0 0 0 {6 7}vwvvuuuu/ {6 7}vwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{8 9 10} 0 0 0 0 0 0 0 0 {8 9 10}vwuwwuvv/ {8 9 10}vwuwwuuu/ {8 9 10}vwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 
{12 17} {12 17}uuuuvwuw/ + {12 17}uuuuvwvv/ {12 17}uuuuuuvv/ 0 {12 17}uuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{13 18} {13 18}uuuwwuuu/ + {13 18}uuuwwvwu/ 0 0 0 0 0 0 0 {13 18}uuuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 
{14 15} {14 15}wuvvuvwu/ 0 0 0 0 0 0 {14 15}wuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16 22 23} 0 {16 22 23}wuuuuuvv/ 0 {16 22 23}wuuuuuuw/ {16 22 23}wuuuvwvv/ {16 22 23}wuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{19 20 21} 0 {19 20 21}wvwuuuvv/ {19 20 21}wvwuuuuu/ {19 20 21}wvwuuuuw/ {19 20 21}wvwuvwvv/ {19 20 21}wvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 {0}uuuwwuuu/ + {0}uuuwwuvv/ 0 0 {0}uuuwwvwu/ 0 0 0 0 0 0 
{1 14} 0 0 0 0 0 0 0 0 0 0 0 {1 14}wuuuuuuw/ 0 0 0 {1 14}wuuuuuvv/ 0 0 0 {1 14}wuuuvwuw/ {1 14}wuuuvwvv/ 
{2 15} 0 0 0 0 0 0 0 0 0 0 0 {2 15}wuvvuuuw/ + {2 15}wuvvuvwu/ 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 0 {3 4}wvwuuuuw/ 0 0 0 0 {3 4}wvwuuuuu/ {3 4}wvwuuuvv/ 0 {3 4}wvwuvwuw/ {3 4}wvwuvwvv/ 
{5} 0 0 0 0 0 0 0 0 0 0 0 {4 16}uuvvuvwu/ 0 0 0 0 {4 16}uuvvuuuu/ 0 0 0 0 
{6} 0 0 0 0 0 0 0 0 0 0 0 {5}uuuuuuuw/ 0 0 0 {5}uuuuuuvv/ 0 0 0 {5}uuuuvwuw/ {5}uuuuvwvv/ 
{7 20} 0 0 0 0 0 0 0 0 0 0 0 {6}uuvvuuuw/ 0 0 0 0 {6}uuvvuuuu/ 0 {6}uuvvuvwu/ 0 0 
{8 11} 0 0 0 0 0 0 0 0 0 0 0 {7 20}uvwuuuuw/ 0 0 0 0 {7 20}uvwuuuuu/ {7 20}uvwuuuvv/ 0 {7 20}uvwuvwuw/ {7 20}uvwuvwvv/ 
{9 22} 0 0 0 0 0 0 0 0 0 0 0 0 {8 11}vwuwwuuu/ {8 11}vwuwwuvv/ {8 11}vwuwwvwu/ 0 0 0 0 0 0 
{10 23} 0 0 0 0 0 0 0 0 0 0 0 {8 21}vwvvuuuw/ 0 0 0 0 {8 21}vwvvuuuu/ 0 {8 21}vwvvuvwu/ 0 0 
Printing Representation Matrix
{0 5 11} 0 uvwuuuvv/ uvwuuuuu/ uvwuuuuw/ uvwuvwvv/ uvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 2} uuvvuvwu/ 0 0 0 0 0 uuvvuuuu/ uuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3} uuuuvwuw/ 0 0 0 uuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{4} uuuwwuuu/ + uuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{6 7} vwvvuvwu/ 0 0 0 0 0 vwvvuuuu/ vwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{8 9 10} 0 0 0 0 0 0 0 0 vwuwwuvv/ vwuwwuuu/ vwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 
{12 17} uuuuvwuw/ + uuuuvwvv/ uuuuuuvv/ 0 uuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{13 18} uuuwwuuu/ + uuuwwvwu/ 0 0 0 0 0 0 0 uuuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 
{14 15} wuvvuvwu/ 0 0 0 0 0 0 wuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16 22 23} 0 wuuuuuvv/ 0 wuuuuuuw/ wuuuvwvv/ wuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{19 20 21} 0 wvwuuuvv/ wvwuuuuu/ wvwuuuuw/ wvwuvwvv/ wvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 uuuwwuuu/ + uuuwwuvv/ 0 0 uuuwwvwu/ 0 0 0 0 0 0 
{1 14} 0 0 0 0 0 0 0 0 0 0 0 wuuuuuuw/ 0 0 0 wuuuuuvv/ 0 0 0 wuuuvwuw/ wuuuvwvv/ 
{2 15} 0 0 0 0 0 0 0 0 0 0 0 wuvvuuuw/ + wuvvuvwu/ 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 0 wvwuuuuw/ 0 0 0 0 wvwuuuuu/ wvwuuuvv/ 0 wvwuvwuw/ wvwuvwvv/ 
{5} 0 0 0 0 0 0 0 0 0 0 0 uuvvuvwu/ 0 0 0 0 uuvvuuuu/ 0 0 0 0 
{6} 0 0 0 0 0 0 0 0 0 0 0 uuuuuuuw/ 0 0 0 uuuuuuvv/ 0 0 0 uuuuvwuw/ uuuuvwvv/ 
{7 20} 0 0 0 0 0 0 0 0 0 0 0 uuvvuuuw/ 0 0 0 0 uuvvuuuu/ 0 uuvvuvwu/ 0 0 
{8 11} 0 0 0 0 0 0 0 0 0 0 0 uvwuuuuw/ 0 0 0 0 uvwuuuuu/ uvwuuuvv/ 0 uvwuvwuw/ uvwuvwvv/ 
{9 22} 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuuu/ vwuwwuvv/ vwuwwvwu/ 0 0 0 0 0 0 
{10 23} 0 0 0 0 0 0 0 0 0 0 0 vwvvuuuw/ 0 0 0 0 vwvvuuuu/ 0 vwvvuvwu/ 0 0 
Printing vertex homoms
{0 5 11} 0 0
{1 2} 0 0
{3} 0 0
{4} 0 0
{6 7} 0 0
{8 9 10} 0 0
{12 17} 0 0
{13 18} 0 0
{14 15} 0 0
{16 22 23} 0 0
{19 20 21} 0 0
{0} 0 0
{1 14} 0 0
{2 15} 0 0
{3 4} 0 0
{5} 0 0
{6} 0 0
{7 20} 0 0
{8 11} 0 0
{9 22} 0 0
{10 23} 0 0
Printing G Graph which has 9 vertices and 48 edges.
uuuu uuuuuuuu uuuuuuuw uuuuuuvv uuuuuvwu uuuuvwuw uuuuvwvv 0 0 0 
uuuw 0 0 0 0 0 0 uuuwwuuu uuuwwuvv uuuwwvwu 
uuvv uuvvuuuu uuvvuuuw uuvvuuvv uuvvuvwu uuvvvwuw uuvvvwvv 0 0 0 
uvwu uvwuuuuu uvwuuuuw uvwuuuvv uvwuuvwu uvwuvwuw uvwuvwvv 0 0 0 
vwuw 0 0 0 0 0 0 vwuwwuuu vwuwwuvv vwuwwvwu 
vwvv vwvvuuuu vwvvuuuw vwvvuuvv vwvvuvwu vwvvvwuw vwvvvwvv 0 0 0 
wuuu wuuuuuuu wuuuuuuw wuuuuuvv wuuuuvwu wuuuvwuw wuuuvwvv 0 0 0 
wuvv wuvvuuuu wuvvuuuw wuvvuuvv wuvvuvwu wuvvvwuw wuvvvwvv 0 0 0 
wvwu wvwuuuuu wvwuuuuw wvwuuuvv wvwuuvwu wvwuvwuw wvwuvwvv 0 0 0 
Checking if 0 and 11 are equivalent. We are at 0 of 10
Checking if 0 and 12 are equivalent. We are at 1 of 10
Checking if 0 and 13 are equivalent. We are at 2 of 10
Checking if 0 and 14 are equivalent. We are at 3 of 10
Checking if 0 and 15 are equivalent. We are at 4 of 10
Checking if 0 and 16 are equivalent. We are at 5 of 10
Checking if 0 and 17 are equivalent. We are at 6 of 10
Checking if 0 and 18 are equivalent. We are at 7 of 10
Checking if 0 and 19 are equivalent. We are at 8 of 10
Checking if 0 and 20 are equivalent. We are at 9 of 10
We are starting to look at trim((T*)^[3])*
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (0, 3) named 010306130501031101040809
Starting round 2
Removed Edge (8, 10) named 010306130501041201030710
Starting round 3
Removed Edge (8, 12) named 010306130501041202050113
Starting round 4
Removed Edge (8, 13) named 010306130501041202050116
Starting round 5
Removed Edge (8, 14) named 010306130501041202050210
Starting round 6
Removed Edge (8, 15) named 010306130501041202050215
Starting round 7
Removed Edge (16, 19) named 010306130502050903070514
Starting round 8
Removed Edge (22, 25) named 010306130502051406040809
Starting round 9
Removed Edge (28, 31) named 010307100306031101040809
Starting round 10
Removed Edge (36, 37) named 010307100306041201030613
Starting round 11
Removed Edge (36, 38) named 010307100306041201030710
Starting round 12
Removed Edge (36, 39) named 010307100306041201040809
Starting round 13
Removed Edge (36, 40) named 010307100306041202050113
Starting round 14
Removed Edge (36, 41) named 010307100306041202050116
Starting round 15
Removed Edge (36, 42) named 010307100306041202050210
Starting round 16
Removed Edge (36, 43) named 010307100306041202050215
Starting round 17
Starting round 18
Removed Edge (43, 46) named 010307100307051406040809
Starting round 19
Removed Edge (49, 50) named 010307100408011608010311
Starting round 20
Removed Edge (49, 51) named 010307100408011608010412
Starting round 21
Removed Edge (49, 52) named 010307100408011608020509
Starting round 22
Starting round 23
Removed Edge (52, 53) named 010307100408021506030613
Starting round 24
Removed Edge (52, 54) named 010307100408021506030710
Starting round 25
Removed Edge (52, 55) named 010307100408021506040809
Starting round 26
Removed Edge (52, 56) named 010307100408021507050113
Starting round 27
Removed Edge (52, 57) named 010307100408021507050210
Starting round 28
Starting round 29
Removed Edge (57, 29) named 010408090306031101030613
Starting round 30
Removed Edge (57, 30) named 010408090306031101030710
Starting round 31
Removed Edge (57, 31) named 010408090306031101040809
Starting round 32
Removed Edge (58, 37) named 010408090306041201030710
Starting round 33
Removed Edge (58, 39) named 010408090306041202050113
Starting round 34
Removed Edge (58, 40) named 010408090306041202050116
Starting round 35
Removed Edge (58, 41) named 010408090306041202050210
Starting round 36
Removed Edge (58, 42) named 010408090306041202050215
Starting round 37
Removed Edge (59, 44) named 010408090307051406030613
Starting round 38
Removed Edge (59, 45) named 010408090307051406030710
Starting round 39
Removed Edge (59, 46) named 010408090307051406040809
Starting round 40
Removed Edge (59, 47) named 010408090307051407050113
Starting round 41
Removed Edge (59, 48) named 010408090307051407050210
Starting round 42
Starting round 43
Removed Edge (60, 53) named 010408090408021506030710
Starting round 44
Removed Edge (60, 55) named 010408090408021507050113
Starting round 45
Removed Edge (60, 56) named 010408090408021507050210
Starting round 46
Removed Edge (61, 3) named 020501130501031101040809
Starting round 47
Removed Edge (61, 5) named 020501130501031102050116
Starting round 48
Removed Edge (61, 7) named 020501130501031102050215
Starting round 49
Removed Edge (62, 10) named 020501130501041201030710
Starting round 50
Removed Edge (62, 12) named 020501130501041202050113
Starting round 51
Removed Edge (62, 13) named 020501130501041202050116
Starting round 52
Removed Edge (62, 14) named 020501130501041202050210
Starting round 53
Removed Edge (62, 15) named 020501130501041202050215
Starting round 54
Removed Edge (63, 17) named 020501130502050903060311
Starting round 55
Removed Edge (63, 18) named 020501130502050903060412
Starting round 56
Removed Edge (63, 19) named 020501130502050903070514
Starting round 57
Removed Edge (63, 20) named 020501130502050904080116
Starting round 58
Removed Edge (63, 21) named 020501130502050904080215
Starting round 59
Starting round 60
Removed Edge (63, 25) named 020501130502051406040809
Starting round 61
Removed Edge (64, 67) named 020501160801031101040809
Starting round 62
Removed Edge (64, 68) named 020501160801031102050113
Starting round 63
Removed Edge (64, 70) named 020501160801031102050210
Starting round 64
Removed Edge (72, 74) named 020501160801041201030710
Starting round 65
Removed Edge (72, 76) named 020501160801041202050113
Starting round 66
Removed Edge (72, 77) named 020501160801041202050116
Starting round 67
Removed Edge (72, 78) named 020501160801041202050210
Starting round 68
Removed Edge (72, 79) named 020501160801041202050215
Starting round 69
Removed Edge (80, 83) named 020501160802050903070514
Starting round 70
Removed Edge (86, 31) named 020502100306031101040809
Starting round 71
Removed Edge (87, 36) named 020502100306041201030613
Starting round 72
Removed Edge (87, 37) named 020502100306041201030710
Starting round 73
Removed Edge (87, 38) named 020502100306041201040809
Starting round 74
Removed Edge (87, 39) named 020502100306041202050113
Starting round 75
Removed Edge (87, 40) named 020502100306041202050116
Starting round 76
Removed Edge (87, 41) named 020502100306041202050210
Starting round 77
Removed Edge (87, 42) named 020502100306041202050215
Starting round 78
Starting round 79
Removed Edge (87, 46) named 020502100307051406040809
Starting round 80
Removed Edge (88, 49) named 020502100408011608010311
Starting round 81
Removed Edge (88, 50) named 020502100408011608010412
Starting round 82
Removed Edge (88, 51) named 020502100408011608020509
Starting round 83
Starting round 84
Removed Edge (88, 52) named 020502100408021506030613
Starting round 85
Removed Edge (88, 53) named 020502100408021506030710
Starting round 86
Removed Edge (88, 54) named 020502100408021506040809
Starting round 87
Removed Edge (88, 55) named 020502100408021507050113
Starting round 88
Removed Edge (88, 56) named 020502100408021507050210
Starting round 89
Starting round 90
Removed Edge (93, 94) named 020502150603071003060311
Starting round 91
Removed Edge (93, 95) named 020502150603071003060412
Starting round 92
Removed Edge (93, 96) named 020502150603071003070514
Starting round 93
Removed Edge (93, 97) named 020502150603071004080116
Starting round 94
Removed Edge (93, 98) named 020502150603071004080215
Starting round 95
Starting round 96
Removed Edge (98, 101) named 020502150604080903070514
Starting round 97
Removed Edge (104, 105) named 020502150705011305010311
Starting round 98
Removed Edge (104, 106) named 020502150705011305010412
Starting round 99
Removed Edge (104, 107) named 020502150705011305020509
Starting round 100
Removed Edge (104, 108) named 020502150705011305020514
Starting round 101
Starting round 102
Removed Edge (108, 109) named 020502150705021003060311
Starting round 103
Removed Edge (108, 110) named 020502150705021003060412
Starting round 104
Removed Edge (108, 111) named 020502150705021003070514
Starting round 105
Removed Edge (108, 112) named 020502150705021004080116
Starting round 106
Removed Edge (108, 113) named 020502150705021004080215
Starting round 107
Starting round 108
Removed Edge (29, 8) named 030603110103061305010412
Starting round 109
Removed Edge (31, 57) named 030603110104080903060311
Starting round 110
Removed Edge (31, 58) named 030603110104080903060412
Starting round 111
Removed Edge (31, 59) named 030603110104080904080116
Starting round 112
Removed Edge (31, 60) named 030603110104080904080215
Starting round 113
Starting round 114
Removed Edge (36, 28) named 030604120103071003060311
Starting round 115
Removed Edge (36, 42) named 030604120103071003070514
Starting round 116
Starting round 117
Removed Edge (37, 59) named 030604120205011305010311
Starting round 118
Removed Edge (37, 60) named 030604120205011305010412
Starting round 119
Removed Edge (37, 61) named 030604120205011305020514
Starting round 120
Starting round 121
Removed Edge (37, 61) named 030604120205011608010311
Starting round 122
Removed Edge (37, 69) named 030604120205011608010412
Starting round 123
Removed Edge (37, 77) named 030604120205011608020509
Starting round 124
Starting round 125
Removed Edge (37, 82) named 030604120205021003060311
Starting round 126
Removed Edge (37, 83) named 030604120205021003070514
Starting round 127
Starting round 128
Removed Edge (37, 83) named 030604120205021506030613
Starting round 129
Removed Edge (37, 93) named 030604120205021506040809
Starting round 130
Starting round 131
Removed Edge (38, 84) named 030705140603061305010412
Starting round 132
Removed Edge (39, 88) named 030705140603071003060412
Starting round 133
Removed Edge (39, 90) named 030705140603071004080116
Starting round 134
Removed Edge (39, 91) named 030705140603071004080215
Starting round 135
Removed Edge (40, 93) named 030705140604080903060311
Starting round 136
Removed Edge (40, 94) named 030705140604080903060412
Starting round 137
Removed Edge (40, 95) named 030705140604080903070514
Starting round 138
Removed Edge (40, 96) named 030705140604080904080116
Starting round 139
Removed Edge (40, 97) named 030705140604080904080215
Starting round 140
Starting round 141
Removed Edge (40, 99) named 030705140705011305020509
Starting round 142
Removed Edge (41, 102) named 030705140705021003060412
Starting round 143
Removed Edge (41, 104) named 030705140705021004080116
Starting round 144
Removed Edge (41, 105) named 030705140705021004080215
Starting round 145
Removed Edge (42, 60) named 040801160801031101040809
Starting round 146
Starting round 147
Removed Edge (42, 60) named 040801160801031102050113
Starting round 148
Starting round 149
Removed Edge (42, 61) named 040801160801031102050210
Starting round 150
Starting round 151
Removed Edge (43, 64) named 040801160801041201030710
Starting round 152
Starting round 153
Removed Edge (43, 65) named 040801160801041202050113
Starting round 154
Starting round 155
Removed Edge (43, 65) named 040801160801041202050116
Starting round 156
Starting round 157
Removed Edge (43, 65) named 040801160801041202050210
Starting round 158
Starting round 159
Removed Edge (43, 65) named 040801160801041202050215
Starting round 160
Starting round 161
Removed Edge (44, 68) named 040801160802050903070514
Starting round 162
Starting round 163
Removed Edge (46, 77) named 040802150603071003060311
Starting round 164
Removed Edge (46, 78) named 040802150603071003060412
Starting round 165
Removed Edge (46, 79) named 040802150603071003070514
Starting round 166
Removed Edge (46, 80) named 040802150603071004080116
Starting round 167
Removed Edge (46, 81) named 040802150603071004080215
Starting round 168
Starting round 169
Removed Edge (46, 84) named 040802150604080903070514
Starting round 170
Removed Edge (47, 87) named 040802150705011305010311
Starting round 171
Removed Edge (47, 88) named 040802150705011305010412
Starting round 172
Removed Edge (47, 89) named 040802150705011305020509
Starting round 173
Removed Edge (47, 90) named 040802150705011305020514
Starting round 174
Starting round 175
Removed Edge (47, 90) named 040802150705021003060311
Starting round 176
Removed Edge (47, 91) named 040802150705021003060412
Starting round 177
Removed Edge (47, 92) named 040802150705021003070514
Starting round 178
Removed Edge (47, 93) named 040802150705021004080116
Starting round 179
Removed Edge (47, 94) named 040802150705021004080215
Starting round 180
Starting round 181
Removed Edge (1, 8) named 050103110103061305010412
Starting round 182
Removed Edge (3, 47) named 050103110104080903060311
Starting round 183
Removed Edge (3, 48) named 050103110104080903060412
Starting round 184
Removed Edge (3, 49) named 050103110104080904080116
Starting round 185
Removed Edge (3, 50) named 050103110104080904080215
Starting round 186
Starting round 187
Removed Edge (9, 27) named 050104120103071003060311
Starting round 188
Removed Edge (9, 36) named 050104120103071003070514
Starting round 189
Starting round 190
Removed Edge (10, 49) named 050104120205011305010311
Starting round 191
Removed Edge (10, 50) named 050104120205011305010412
Starting round 192
Removed Edge (10, 51) named 050104120205011305020514
Starting round 193
Starting round 194
Removed Edge (10, 51) named 050104120205011608010311
Starting round 195
Removed Edge (10, 56) named 050104120205011608010412
Starting round 196
Removed Edge (10, 59) named 050104120205011608020509
Starting round 197
Starting round 198
Removed Edge (10, 63) named 050104120205021003060311
Starting round 199
Removed Edge (10, 64) named 050104120205021003070514
Starting round 200
Starting round 201
Removed Edge (10, 64) named 050104120205021506030613
Starting round 202
Removed Edge (10, 74) named 050104120205021506040809
Starting round 203
Starting round 204
Removed Edge (11, 23) named 050205090306031101030613
Starting round 205
Removed Edge (11, 24) named 050205090306031101030710
Starting round 206
Removed Edge (13, 32) named 050205090307051406030613
Starting round 207
Removed Edge (13, 33) named 050205090307051406030710
Starting round 208
Removed Edge (13, 34) named 050205090307051407050113
Starting round 209
Removed Edge (13, 35) named 050205090307051407050210
Starting round 210
Starting round 211
Removed Edge (16, 64) named 050205140603061305010412
Starting round 212
Removed Edge (17, 68) named 050205140603071003060412
Starting round 213
Starting round 214
Removed Edge (17, 69) named 050205140603071004080116
Starting round 215
Starting round 216
Removed Edge (17, 69) named 050205140603071004080215
Starting round 217
Starting round 218
Removed Edge (18, 70) named 050205140604080903060311
Starting round 219
Removed Edge (18, 71) named 050205140604080903060412
Starting round 220
Removed Edge (18, 72) named 050205140604080903070514
Starting round 221
Starting round 222
Removed Edge (18, 72) named 050205140604080904080116
Starting round 223
Removed Edge (18, 73) named 050205140604080904080215
Starting round 224
Starting round 225
Removed Edge (18, 75) named 050205140705011305020509
Starting round 226
Starting round 227
Removed Edge (19, 77) named 050205140705021003060412
Starting round 228
Starting round 229
Removed Edge (19, 78) named 050205140705021004080116
Starting round 230
Starting round 231
Removed Edge (19, 78) named 050205140705021004080215
Starting round 232
Starting round 233
Removed Edge (69, 21) named 060408090306031101030613
Starting round 234
Removed Edge (69, 22) named 060408090306031101030710
Starting round 235
Removed Edge (73, 4) named 070501130501031102050116
Starting round 236
Removed Edge (73, 6) named 070501130501031102050215
Starting round 237
Removed Edge (47, 7) named 080103110103061305010412
Starting round 238
Removed Edge (47, 15) named 080103110103061305020514
Starting round 239
Removed Edge (52, 15) named 080104120103061305020514
Starting round 240
Removed Edge (55, 21) named 080205090306031101030613
Starting round 241
Removed Edge (55, 22) named 080205090306031101030710
Starting round 242
We have deleted 45 from G
We have deleted 41 from G
We have deleted 40 from G
We have deleted 38 from G
We have deleted 36 from G
We have deleted 33 from G
We have deleted 30 from G
We have deleted 29 from G
We have deleted 28 from G
We have deleted 26 from G
We have deleted 18 from G
We have deleted 14 from G
We have deleted 13 from G
We have deleted 11 from G
We have deleted 3 from G
We have deleted 0 from G
TiD has been created, starting to check if nondegen
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equivalences for 3 are : 3, 
State equivalences for 4 are : 4, 
State equivalences for 5 are : 5, 26, 
State equivalences for 6 are : 6, 
State equivalences for 7 are : 7, 
State equivalences for 8 are : 8, 
State equivalences for 9 are : 9, 
State equivalences for 10 are : 10, 
State equivalences for 11 are : 11, 
State equivalences for 12 are : 12, 
State equivalences for 13 are : 13, 
State equivalences for 14 are : 14, 
State equivalences for 15 are : 15, 
State equivalences for 16 are : 16, 
State equivalences for 17 are : 17, 
State equivalences for 18 are : 18, 
State equivalences for 19 are : 19, 
State equivalences for 20 are : 20, 
State equivalences for 21 are : 21, 
State equivalences for 22 are : 22, 
State equivalences for 23 are : 23, 
State equivalences for 24 are : 24, 
State equivalences for 25 are : 25, 
26 is unneccesary, skipping
State equivalences for 27 are : 27, 
State equivalences for 28 are : 28, 
State equivalences for 29 are : 29, 
State equivalences for 30 are : 30, 
State equivalences for 31 are : 31, 
State equivalences for 32 are : 32, 
State equivalences for 33 are : 33, 
State equivalences for 34 are : 34, 
State equiv contains: 0, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 
State equiv contains: 4, 
State equiv contains: 5, 26, 
State equiv contains: 6, 
State equiv contains: 7, 
State equiv contains: 8, 
State equiv contains: 9, 
State equiv contains: 10, 
State equiv contains: 11, 
State equiv contains: 12, 
State equiv contains: 13, 
State equiv contains: 14, 
State equiv contains: 15, 
State equiv contains: 16, 
State equiv contains: 17, 
State equiv contains: 18, 
State equiv contains: 19, 
State equiv contains: 20, 
State equiv contains: 21, 
State equiv contains: 22, 
State equiv contains: 23, 
State equiv contains: 24, 
State equiv contains: 25, 
State equiv contains: 27, 
State equiv contains: 28, 
State equiv contains: 29, 
State equiv contains: 30, 
State equiv contains: 31, 
State equiv contains: 32, 
State equiv contains: 33, 
State equiv contains: 34, 
State equiv contains: 35, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Naming the 8th vertex
Naming the 9th vertex
Naming the 10th vertex
Naming the 11th vertex
Naming the 12th vertex
Naming the 13th vertex
Naming the 14th vertex
Naming the 15th vertex
Naming the 16th vertex
Naming the 17th vertex
Naming the 18th vertex
Naming the 19th vertex
Naming the 20th vertex
Naming the 21th vertex
Naming the 22th vertex
Naming the 23th vertex
Naming the 24th vertex
Naming the 25th vertex
Naming the 26th vertex
Naming the 27th vertex
Naming the 28th vertex
Naming the 29th vertex
Naming the 30th vertex
Naming the 31th vertex
Naming the 32th vertex
Naming the 33th vertex
Naming the 34th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 7th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 14
We found it! It's in the 14th equiv class
We are trying to find the repn for 10
We found it! It's in the 10th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 19
We found it! It's in the 19th equiv class
We are trying to find the repn for 18
We found it! It's in the 18th equiv class
We are trying to find the repn for 27
We found it! It's in the 26th equiv class
We are trying to find the repn for 26
We found it! It's in the 5th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 23
We found it! It's in the 23th equiv class
We are trying to find the repn for 20
We found it! It's in the 20th equiv class
We are trying to find the repn for 28
We found it! It's in the 27th equiv class
Starting the 4th round
Looking at currE[0], which is 4
We are trying to find the repn for 6
We found it! It's in the 6th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
Starting the 5th round
Looking at currE[0], which is 5
We are trying to find the repn for 12
We found it! It's in the 12th equiv class
We are trying to find the repn for 13
We found it! It's in the 13th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Looking at currE[1], which is 26
We are trying to find the repn for 12
We found it! It's in the 12th equiv class
We are trying to find the repn for 13
We found it! It's in the 13th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 6th round
Looking at currE[0], which is 6
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 17
We found it! It's in the 17th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 7th round
Looking at currE[0], which is 7
We are trying to find the repn for 9
We found it! It's in the 9th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
Starting the 8th round
Looking at currE[0], which is 8
We are trying to find the repn for 30
We found it! It's in the 29th equiv class
We are trying to find the repn for 31
We found it! It's in the 30th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 9th round
Looking at currE[0], which is 9
We are trying to find the repn for 35
We found it! It's in the 34th equiv class
We are trying to find the repn for 34
We found it! It's in the 33th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 10th round
Looking at currE[0], which is 10
We are trying to find the repn for 12
We found it! It's in the 12th equiv class
We are trying to find the repn for 13
We found it! It's in the 13th equiv class
We are trying to find the repn for 11
We found it! It's in the 11th equiv class
Starting the 11th round
Looking at currE[0], which is 11
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
We are trying to find the repn for 7
We found it! It's in the 7th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 14
We found it! It's in the 14th equiv class
We are trying to find the repn for 10
We found it! It's in the 10th equiv class
Starting the 12th round
Looking at currE[0], which is 12
We are trying to find the repn for 19
We found it! It's in the 19th equiv class
We are trying to find the repn for 18
We found it! It's in the 18th equiv class
We are trying to find the repn for 27
We found it! It's in the 26th equiv class
We are trying to find the repn for 26
We found it! It's in the 5th equiv class
Starting the 13th round
Looking at currE[0], which is 13
We are trying to find the repn for 23
We found it! It's in the 23th equiv class
We are trying to find the repn for 20
We found it! It's in the 20th equiv class
We are trying to find the repn for 28
We found it! It's in the 27th equiv class
Starting the 14th round
Looking at currE[0], which is 14
We are trying to find the repn for 16
We found it! It's in the 16th equiv class
We are trying to find the repn for 17
We found it! It's in the 17th equiv class
We are trying to find the repn for 15
We found it! It's in the 15th equiv class
Starting the 15th round
Looking at currE[0], which is 15
We are trying to find the repn for 30
We found it! It's in the 29th equiv class
We are trying to find the repn for 31
We found it! It's in the 30th equiv class
We are trying to find the repn for 29
We found it! It's in the 28th equiv class
We are trying to find the repn for 33
We found it! It's in the 32th equiv class
We are trying to find the repn for 32
We found it! It's in the 31th equiv class
Starting the 16th round
Looking at currE[0], which is 16
We are trying to find the repn for 35
We found it! It's in the 34th equiv class
We are trying to find the repn for 34
We found it! It's in the 33th equiv class
We are trying to find the repn for 25
We found it! It's in the 25th equiv class
We are trying to find the repn for 24
We found it! It's in the 24th equiv class
Starting the 17th round
Looking at currE[0], which is 17
We are trying to find the repn for 22
We found it! It's in the 22th equiv class
We are trying to find the repn for 21
We found it! It's in the 21th equiv class
Starting the 18th round
Looking at currE[0], which is 18
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 19th round
Looking at currE[0], which is 19
We are trying to find the repn for 9
We found it! It's in the 9th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
Starting the 20th round
Looking at currE[0], which is 20
We are trying to find the repn for 22
We found it! It's in the 22th equiv class
We are trying to find the repn for 21
We found it! It's in the 21th equiv class
Starting the 21th round
Looking at currE[0], which is 21
We are trying to find the repn for 4
We found it! It's in the 4th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 14
We found it! It's in the 14th equiv class
We are trying to find the repn for 10
We found it! It's in the 10th equiv class
Starting the 22th round
Looking at currE[0], which is 22
We are trying to find the repn for 23
We found it! It's in the 23th equiv class
We are trying to find the repn for 20
We found it! It's in the 20th equiv class
We are trying to find the repn for 28
We found it! It's in the 27th equiv class
Starting the 23th round
Looking at currE[0], which is 23
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 24th round
Looking at currE[0], which is 24
We are trying to find the repn for 12
We found it! It's in the 12th equiv class
We are trying to find the repn for 13
We found it! It's in the 13th equiv class
We are trying to find the repn for 11
We found it! It's in the 11th equiv class
Starting the 25th round
Looking at currE[0], which is 25
We are trying to find the repn for 16
We found it! It's in the 16th equiv class
We are trying to find the repn for 17
We found it! It's in the 17th equiv class
We are trying to find the repn for 15
We found it! It's in the 15th equiv class
Starting the 26th round
Looking at currE[0], which is 27
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 27th round
Looking at currE[0], which is 28
We are trying to find the repn for 30
We found it! It's in the 29th equiv class
We are trying to find the repn for 31
We found it! It's in the 30th equiv class
We are trying to find the repn for 29
We found it! It's in the 28th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 28th round
Looking at currE[0], which is 29
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 29th round
Looking at currE[0], which is 30
We are trying to find the repn for 6
We found it! It's in the 6th equiv class
We are trying to find the repn for 5
We found it! It's in the 5th equiv class
Starting the 30th round
Looking at currE[0], which is 31
We are trying to find the repn for 9
We found it! It's in the 9th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
Starting the 31th round
Looking at currE[0], which is 32
We are trying to find the repn for 12
We found it! It's in the 12th equiv class
We are trying to find the repn for 13
We found it! It's in the 13th equiv class
We are trying to find the repn for 11
We found it! It's in the 11th equiv class
Starting the 32th round
Looking at currE[0], which is 33
We are trying to find the repn for 16
We found it! It's in the 16th equiv class
We are trying to find the repn for 17
We found it! It's in the 17th equiv class
We are trying to find the repn for 15
We found it! It's in the 15th equiv class
Starting the 33th round
Looking at currE[0], which is 34
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
Starting the 34th round
Looking at currE[0], which is 35
We are trying to find the repn for 9
We found it! It's in the 9th equiv class
We are trying to find the repn for 8
We found it! It's in the 8th equiv class
Our final Seen consists of:
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
This G edge has 0 matches
p is right resolving!
State equivalences for 0 are : 0, 47, 
State equivalences for 1 are : 1, 
State equivalences for 2 are : 2, 
State equivalences for 3 are : 3, 4, 
4 is unneccesary, skipping
State equivalences for 5 are : 5, 6, 
6 is unneccesary, skipping
State equivalences for 7 are : 7, 48, 
State equivalences for 8 are : 8, 
State equivalences for 9 are : 9, 
State equivalences for 10 are : 10, 49, 
State equivalences for 11 are : 11, 43, 
State equivalences for 12 are : 12, 16, 
State equivalences for 13 are : 13, 17, 
State equivalences for 14 are : 14, 18, 
State equivalences for 15 are : 15, 
16 is unneccesary, skipping
17 is unneccesary, skipping
18 is unneccesary, skipping
State equivalences for 19 are : 19, 50, 
State equivalences for 20 are : 20, 
State equivalences for 21 are : 21, 
State equivalences for 22 are : 22, 
State equivalences for 23 are : 23, 
State equivalences for 24 are : 24, 
State equivalences for 25 are : 25, 
State equivalences for 26 are : 26, 
State equivalences for 27 are : 27, 
State equivalences for 28 are : 28, 29, 
29 is unneccesary, skipping
State equivalences for 30 are : 30, 31, 
31 is unneccesary, skipping
State equivalences for 32 are : 32, 33, 
33 is unneccesary, skipping
State equivalences for 34 are : 34, 40, 
State equivalences for 35 are : 35, 41, 
State equivalences for 36 are : 36, 42, 
State equivalences for 37 are : 37, 46, 
State equivalences for 38 are : 38, 45, 
State equivalences for 39 are : 39, 51, 
40 is unneccesary, skipping
41 is unneccesary, skipping
42 is unneccesary, skipping
43 is unneccesary, skipping
State equivalences for 44 are : 44, 52, 
45 is unneccesary, skipping
46 is unneccesary, skipping
47 is unneccesary, skipping
48 is unneccesary, skipping
49 is unneccesary, skipping
50 is unneccesary, skipping
51 is unneccesary, skipping
State equiv contains: 0, 47, 
State equiv contains: 1, 
State equiv contains: 2, 
State equiv contains: 3, 4, 
State equiv contains: 5, 6, 
State equiv contains: 7, 48, 
State equiv contains: 8, 
State equiv contains: 9, 
State equiv contains: 10, 49, 
State equiv contains: 11, 43, 
State equiv contains: 12, 16, 
State equiv contains: 13, 17, 
State equiv contains: 14, 18, 
State equiv contains: 15, 
State equiv contains: 19, 50, 
State equiv contains: 20, 
State equiv contains: 21, 
State equiv contains: 22, 
State equiv contains: 23, 
State equiv contains: 24, 
State equiv contains: 25, 
State equiv contains: 26, 
State equiv contains: 27, 
State equiv contains: 28, 29, 
State equiv contains: 30, 31, 
State equiv contains: 32, 33, 
State equiv contains: 34, 40, 
State equiv contains: 35, 41, 
State equiv contains: 36, 42, 
State equiv contains: 37, 46, 
State equiv contains: 38, 45, 
State equiv contains: 39, 51, 
State equiv contains: 44, 52, 
Naming the 0th vertex
Naming the 1th vertex
Naming the 2th vertex
Naming the 3th vertex
Naming the 4th vertex
Naming the 5th vertex
Naming the 6th vertex
Naming the 7th vertex
Naming the 8th vertex
Naming the 9th vertex
Naming the 10th vertex
Naming the 11th vertex
Naming the 12th vertex
Naming the 13th vertex
Naming the 14th vertex
Naming the 15th vertex
Naming the 16th vertex
Naming the 17th vertex
Naming the 18th vertex
Naming the 19th vertex
Naming the 20th vertex
Naming the 21th vertex
Naming the 22th vertex
Naming the 23th vertex
Naming the 24th vertex
Naming the 25th vertex
Naming the 26th vertex
Naming the 27th vertex
Naming the 28th vertex
Naming the 29th vertex
Naming the 30th vertex
Naming the 31th vertex
Naming the 32th vertex
Made it through the naming process
Starting the 0th round
Looking at currE[0], which is 0
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 5
We found it! It's in the 4th equiv class
Looking at currE[1], which is 47
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 3
We found it! It's in the 3th equiv class
We are trying to find the repn for 5
We found it! It's in the 4th equiv class
Starting the 1th round
Looking at currE[0], which is 1
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
Starting the 2th round
Looking at currE[0], which is 2
We are trying to find the repn for 19
We found it! It's in the 14th equiv class
We are trying to find the repn for 26
We found it! It's in the 21th equiv class
Starting the 3th round
Looking at currE[0], which is 3
We are trying to find the repn for 40
We found it! It's in the 26th equiv class
We are trying to find the repn for 41
We found it! It's in the 27th equiv class
We are trying to find the repn for 42
We found it! It's in the 28th equiv class
Looking at currE[1], which is 4
We are trying to find the repn for 40
We found it! It's in the 26th equiv class
We are trying to find the repn for 41
We found it! It's in the 27th equiv class
We are trying to find the repn for 42
We found it! It's in the 28th equiv class
Starting the 4th round
Looking at currE[0], which is 5
We are trying to find the repn for 44
We found it! It's in the 32th equiv class
We are trying to find the repn for 46
We found it! It's in the 29th equiv class
We are trying to find the repn for 45
We found it! It's in the 30th equiv class
Looking at currE[1], which is 6
We are trying to find the repn for 44
We found it! It's in the 32th equiv class
We are trying to find the repn for 46
We found it! It's in the 29th equiv class
We are trying to find the repn for 45
We found it! It's in the 30th equiv class
Starting the 5th round
Looking at currE[0], which is 7
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Looking at currE[1], which is 48
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 6th round
Looking at currE[0], which is 8
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
Starting the 7th round
Looking at currE[0], which is 9
We are trying to find the repn for 39
We found it! It's in the 31th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 8th round
Looking at currE[0], which is 10
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
We are trying to find the repn for 15
We found it! It's in the 13th equiv class
We are trying to find the repn for 12
We found it! It's in the 10th equiv class
We are trying to find the repn for 13
We found it! It's in the 11th equiv class
We are trying to find the repn for 14
We found it! It's in the 12th equiv class
Looking at currE[1], which is 49
We are trying to find the repn for 11
We found it! It's in the 9th equiv class
We are trying to find the repn for 15
We found it! It's in the 13th equiv class
We are trying to find the repn for 12
We found it! It's in the 10th equiv class
We are trying to find the repn for 13
We found it! It's in the 11th equiv class
We are trying to find the repn for 14
We found it! It's in the 12th equiv class
Starting the 9th round
Looking at currE[0], which is 11
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Looking at currE[1], which is 43
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Starting the 10th round
Looking at currE[0], which is 12
We are trying to find the repn for 50
We found it! It's in the 14th equiv class
We are trying to find the repn for 24
We found it! It's in the 19th equiv class
We are trying to find the repn for 25
We found it! It's in the 20th equiv class
Looking at currE[1], which is 16
We are trying to find the repn for 50
We found it! It's in the 14th equiv class
We are trying to find the repn for 24
We found it! It's in the 19th equiv class
We are trying to find the repn for 25
We found it! It's in the 20th equiv class
Starting the 11th round
Looking at currE[0], which is 13
We are trying to find the repn for 34
We found it! It's in the 26th equiv class
We are trying to find the repn for 35
We found it! It's in the 27th equiv class
We are trying to find the repn for 36
We found it! It's in the 28th equiv class
Looking at currE[1], which is 17
We are trying to find the repn for 34
We found it! It's in the 26th equiv class
We are trying to find the repn for 35
We found it! It's in the 27th equiv class
We are trying to find the repn for 36
We found it! It's in the 28th equiv class
Starting the 12th round
Looking at currE[0], which is 14
We are trying to find the repn for 52
We found it! It's in the 32th equiv class
We are trying to find the repn for 37
We found it! It's in the 29th equiv class
We are trying to find the repn for 38
We found it! It's in the 30th equiv class
Looking at currE[1], which is 18
We are trying to find the repn for 52
We found it! It's in the 32th equiv class
We are trying to find the repn for 37
We found it! It's in the 29th equiv class
We are trying to find the repn for 38
We found it! It's in the 30th equiv class
Starting the 13th round
Looking at currE[0], which is 15
We are trying to find the repn for 47
We found it! It's in the 0th equiv class
We are trying to find the repn for 49
We found it! It's in the 8th equiv class
Starting the 14th round
Looking at currE[0], which is 19
We are trying to find the repn for 20
We found it! It's in the 15th equiv class
We are trying to find the repn for 21
We found it! It's in the 16th equiv class
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Looking at currE[1], which is 50
We are trying to find the repn for 20
We found it! It's in the 15th equiv class
We are trying to find the repn for 21
We found it! It's in the 16th equiv class
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Starting the 15th round
Looking at currE[0], which is 20
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
Starting the 16th round
Looking at currE[0], which is 21
We are trying to find the repn for 19
We found it! It's in the 14th equiv class
We are trying to find the repn for 26
We found it! It's in the 21th equiv class
Starting the 17th round
Looking at currE[0], which is 22
We are trying to find the repn for 40
We found it! It's in the 26th equiv class
We are trying to find the repn for 41
We found it! It's in the 27th equiv class
We are trying to find the repn for 42
We found it! It's in the 28th equiv class
Starting the 18th round
Looking at currE[0], which is 23
We are trying to find the repn for 44
We found it! It's in the 32th equiv class
We are trying to find the repn for 46
We found it! It's in the 29th equiv class
We are trying to find the repn for 45
We found it! It's in the 30th equiv class
Starting the 19th round
Looking at currE[0], which is 24
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 7
We found it! It's in the 5th equiv class
We are trying to find the repn for 10
We found it! It's in the 8th equiv class
Starting the 20th round
Looking at currE[0], which is 25
We are trying to find the repn for 39
We found it! It's in the 31th equiv class
We are trying to find the repn for 27
We found it! It's in the 22th equiv class
We are trying to find the repn for 28
We found it! It's in the 23th equiv class
We are trying to find the repn for 30
We found it! It's in the 24th equiv class
We are trying to find the repn for 32
We found it! It's in the 25th equiv class
Starting the 21th round
Looking at currE[0], which is 26
We are trying to find the repn for 27
We found it! It's in the 22th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
We are trying to find the repn for 0
We found it! It's in the 0th equiv class
Starting the 22th round
Looking at currE[0], which is 27
We are trying to find the repn for 47
We found it! It's in the 0th equiv class
We are trying to find the repn for 49
We found it! It's in the 8th equiv class
Starting the 23th round
Looking at currE[0], which is 28
We are trying to find the repn for 50
We found it! It's in the 14th equiv class
We are trying to find the repn for 24
We found it! It's in the 19th equiv class
We are trying to find the repn for 25
We found it! It's in the 20th equiv class
Looking at currE[1], which is 29
We are trying to find the repn for 50
We found it! It's in the 14th equiv class
We are trying to find the repn for 24
We found it! It's in the 19th equiv class
We are trying to find the repn for 25
We found it! It's in the 20th equiv class
Starting the 24th round
Looking at currE[0], which is 30
We are trying to find the repn for 34
We found it! It's in the 26th equiv class
We are trying to find the repn for 35
We found it! It's in the 27th equiv class
We are trying to find the repn for 36
We found it! It's in the 28th equiv class
Looking at currE[1], which is 31
We are trying to find the repn for 34
We found it! It's in the 26th equiv class
We are trying to find the repn for 35
We found it! It's in the 27th equiv class
We are trying to find the repn for 36
We found it! It's in the 28th equiv class
Starting the 25th round
Looking at currE[0], which is 32
We are trying to find the repn for 52
We found it! It's in the 32th equiv class
We are trying to find the repn for 37
We found it! It's in the 29th equiv class
We are trying to find the repn for 38
We found it! It's in the 30th equiv class
Looking at currE[1], which is 33
We are trying to find the repn for 52
We found it! It's in the 32th equiv class
We are trying to find the repn for 37
We found it! It's in the 29th equiv class
We are trying to find the repn for 38
We found it! It's in the 30th equiv class
Starting the 26th round
Looking at currE[0], which is 34
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
Looking at currE[1], which is 40
We are trying to find the repn for 1
We found it! It's in the 1th equiv class
We are trying to find the repn for 2
We found it! It's in the 2th equiv class
We are trying to find the repn for 4
We found it! It's in the 3th equiv class
We are trying to find the repn for 6
We found it! It's in the 4th equiv class
Starting the 27th round
Looking at currE[0], which is 35
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Looking at currE[1], which is 41
We are trying to find the repn for 8
We found it! It's in the 6th equiv class
We are trying to find the repn for 9
We found it! It's in the 7th equiv class
Starting the 28th round
Looking at currE[0], which is 36
We are trying to find the repn for 43
We found it! It's in the 9th equiv class
We are trying to find the repn for 15
We found it! It's in the 13th equiv class
We are trying to find the repn for 16
We found it! It's in the 10th equiv class
We are trying to find the repn for 17
We found it! It's in the 11th equiv class
We are trying to find the repn for 18
We found it! It's in the 12th equiv class
Looking at currE[1], which is 42
We are trying to find the repn for 43
We found it! It's in the 9th equiv class
We are trying to find the repn for 15
We found it! It's in the 13th equiv class
We are trying to find the repn for 16
We found it! It's in the 10th equiv class
We are trying to find the repn for 17
We found it! It's in the 11th equiv class
We are trying to find the repn for 18
We found it! It's in the 12th equiv class
Starting the 29th round
Looking at currE[0], which is 37
We are trying to find the repn for 47
We found it! It's in the 0th equiv class
We are trying to find the repn for 48
We found it! It's in the 5th equiv class
We are trying to find the repn for 49
We found it! It's in the 8th equiv class
Looking at currE[1], which is 46
We are trying to find the repn for 47
We found it! It's in the 0th equiv class
We are trying to find the repn for 48
We found it! It's in the 5th equiv class
We are trying to find the repn for 49
We found it! It's in the 8th equiv class
Starting the 30th round
Looking at currE[0], which is 38
We are trying to find the repn for 51
We found it! It's in the 31th equiv class
We are trying to find the repn for 27
We found it! It's in the 22th equiv class
We are trying to find the repn for 29
We found it! It's in the 23th equiv class
We are trying to find the repn for 31
We found it! It's in the 24th equiv class
We are trying to find the repn for 33
We found it! It's in the 25th equiv class
Looking at currE[1], which is 45
We are trying to find the repn for 51
We found it! It's in the 31th equiv class
We are trying to find the repn for 27
We found it! It's in the 22th equiv class
We are trying to find the repn for 29
We found it! It's in the 23th equiv class
We are trying to find the repn for 31
We found it! It's in the 24th equiv class
We are trying to find the repn for 33
We found it! It's in the 25th equiv class
Starting the 31th round
Looking at currE[0], which is 39
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Looking at currE[1], which is 51
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Starting the 32th round
Looking at currE[0], which is 44
We are trying to find the repn for 20
We found it! It's in the 15th equiv class
We are trying to find the repn for 21
We found it! It's in the 16th equiv class
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Looking at currE[1], which is 52
We are trying to find the repn for 20
We found it! It's in the 15th equiv class
We are trying to find the repn for 21
We found it! It's in the 16th equiv class
We are trying to find the repn for 22
We found it! It's in the 17th equiv class
We are trying to find the repn for 23
We found it! It's in the 18th equiv class
Printing Gamma Graph which has 68 vertices and 211 edges.
{0 7} 0 {0 7}uvwuuuvvuvwu/ {0 7}uvwuuuvvuuuu/ {0 7}uvwuuuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 2 8 9} {1 2 8 9}uuvvuvwuuuvv/ 0 0 0 {1 2 8 9}uuvvuvwuuuuu/ 0 0 {1 2 8 9}uuvvuvwuuuuw/ 0 0 {1 2 8 9}uuvvuvwuvwvv/ 0 0 0 {1 2 8 9}uuvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 5} 0 0 0 0 0 {3 5}uuvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 {3 5}uuvvuuuuuuvv/ {3 5}uuvvuuuuuuuw/ 0 0 0 0 0 0 {3 5}uuvvuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{4 6} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {4 6}uuvvuuuwwuvv/ 0 0 {4 6}uuvvuuuwwuuu/ 0 0 0 {4 6}uuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 {10}uvwuuuuuvwvv/ {10}uvwuuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{11 12} {11 12}uuuuvwvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 {11 12}uuuuvwvvuuuu/ {11 12}uuuuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{13 14} {13 14}uuuuvwuwwuuu/ + {13 14}uuuuvwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {13 14}uuuuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 {15}uvwuuuuwwvwu/ {15}uvwuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16 17} {16 17}uuuwwvwuuuvv/ + {16 17}uuuwwvwuvwuw/ + {16 17}uuuwwvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {16 17}uuuwwvwuuuuu/ {16 17}uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{18 19} {18 19}uuuwwuuuvwuw/ + {18 19}uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {18 19}uuuwwuuuuuvv/ {18 19}uuuwwuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{20 39 40} 0 0 0 0 0 0 0 0 0 0 0 {20 39 40}uvwuvwvvuvwu/ {20 39 40}uvwuvwvvuuuu/ {20 39 40}uvwuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{21 22 27 28} {21 22 27 28}vwvvuvwuuuvv/ 0 0 0 {21 22 27 28}vwvvuvwuuuuu/ 0 0 {21 22 27 28}vwvvuvwuuuuw/ 0 0 {21 22 27 28}vwvvuvwuvwvv/ 0 0 0 {21 22 27 28}vwvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{23 25} 0 0 0 0 0 {23 25}vwvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 {23 25}vwvvuuuuuuvv/ {23 25}vwvvuuuuuuuw/ 0 0 0 0 0 0 {23 25}vwvvuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{24 26} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {24 26}vwvvuuuwwuvv/ 0 0 {24 26}vwvvuuuwwuuu/ 0 0 0 {24 26}vwvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{29 41 42} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {29 41 42}uvwuvwuwwvwu/ {29 41 42}uvwuvwuwwuuu/ {29 41 42}uvwuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{30 31 37 38} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {30 31 37 38}vwuwwvwuuuvv/ {30 31 37 38}vwuwwvwuuuuu/ {30 31 37 38}vwuwwvwuuuuw/ {30 31 37 38}vwuwwvwuvwvv/ {30 31 37 38}vwuwwvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{32 33 36} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {32 33 36}vwuwwuuuvwvv/ {32 33 36}vwuwwuuuvwuw/ 0 0 0 0 0 0 0 {32 33 36}vwuwwuuuuuvv/ {32 33 36}vwuwwuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{34 35} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {34 35}vwuwwuvvuvwu/ {34 35}vwuwwuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{43 44} 0 {43 44}uuuuuuvvuvwu/ {43 44}uuuuuuvvuuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{45} 0 0 0 0 0 0 0 0 {45}uuuuuuuwwvwu/ {45}uuuuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{46 51} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {46 51}uuuwwuvvuvwu/ {46 51}uuuwwuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{47 48 52 53} {47 48 52 53}wuvvuvwuuuvv/ 0 0 0 {47 48 52 53}wuvvuvwuuuuu/ 0 0 0 0 0 {47 48 52 53}wuvvuvwuvwvv/ 0 0 0 {47 48 52 53}wuvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{49 50} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {49 50}wuvvuuuwwuvv/ 0 0 {49 50}wuvvuuuwwuuu/ 0 0 0 {49 50}wuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{54} {54}uuuwwuuuvwuw/ + {54}uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{55 56 76} 0 0 0 0 0 0 0 0 0 0 0 {55 56 76}wuuuvwvvuvwu/ {55 56 76}wuuuvwvvuuuu/ {55 56 76}wuuuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{57 58 77} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {57 58 77}wuuuvwuwwvwu/ {57 58 77}wuuuvwuwwuuu/ {57 58 77}wuuuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{60} {59}uuuuvwuwwuuu/ + {59}uuuuvwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{61 68} {60}uuuwwvwuvwuw/ + {60}uuuwwvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {60}uuuwwvwuuuvv/ {60}uuuwwvwuuuuu/ {60}uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{62 63} 0 {61 68}wvwuuuvvuvwu/ {61 68}wvwuuuvvuuuu/ {61 68}wvwuuuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{64} 0 0 0 0 0 {62 63}wvwuuuuuvwvv/ {62 63}wvwuuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{65} 0 0 0 0 0 0 0 0 {64}wvwuuuuwwvwu/ {64}wvwuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{66 69 70} 0 0 0 0 0 0 0 0 0 0 0 {65}wvwuvwvvuvwu/ {65}wvwuvwvvuuuu/ {65}wvwuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{67 71 72} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {66 69 70}wvwuvwuwwvwu/ {66 69 70}wvwuvwuwwuuu/ {66 69 70}wvwuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{73 74} 0 {67 71 72}wuuuuuvvuvwu/ {67 71 72}wuuuuuvvuuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{75} 0 0 0 0 0 0 0 0 {73 74}wuuuuuuwwvwu/ {73 74}wuuuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {0}uuuwwuuuuuuw/ + {0}uuuwwuuuuuvv/ 0 0 {0}uuuwwuuuvwuw/ {0}uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 47} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {1 47}wuuuuuuwwuuu/ 0 0 0 0 0 0 0 {1 47}wuuuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{2 48} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {2 48}wuuuuuvvuuuu/ 0 0 0 0 0 0 {2 48}wuuuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {3 4}wuuuvwuwwuuu/ {3 4}wuuuvwuwwuvv/ {3 4}wuuuvwuwwvwu/ 0 0 0 0 
{5 6} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {3 49}wuuuvwvvuuuw/ {3 49}wuuuvwvvuvwu/ 0 {3 49}wuuuvwvvuuuu/ 
{7} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {5 6}uuuwwuvvuuuw/ + {5 6}uuuwwuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{8 52} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {5 50}wuvvuuuwwuuu/ 0 0 0 0 {5 50}wuvvuuuwwuvv/ 0 0 {5 50}wuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{9 53} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {7}wuvvuvwuuuvv/ + {7}wuvvuvwuvwuw/ + {7}wuvvuvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {7}wuvvuvwuuuuu/ 0 
{10 15} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {8 52}uuuwwvwuuuuu/ {8 52}uuuwwvwuuuvv/ {8 52}uuuwwvwuvwuw/ {8 52}uuuwwvwuvwvv/ {8 52}uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {9 53}wvwuuuuuvwuw/ {9 53}wvwuuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{12 17} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {10 15}wvwuuuvvuuuu/ 0 0 0 0 {10 15}wvwuuuvvuuuw/ {10 15}wvwuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 
{13 18} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {11}wvwuvwuwwuuu/ {11}wvwuvwuwwuvv/ {11}wvwuvwuwwvwu/ 0 0 0 0 
{14 19} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {12 17}wvwuvwvvuuuw/ {12 17}wvwuvwvvuvwu/ 0 {12 17}wvwuvwvvuuuu/ 
{16} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {13 18}wvwuuuuwwuuu/ 0 0 0 0 0 0 0 {13 18}wvwuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{20} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {14 19}uuvvuuuuuuuw/ {14 19}uuvvuuuuuuvv/ {14 19}uuvvuuuuvwuw/ {14 19}uuvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{21} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {16}uuuuuuuwwuuu/ 0 0 0 0 0 0 0 {16}uuuuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{22} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {17 56}uuuuuuvvuuuu/ 0 0 0 0 0 0 {17 56}uuuuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 
{23 24} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {18 57}uuuuvwuwwuuu/ {18 57}uuuuvwuwwuvv/ {18 57}uuuuvwuwwvwu/ 0 0 0 0 
{25 26} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {19 58}uuuuvwvvuuuw/ {19 58}uuuuvwvvuvwu/ 0 {19 58}uuuuvwvvuuuu/ 
{27} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {20}uuvvuuuwwuuu/ 0 0 0 0 {20}uuvvuuuwwuvv/ 0 0 {20}uuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{28 67} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {21}uuvvuvwuuuuw/ {21}uuvvuvwuuuvv/ {21}uuvvuvwuvwuw/ {21}uuvvuvwuvwvv/ 0 0 0 0 0 {21}uuvvuvwuuuuu/ 0 
{29} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {22}uuvvuvwuuuvv/ + {22}uuvvuvwuvwuw/ + {22}uuvvuvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {22}uuvvuvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 
{30} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {23 24}uvwuuuuwwuuu/ 0 0 0 0 0 0 0 {23 24}uvwuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{31 40} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {25 26}uvwuuuvvuuuu/ 0 0 0 0 {25 26}uvwuuuvvuuuw/ {25 26}uvwuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 
{32 41} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {27}uvwuvwuwwuuu/ {27}uvwuvwuwwuvv/ {27}uvwuvwuwwvwu/ 0 0 0 0 
{33 42} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {28 67}uvwuvwvvuuuw/ {28 67}uvwuvwvvuvwu/ 0 {28 67}uvwuvwvvuuuu/ 
{34 73} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {29}vwuwwuuuuuuw/ {29}vwuwwuuuuuvv/ {29}vwuwwuuuvwuw/ {29}vwuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{35 74} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {30}vwuwwuvvuuuw/ {30}vwuwwuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{36 75} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {31 40}vwuwwvwuuuuu/ {31 40}vwuwwvwuuuvv/ {31 40}vwuwwvwuvwuw/ {31 40}vwuwwvwuvwvv/ {31 40}vwuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{37} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {31 70}vwvvuuuwwuuu/ 0 0 0 0 {31 70}vwvvuuuwwuvv/ 0 0 {31 70}vwvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{38 77} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {32 41}vwvvuvwuuuuw/ {32 41}vwvvuvwuuuvv/ {32 41}vwvvuvwuvwuw/ {32 41}vwvvuvwuvwvv/ 0 0 0 0 0 {32 41}vwvvuvwuuuuu/ 0 
{39} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {32 71}uvwuuuuuvwuw/ {32 71}uvwuuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{59} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 {33 42}vwvvuuuuuuuw/ {33 42}vwvvuuuuuuvv/ {33 42}vwvvuuuuvwuw/ {33 42}vwvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing Representation Matrix
{0 7} 0 uvwuuuvvuvwu/ uvwuuuvvuuuu/ uvwuuuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 2 8 9} uuvvuvwuuuvv/ 0 0 0 uuvvuvwuuuuu/ 0 0 uuvvuvwuuuuw/ 0 0 uuvvuvwuvwvv/ 0 0 0 uuvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{3 5} 0 0 0 0 0 uuvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuuuuuuvv/ uuvvuuuuuuuw/ 0 0 0 0 0 0 uuvvuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{4 6} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuuuwwuvv/ 0 0 uuvvuuuwwuuu/ 0 0 0 uuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{10} 0 0 0 0 0 uvwuuuuuvwvv/ uvwuuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{11 12} uuuuvwvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 uuuuvwvvuuuu/ uuuuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{13 14} uuuuvwuwwuuu/ + uuuuvwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{15} 0 0 0 0 0 0 0 0 uvwuuuuwwvwu/ uvwuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{16 17} uuuwwvwuuuvv/ + uuuwwvwuvwuw/ + uuuwwvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwvwuuuuu/ uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{18 19} uuuwwuuuvwuw/ + uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuuuuuvv/ uuuwwuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{20 39 40} 0 0 0 0 0 0 0 0 0 0 0 uvwuvwvvuvwu/ uvwuvwvvuuuu/ uvwuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{21 22 27 28} vwvvuvwuuuvv/ 0 0 0 vwvvuvwuuuuu/ 0 0 vwvvuvwuuuuw/ 0 0 vwvvuvwuvwvv/ 0 0 0 vwvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{23 25} 0 0 0 0 0 vwvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 vwvvuuuuuuvv/ vwvvuuuuuuuw/ 0 0 0 0 0 0 vwvvuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{24 26} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwvvuuuwwuvv/ 0 0 vwvvuuuwwuuu/ 0 0 0 vwvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{29 41 42} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuvwuwwvwu/ uvwuvwuwwuuu/ uvwuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{30 31 37 38} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwvwuuuvv/ vwuwwvwuuuuu/ vwuwwvwuuuuw/ vwuwwvwuvwvv/ vwuwwvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{32 33 36} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuuuvwvv/ vwuwwuuuvwuw/ 0 0 0 0 0 0 0 vwuwwuuuuuvv/ vwuwwuuuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{34 35} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuvvuvwu/ vwuwwuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{43 44} 0 uuuuuuvvuvwu/ uuuuuuvvuuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{45} 0 0 0 0 0 0 0 0 uuuuuuuwwvwu/ uuuuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{46 51} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuvvuvwu/ uuuwwuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{47 48 52 53} wuvvuvwuuuvv/ 0 0 0 wuvvuvwuuuuu/ 0 0 0 0 0 wuvvuvwuvwvv/ 0 0 0 wuvvuvwuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{49 50} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuuuwwuvv/ 0 0 wuvvuuuwwuuu/ 0 0 0 wuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{54} uuuwwuuuvwuw/ + uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{55 56 76} 0 0 0 0 0 0 0 0 0 0 0 wuuuvwvvuvwu/ wuuuvwvvuuuu/ wuuuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{57 58 77} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvwuwwvwu/ wuuuvwuwwuuu/ wuuuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{60} uuuuvwuwwuuu/ + uuuuvwuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{61 68} uuuwwvwuvwuw/ + uuuwwvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwvwuuuvv/ uuuwwvwuuuuu/ uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{62 63} 0 wvwuuuvvuvwu/ wvwuuuvvuuuu/ wvwuuuvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{64} 0 0 0 0 0 wvwuuuuuvwvv/ wvwuuuuuvwuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{65} 0 0 0 0 0 0 0 0 wvwuuuuwwvwu/ wvwuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{66 69 70} 0 0 0 0 0 0 0 0 0 0 0 wvwuvwvvuvwu/ wvwuvwvvuuuu/ wvwuvwvvuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{67 71 72} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuvwuwwvwu/ wvwuvwuwwuuu/ wvwuvwuwwuvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{73 74} 0 wuuuuuvvuvwu/ wuuuuuvvuuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{75} 0 0 0 0 0 0 0 0 wuuuuuuwwvwu/ wuuuuuuwwuuu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{0} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuuuuuuw/ + uuuwwuuuuuvv/ 0 0 uuuwwuuuvwuw/ uuuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{1 47} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuuuuwwuuu/ 0 0 0 0 0 0 0 wuuuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{2 48} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuuuvvuuuu/ 0 0 0 0 0 0 wuuuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 
{3 4} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvwuwwuuu/ wuuuvwuwwuvv/ wuuuvwuwwvwu/ 0 0 0 0 
{5 6} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvwvvuuuw/ wuuuvwvvuvwu/ 0 wuuuvwvvuuuu/ 
{7} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuvvuuuw/ + uuuwwuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{8 52} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuuuwwuuu/ 0 0 0 0 wuvvuuuwwuvv/ 0 0 wuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{9 53} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuvwuuuvv/ + wuvvuvwuvwuw/ + wuvvuvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuvvuvwuuuuu/ 0 
{10 15} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwvwuuuuu/ uuuwwvwuuuvv/ uuuwwvwuvwuw/ uuuwwvwuvwvv/ uuuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{11} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuuuuuvwuw/ wvwuuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{12 17} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuuuvvuuuu/ 0 0 0 0 wvwuuuvvuuuw/ wvwuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 
{13 18} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuvwuwwuuu/ wvwuvwuwwuvv/ wvwuvwuwwvwu/ 0 0 0 0 
{14 19} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuvwvvuuuw/ wvwuvwvvuvwu/ 0 wvwuvwvvuuuu/ 
{16} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuuuuwwuuu/ 0 0 0 0 0 0 0 wvwuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{20} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuuuuuuuw/ uuvvuuuuuuvv/ uuvvuuuuvwuw/ uuvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{21} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuuuuwwuuu/ 0 0 0 0 0 0 0 uuuuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{22} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuuuvvuuuu/ 0 0 0 0 0 0 uuuuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 
{23 24} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuvwuwwuuu/ uuuuvwuwwuvv/ uuuuvwuwwvwu/ 0 0 0 0 
{25 26} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuvwvvuuuw/ uuuuvwvvuvwu/ 0 uuuuvwvvuuuu/ 
{27} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuuuwwuuu/ 0 0 0 0 uuvvuuuwwuvv/ 0 0 uuvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{28 67} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuvwuuuuw/ uuvvuvwuuuvv/ uuvvuvwuvwuw/ uuvvuvwuvwvv/ 0 0 0 0 0 uuvvuvwuuuuu/ 0 
{29} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuvwuuuvv/ + uuvvuvwuvwuw/ + uuvvuvwuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuvvuvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 
{30} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuuuuwwuuu/ 0 0 0 0 0 0 0 uvwuuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{31 40} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuuuvvuuuu/ 0 0 0 0 uvwuuuvvuuuw/ uvwuuuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 
{32 41} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuvwuwwuuu/ uvwuvwuwwuvv/ uvwuvwuwwvwu/ 0 0 0 0 
{33 42} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuvwvvuuuw/ uvwuvwvvuvwu/ 0 uvwuvwvvuuuu/ 
{34 73} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuuuuuuw/ vwuwwuuuuuvv/ vwuwwuuuvwuw/ vwuwwuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{35 74} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuvvuuuw/ vwuwwuvvuvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{36 75} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwvwuuuuu/ vwuwwvwuuuvv/ vwuwwvwuvwuw/ vwuwwvwuvwvv/ vwuwwvwuuuuw/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{37} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwvvuuuwwuuu/ 0 0 0 0 vwvvuuuwwuvv/ 0 0 vwvvuuuwwvwu/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{38 77} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwvvuvwuuuuw/ vwvvuvwuuuvv/ vwvvuvwuvwuw/ vwvvuvwuvwvv/ 0 0 0 0 0 vwvvuvwuuuuu/ 0 
{39} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuuuuuvwuw/ uvwuuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
{59} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwvvuuuuuuuw/ vwvvuuuuuuvv/ vwvvuuuuvwuw/ vwvvuuuuvwvv/ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
Printing vertex homoms
{0 7} 0 0
{1 2 8 9} 0 0
{3 5} 0 0
{4 6} 0 0
{10} 0 0
{11 12} 0 0
{13 14} 0 0
{15} 0 0
{16 17} 0 0
{18 19} 0 0
{20 39 40} 0 0
{21 22 27 28} 0 0
{23 25} 0 0
{24 26} 0 0
{29 41 42} 0 0
{30 31 37 38} 0 0
{32 33 36} 0 0
{34 35} 0 0
{43 44} 0 0
{45} 0 0
{46 51} 0 0
{47 48 52 53} 0 0
{49 50} 0 0
{54} 0 0
{55 56 76} 0 0
{57 58 77} 0 0
{60} 0 0
{61 68} 0 0
{62 63} 0 0
{64} 0 0
{65} 0 0
{66 69 70} 0 0
{67 71 72} 0 0
{73 74} 0 0
{75} 0 0
{0} 0 0
{1 47} 0 0
{2 48} 0 0
{3 4} 0 0
{5 6} 0 0
{7} 0 0
{8 52} 0 0
{9 53} 0 0
{10 15} 0 0
{11} 0 0
{12 17} 0 0
{13 18} 0 0
{14 19} 0 0
{16} 0 0
{20} 0 0
{21} 0 0
{22} 0 0
{23 24} 0 0
{25 26} 0 0
{27} 0 0
{28 67} 0 0
{29} 0 0
{30} 0 0
{31 40} 0 0
{32 41} 0 0
{33 42} 0 0
{34 73} 0 0
{35 74} 0 0
{36 75} 0 0
{37} 0 0
{38 77} 0 0
{39} 0 0
{59} 0 0
Printing G Graph which has 32 vertices and 110 edges.
uuuuuuuw 0 0 0 0 uuuuuuuwwuuu uuuuuuuwwuvv uuuuuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuuuuuvv 0 0 0 0 0 0 0 uuuuuuvvuuuu uuuuuuvvuuuw uuuuuuvvuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuuuvwuw 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuvwuwwuuu uuuuvwuwwuvv uuuuvwuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuuvwvvuuuu uuuuvwvvuuuw uuuuvwvvuvwu 0 0 0 0 0 0 0 0 0 0 0 
uuuwwuuu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuuuuuuw uuuwwuuuuuvv uuuwwuuuvwuw uuuwwuuuvwvv 0 0 0 0 0 0 0 
uuuwwuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwuvvuuuw uuuwwuvvuvwu 0 0 0 0 0 
uuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uuuwwvwuuuuu uuuwwvwuuuuw uuuwwvwuuuvv uuuwwvwuvwuw uuuwwvwuvwvv 
uuvvuuuu uuvvuuuuuuuw uuvvuuuuuuvv uuvvuuuuvwuw uuvvuuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuvvuuuw 0 0 0 0 uuvvuuuwwuuu uuvvuuuwwuvv uuvvuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uuvvuvwu 0 0 0 0 0 0 0 0 0 0 uuvvuvwuuuuu uuvvuvwuuuuw uuvvuvwuuuvv uuvvuvwuvwuw uuvvuvwuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvwuuuuu uvwuuuuuuuuw uvwuuuuuuuvv uvwuuuuuvwuw uvwuuuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvwuuuuw 0 0 0 0 uvwuuuuwwuuu uvwuuuuwwuvv uvwuuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvwuuuvv 0 0 0 0 0 0 0 uvwuuuvvuuuu uvwuuuvvuuuw uvwuuuvvuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvwuvwuw 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuvwuwwuuu uvwuvwuwwuvv uvwuvwuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
uvwuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 uvwuvwvvuuuu uvwuvwvvuuuw uvwuvwvvuvwu 0 0 0 0 0 0 0 0 0 0 0 
vwuwwuuu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuuuuuuw vwuwwuuuuuvv vwuwwuuuvwuw vwuwwuuuvwvv 0 0 0 0 0 0 0 
vwuwwuvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwuvvuuuw vwuwwuvvuvwu 0 0 0 0 0 
vwuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 vwuwwvwuuuuu vwuwwvwuuuuw vwuwwvwuuuvv vwuwwvwuvwuw vwuwwvwuvwvv 
vwvvuuuu vwvvuuuuuuuw vwvvuuuuuuvv vwvvuuuuvwuw vwvvuuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
vwvvuuuw 0 0 0 0 vwvvuuuwwuuu vwvvuuuwwuvv vwvvuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
vwvvuvwu 0 0 0 0 0 0 0 0 0 0 vwvvuvwuuuuu vwvvuvwuuuuw vwvvuvwuuuvv vwvvuvwuvwuw vwvvuvwuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wuuuuuuw 0 0 0 0 wuuuuuuwwuuu wuuuuuuwwuvv wuuuuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wuuuuuvv 0 0 0 0 0 0 0 wuuuuuvvuuuu wuuuuuvvuuuw wuuuuuvvuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wuuuvwuw 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvwuwwuuu wuuuvwuwwuvv wuuuvwuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wuuuvwvvuuuu wuuuvwvvuuuw wuuuvwvvuvwu 0 0 0 0 0 0 0 0 0 0 0 
wuvvuuuw 0 0 0 0 wuvvuuuwwuuu wuvvuuuwwuvv wuvvuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wuvvuvwu 0 0 0 0 0 0 0 0 0 0 wuvvuvwuuuuu wuvvuvwuuuuw wuvvuvwuuuvv wuvvuvwuvwuw wuvvuvwuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvwuuuuu wvwuuuuuuuuw wvwuuuuuuuvv wvwuuuuuvwuw wvwuuuuuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvwuuuuw 0 0 0 0 wvwuuuuwwuuu wvwuuuuwwuvv wvwuuuuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvwuuuvv 0 0 0 0 0 0 0 wvwuuuvvuuuu wvwuuuvvuuuw wvwuuuvvuvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvwuvwuw 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuvwuwwuuu wvwuvwuwwuvv wvwuvwuwwvwu 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
wvwuvwvv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 wvwuvwvvuuuu wvwuvwvvuuuw wvwuvwvvuvwu 0 0 0 0 0 0 0 0 0 0 0 
Checking if 0 and 35 are equivalent. We are at 0 of 33
Checking if 0 and 36 are equivalent. We are at 1 of 33
Checking if 0 and 37 are equivalent. We are at 2 of 33
Checking if 0 and 38 are equivalent. We are at 3 of 33
Checking if 0 and 39 are equivalent. We are at 4 of 33
Checking if 0 and 40 are equivalent. We are at 5 of 33
Checking if 0 and 41 are equivalent. We are at 6 of 33
Checking if 0 and 42 are equivalent. We are at 7 of 33
Checking if 0 and 43 are equivalent. We are at 8 of 33
Checking if 0 and 44 are equivalent. We are at 9 of 33
Checking if 0 and 45 are equivalent. We are at 10 of 33
Checking if 0 and 46 are equivalent. We are at 11 of 33
Checking if 0 and 47 are equivalent. We are at 12 of 33
Checking if 0 and 48 are equivalent. We are at 13 of 33
Checking if 0 and 49 are equivalent. We are at 14 of 33
Checking if 0 and 50 are equivalent. We are at 15 of 33
Checking if 0 and 51 are equivalent. We are at 16 of 33
Checking if 0 and 52 are equivalent. We are at 17 of 33
Checking if 0 and 53 are equivalent. We are at 18 of 33
Checking if 0 and 54 are equivalent. We are at 19 of 33
Checking if 0 and 55 are equivalent. We are at 20 of 33
Checking if 0 and 56 are equivalent. We are at 21 of 33
Checking if 0 and 57 are equivalent. We are at 22 of 33
Checking if 0 and 58 are equivalent. We are at 23 of 33
Checking if 0 and 59 are equivalent. We are at 24 of 33
Checking if 0 and 60 are equivalent. We are at 25 of 33
Checking if 0 and 61 are equivalent. We are at 26 of 33
Checking if 0 and 62 are equivalent. We are at 27 of 33
Checking if 0 and 63 are equivalent. We are at 28 of 33
Checking if 0 and 64 are equivalent. We are at 29 of 33
Checking if 0 and 65 are equivalent. We are at 30 of 33
Checking if 0 and 66 are equivalent. We are at 31 of 33
Checking if 0 and 67 are equivalent. We are at 32 of 33
We are starting to look at trim((T*)^[4])*
GammaT vnames really are: a b c d e 
WE ARE DONE WITH THE G GRAPH
Starting round 1
Removed Edge (0, 2) named 01030613050103110103061305010412
Starting round 2
Removed Edge (5, 7) named 01030613050103110103071003060412
Starting round 3
Removed Edge (5, 9) named 01030613050103110103071004080116
Starting round 4
Removed Edge (5, 10) named 01030613050103110103071004080215
Starting round 5
Removed Edge (11, 12) named 01030613050103110104080903060311
Starting round 6
Removed Edge (11, 13) named 01030613050103110104080903060412
Starting round 7
Removed Edge (11, 14) named 01030613050103110104080903070514
Starting round 8
Removed Edge (11, 15) named 01030613050103110104080904080116
Starting round 9
Removed Edge (11, 16) named 01030613050103110104080904080215
Starting round 10
Starting round 11
Removed Edge (16, 19) named 01030613050103110205011305020509
Starting round 12
Removed Edge (25, 27) named 01030613050103110205021003060412
Starting round 13
Removed Edge (25, 29) named 01030613050103110205021004080116
Starting round 14
Removed Edge (25, 30) named 01030613050103110205021004080215
Starting round 15
Removed Edge (31, 33) named 01030613050103110205021506030710
Starting round 16
Removed Edge (31, 35) named 01030613050103110205021507050113
Starting round 17
Removed Edge (31, 36) named 01030613050103110205021507050210
Starting round 18
Removed Edge (42, 43) named 01030613050104120103071003060311
Starting round 19
Removed Edge (42, 44) named 01030613050104120103071003060412
Starting round 20
Removed Edge (42, 45) named 01030613050104120103071003070514
Starting round 21
Removed Edge (42, 46) named 01030613050104120103071004080116
Starting round 22
Removed Edge (42, 47) named 01030613050104120103071004080215
Starting round 23
Starting round 24
Removed Edge (47, 50) named 01030613050104120104080903070514
Starting round 25
Removed Edge (53, 54) named 01030613050104120205011305010311
Starting round 26
Removed Edge (53, 55) named 01030613050104120205011305010412
Starting round 27
Removed Edge (53, 56) named 01030613050104120205011305020509
Starting round 28
Removed Edge (53, 57) named 01030613050104120205011305020514
Starting round 29
Starting round 30
Removed Edge (57, 58) named 01030613050104120205011608010311
Starting round 31
Removed Edge (57, 59) named 01030613050104120205011608010412
Starting round 32
Removed Edge (57, 60) named 01030613050104120205011608020509
Starting round 33
Starting round 34
Removed Edge (60, 61) named 01030613050104120205021003060311
Starting round 35
Removed Edge (60, 62) named 01030613050104120205021003060412
Starting round 36
Removed Edge (60, 63) named 01030613050104120205021003070514
Starting round 37
Removed Edge (60, 64) named 01030613050104120205021004080116
Starting round 38
Removed Edge (60, 65) named 01030613050104120205021004080215
Starting round 39
Starting round 40
Removed Edge (65, 66) named 01030613050104120205021506030613
Starting round 41
Removed Edge (65, 67) named 01030613050104120205021506030710
Starting round 42
Removed Edge (65, 68) named 01030613050104120205021506040809
Starting round 43
Removed Edge (65, 69) named 01030613050104120205021507050113
Starting round 44
Removed Edge (65, 70) named 01030613050104120205021507050210
Starting round 45
Starting round 46
Removed Edge (70, 71) named 01030613050205090306031101030613
Starting round 47
Removed Edge (70, 72) named 01030613050205090306031101030710
Starting round 48
Removed Edge (70, 73) named 01030613050205090306031101040809
Starting round 49
Removed Edge (78, 80) named 01030613050205090306041201030710
Starting round 50
Removed Edge (78, 82) named 01030613050205090306041202050113
Starting round 51
Removed Edge (78, 83) named 01030613050205090306041202050116
Starting round 52
Removed Edge (78, 84) named 01030613050205090306041202050210
Starting round 53
Removed Edge (78, 85) named 01030613050205090306041202050215
Starting round 54
Removed Edge (86, 87) named 01030613050205090307051406030613
Starting round 55
Removed Edge (86, 88) named 01030613050205090307051406030710
Starting round 56
Removed Edge (86, 89) named 01030613050205090307051406040809
Starting round 57
Removed Edge (86, 90) named 01030613050205090307051407050113
Starting round 58
Removed Edge (86, 91) named 01030613050205090307051407050210
Starting round 59
Starting round 60
Removed Edge (95, 97) named 01030613050205090408021506030710
Starting round 61
Removed Edge (95, 99) named 01030613050205090408021507050113
Starting round 62
Removed Edge (95, 100) named 01030613050205090408021507050210
Starting round 63
Removed Edge (101, 103) named 01030613050205140603061305010412
Starting round 64
Removed Edge (106, 108) named 01030613050205140603071003060412
Starting round 65
Removed Edge (106, 110) named 01030613050205140603071004080116
Starting round 66
Removed Edge (106, 111) named 01030613050205140603071004080215
Starting round 67
Removed Edge (112, 113) named 01030613050205140604080903060311
Starting round 68
Removed Edge (112, 114) named 01030613050205140604080903060412
Starting round 69
Removed Edge (112, 115) named 01030613050205140604080903070514
Starting round 70
Removed Edge (112, 116) named 01030613050205140604080904080116
Starting round 71
Removed Edge (112, 117) named 01030613050205140604080904080215
Starting round 72
Starting round 73
Removed Edge (117, 120) named 01030613050205140705011305020509
Starting round 74
Removed Edge (122, 124) named 01030613050205140705021003060412
Starting round 75
Removed Edge (122, 126) named 01030613050205140705021004080116
Starting round 76
Removed Edge (122, 127) named 01030613050205140705021004080215
Starting round 77
Removed Edge (128, 130) named 01030710030603110103061305010412
Starting round 78
Removed Edge (133, 135) named 01030710030603110103071003060412
Starting round 79
Removed Edge (133, 137) named 01030710030603110103071004080116
Starting round 80
Removed Edge (133, 138) named 01030710030603110103071004080215
Starting round 81
Removed Edge (139, 140) named 01030710030603110104080903060311
Starting round 82
Removed Edge (139, 141) named 01030710030603110104080903060412
Starting round 83
Removed Edge (139, 142) named 01030710030603110104080903070514
Starting round 84
Removed Edge (139, 143) named 01030710030603110104080904080116
Starting round 85
Removed Edge (139, 144) named 01030710030603110104080904080215
Starting round 86
Starting round 87
Removed Edge (144, 147) named 01030710030603110205011305020509
Starting round 88
Removed Edge (153, 155) named 01030710030603110205021003060412
Starting round 89
Removed Edge (153, 157) named 01030710030603110205021004080116
Starting round 90
Removed Edge (153, 158) named 01030710030603110205021004080215
Starting round 91
Removed Edge (159, 161) named 01030710030603110205021506030710
Starting round 92
Removed Edge (159, 163) named 01030710030603110205021507050113
Starting round 93
Removed Edge (159, 164) named 01030710030603110205021507050210
Starting round 94
Removed Edge (165, 166) named 01030710030604120103061305010311
Starting round 95
Removed Edge (165, 167) named 01030710030604120103061305010412
Starting round 96
Removed Edge (165, 168) named 01030710030604120103061305020509
Starting round 97
Removed Edge (165, 169) named 01030710030604120103061305020514
Starting round 98
Starting round 99
Removed Edge (169, 170) named 01030710030604120103071003060311
Starting round 100
Removed Edge (169, 171) named 01030710030604120103071003060412
Starting round 101
Removed Edge (169, 172) named 01030710030604120103071003070514
Starting round 102
Removed Edge (169, 173) named 01030710030604120103071004080116
Starting round 103
Removed Edge (169, 174) named 01030710030604120103071004080215
Starting round 104
Starting round 105
Removed Edge (174, 175) named 01030710030604120104080903060311
Starting round 106
Removed Edge (174, 176) named 01030710030604120104080903060412
Starting round 107
Removed Edge (174, 177) named 01030710030604120104080903070514
Starting round 108
Removed Edge (174, 178) named 01030710030604120104080904080116
Starting round 109
Removed Edge (174, 179) named 01030710030604120104080904080215
Starting round 110
Starting round 111
Removed Edge (179, 180) named 01030710030604120205011305010311
Starting round 112
Removed Edge (179, 181) named 01030710030604120205011305010412
Starting round 113
Removed Edge (179, 182) named 01030710030604120205011305020509
Starting round 114
Removed Edge (179, 183) named 01030710030604120205011305020514
Starting round 115
Starting round 116
Removed Edge (183, 184) named 01030710030604120205011608010311
Starting round 117
Removed Edge (183, 185) named 01030710030604120205011608010412
Starting round 118
Removed Edge (183, 186) named 01030710030604120205011608020509
Starting round 119
Starting round 120
Removed Edge (186, 187) named 01030710030604120205021003060311
Starting round 121
Removed Edge (186, 188) named 01030710030604120205021003060412
Starting round 122
Removed Edge (186, 189) named 01030710030604120205021003070514
Starting round 123
Removed Edge (186, 190) named 01030710030604120205021004080116
Starting round 124
Removed Edge (186, 191) named 01030710030604120205021004080215
Starting round 125
Starting round 126
Removed Edge (191, 192) named 01030710030604120205021506030613
Starting round 127
Removed Edge (191, 193) named 01030710030604120205021506030710
Starting round 128
Removed Edge (191, 194) named 01030710030604120205021506040809
Starting round 129
Removed Edge (191, 195) named 01030710030604120205021507050113
Starting round 130
Removed Edge (191, 196) named 01030710030604120205021507050210
Starting round 131
Starting round 132
Starting round 133
Starting round 134
Starting round 135
Starting round 136
Starting round 137
Starting round 138
Removed Edge (192, 194) named 01030710030705140603061305010412
Starting round 139
Removed Edge (197, 199) named 01030710030705140603071003060412
Starting round 140
Removed Edge (197, 201) named 01030710030705140603071004080116
Starting round 141
Removed Edge (197, 202) named 01030710030705140603071004080215
Starting round 142
Removed Edge (203, 204) named 01030710030705140604080903060311
Starting round 143
Removed Edge (203, 205) named 01030710030705140604080903060412
Starting round 144
Removed Edge (203, 206) named 01030710030705140604080903070514
Starting round 145
Removed Edge (203, 207) named 01030710030705140604080904080116
Starting round 146
Removed Edge (203, 208) named 01030710030705140604080904080215
Starting round 147
Starting round 148
Removed Edge (208, 211) named 01030710030705140705011305020509
Starting round 149
Removed Edge (213, 215) named 01030710030705140705021003060412
Starting round 150
Removed Edge (213, 217) named 01030710030705140705021004080116
Starting round 151
Removed Edge (213, 218) named 01030710030705140705021004080215
Starting round 152
Removed Edge (219, 220) named 01030710040801160801031101030613
Starting round 153
Removed Edge (219, 221) named 01030710040801160801031101030710
Starting round 154
Removed Edge (219, 222) named 01030710040801160801031101040809
Starting round 155
Removed Edge (219, 223) named 01030710040801160801031102050113
Starting round 156
Removed Edge (219, 224) named 01030710040801160801031102050116
Starting round 157
Removed Edge (219, 225) named 01030710040801160801031102050210
Starting round 158
Removed Edge (219, 226) named 01030710040801160801031102050215
Starting round 159
Starting round 160
Removed Edge (226, 227) named 01030710040801160801041201030613
Starting round 161
Removed Edge (226, 228) named 01030710040801160801041201030710
Starting round 162
Removed Edge (226, 229) named 01030710040801160801041201040809
Starting round 163
Removed Edge (226, 230) named 01030710040801160801041202050113
Starting round 164
Removed Edge (226, 231) named 01030710040801160801041202050116
Starting round 165
Removed Edge (226, 232) named 01030710040801160801041202050210
Starting round 166
Removed Edge (226, 233) named 01030710040801160801041202050215
Starting round 167
Starting round 168
Removed Edge (233, 234) named 01030710040801160802050903060311
Starting round 169
Removed Edge (233, 235) named 01030710040801160802050903060412
Starting round 170
Removed Edge (233, 236) named 01030710040801160802050903070514
Starting round 171
Removed Edge (233, 237) named 01030710040801160802050904080116
Starting round 172
Removed Edge (233, 238) named 01030710040801160802050904080215
Starting round 173
Starting round 174
Starting round 175
Starting round 176
Starting round 177
Starting round 178
Starting round 179
Starting round 180
Removed Edge (234, 235) named 01030710040802150603061305010311
Starting round 181
Removed Edge (234, 236) named 01030710040802150603061305010412
Starting round 182
Removed Edge (234, 237) named 01030710040802150603061305020509
Starting round 183
Removed Edge (234, 238) named 01030710040802150603061305020514
Starting round 184
Starting round 185
Removed Edge (238, 239) named 01030710040802150603071003060311
Starting round 186
Removed Edge (238, 240) named 01030710040802150603071003060412
Starting round 187
Removed Edge (238, 241) named 01030710040802150603071003070514
Starting round 188
Removed Edge (238, 242) named 01030710040802150603071004080116
Starting round 189
Removed Edge (238, 243) named 01030710040802150603071004080215
Starting round 190
Starting round 191
Removed Edge (243, 244) named 01030710040802150604080903060311
Starting round 192
Removed Edge (243, 245) named 01030710040802150604080903060412
Starting round 193
Removed Edge (243, 246) named 01030710040802150604080903070514
Starting round 194
Removed Edge (243, 247) named 01030710040802150604080904080116
Starting round 195
Removed Edge (243, 248) named 01030710040802150604080904080215
Starting round 196
Starting round 197
Removed Edge (248, 249) named 01030710040802150705011305010311
Starting round 198
Removed Edge (248, 250) named 01030710040802150705011305010412
Starting round 199
Removed Edge (248, 251) named 01030710040802150705011305020509
Starting round 200
Removed Edge (248, 252) named 01030710040802150705011305020514
Starting round 201
Starting round 202
Removed Edge (252, 253) named 01030710040802150705021003060311
Starting round 203
Removed Edge (252, 254) named 01030710040802150705021003060412
Starting round 204
Removed Edge (252, 255) named 01030710040802150705021003070514
Starting round 205
Removed Edge (252, 256) named 01030710040802150705021004080116
Starting round 206
Removed Edge (252, 257) named 01030710040802150705021004080215
Starting round 207
Starting round 208
Starting round 209
Starting round 210
Starting round 211
Starting round 212
Starting round 213
Starting round 214
Removed Edge (253, 123) named 01040809030603110103061305010311
Starting round 215
Removed Edge (253, 124) named 01040809030603110103061305010412
Starting round 216
Removed Edge (253, 125) named 01040809030603110103061305020509
Starting round 217
Removed Edge (253, 126) named 01040809030603110103061305020514
Starting round 218
Starting round 219
Removed Edge (253, 128) named 01040809030603110103071003060311
Starting round 220
Removed Edge (253, 129) named 01040809030603110103071003070514
Starting round 221
Starting round 222
Removed Edge (253, 130) named 01040809030603110104080903060311
Starting round 223
Removed Edge (253, 131) named 01040809030603110104080903060412
Starting round 224
Removed Edge (253, 132) named 01040809030603110104080903070514
Starting round 225
Removed Edge (253, 133) named 01040809030603110104080904080116
Starting round 226
Removed Edge (253, 134) named 01040809030603110104080904080215
Starting round 227
Starting round 228
Removed Edge (253, 138) named 01040809030603110205011305020509
Starting round 229
Removed Edge (255, 146) named 01040809030603110205021003060412
Starting round 230
Removed Edge (255, 148) named 01040809030603110205021004080116
Starting round 231
Removed Edge (255, 149) named 01040809030603110205021004080215
Starting round 232
Removed Edge (256, 152) named 01040809030603110205021506030710
Starting round 233
Removed Edge (256, 154) named 01040809030603110205021507050113
Starting round 234
Removed Edge (256, 155) named 01040809030603110205021507050210
Starting round 235
Removed Edge (258, 160) named 01040809030604120103071003060311
Starting round 236
Removed Edge (258, 161) named 01040809030604120103071003070514
Starting round 237
Starting round 238
Removed Edge (258, 164) named 01040809030604120104080903070514
Starting round 239
Removed Edge (259, 167) named 01040809030604120205011305010311
Starting round 240
Removed Edge (259, 168) named 01040809030604120205011305010412
Starting round 241
Removed Edge (259, 169) named 01040809030604120205011305020509
Starting round 242
Removed Edge (259, 170) named 01040809030604120205011305020514
Starting round 243
Starting round 244
Removed Edge (259, 171) named 01040809030604120205011608010311
Starting round 245
Removed Edge (259, 172) named 01040809030604120205011608010412
Starting round 246
Removed Edge (259, 173) named 01040809030604120205011608020509
Starting round 247
Starting round 248
Removed Edge (259, 174) named 01040809030604120205021003060311
Starting round 249
Removed Edge (259, 175) named 01040809030604120205021003060412
Starting round 250
Removed Edge (259, 176) named 01040809030604120205021003070514
Starting round 251
Removed Edge (259, 177) named 01040809030604120205021004080116
Starting round 252
Removed Edge (259, 178) named 01040809030604120205021004080215
Starting round 253
Starting round 254
Removed Edge (259, 179) named 01040809030604120205021506030613
Starting round 255
Removed Edge (259, 180) named 01040809030604120205021506030710
Starting round 256
Removed Edge (259, 181) named 01040809030604120205021506040809
Starting round 257
Removed Edge (259, 182) named 01040809030604120205021507050113
Starting round 258
Removed Edge (259, 183) named 01040809030604120205021507050210
Starting round 259
Starting round 260
Removed Edge (259, 185) named 01040809030705140603061305010311
Starting round 261
Removed Edge (259, 186) named 01040809030705140603061305010412
Starting round 262
Removed Edge (259, 187) named 01040809030705140603061305020509
Starting round 263
Removed Edge (259, 188) named 01040809030705140603061305020514
Starting round 264
Starting round 265
Removed Edge (259, 190) named 01040809030705140603071003060311
Starting round 266
Removed Edge (259, 191) named 01040809030705140603071003060412
Starting round 267
Removed Edge (259, 192) named 01040809030705140603071003070514
Starting round 268
Removed Edge (259, 193) named 01040809030705140603071004080116
Starting round 269
Removed Edge (259, 194) named 01040809030705140603071004080215
Starting round 270
Starting round 271
Removed Edge (259, 195) named 01040809030705140604080903060311
Starting round 272
Removed Edge (259, 196) named 01040809030705140604080903060412
Starting round 273
Removed Edge (259, 197) named 01040809030705140604080903070514
Starting round 274
Removed Edge (259, 198) named 01040809030705140604080904080116
Starting round 275
Removed Edge (259, 199) named 01040809030705140604080904080215
Starting round 276
Starting round 277
Removed Edge (259, 201) named 01040809030705140705011305010311
Starting round 278
Removed Edge (259, 202) named 01040809030705140705011305010412
Starting round 279
Removed Edge (259, 203) named 01040809030705140705011305020509
Starting round 280
Removed Edge (259, 204) named 01040809030705140705011305020514
Starting round 281
Starting round 282
Removed Edge (259, 206) named 01040809030705140705021003060311
Starting round 283
Removed Edge (259, 207) named 01040809030705140705021003060412
Starting round 284
Removed Edge (259, 208) named 01040809030705140705021003070514
Starting round 285
Removed Edge (259, 209) named 01040809030705140705021004080116
Starting round 286
Removed Edge (259, 210) named 01040809030705140705021004080215
Starting round 287
Starting round 288
Starting round 289
Starting round 290
Starting round 291
Starting round 292
Starting round 293
Starting round 294
Removed Edge (255, 209) named 01040809040801160801031101040809
Starting round 295
Removed Edge (255, 210) named 01040809040801160801031102050113
Starting round 296
Removed Edge (255, 212) named 01040809040801160801031102050210
Starting round 297
Removed Edge (256, 215) named 01040809040801160801041201030710
Starting round 298
Removed Edge (256, 217) named 01040809040801160801041202050113
Starting round 299
Removed Edge (256, 218) named 01040809040801160801041202050116
Starting round 300
Removed Edge (256, 219) named 01040809040801160801041202050210
Starting round 301
Removed Edge (256, 220) named 01040809040801160801041202050215
Starting round 302
Removed Edge (257, 223) named 01040809040801160802050903070514
Starting round 303
Removed Edge (259, 230) named 01040809040802150603071003060311
Starting round 304
Removed Edge (259, 231) named 01040809040802150603071003060412
Starting round 305
Removed Edge (259, 232) named 01040809040802150603071003070514
Starting round 306
Removed Edge (259, 233) named 01040809040802150603071004080116
Starting round 307
Removed Edge (259, 234) named 01040809040802150603071004080215
Starting round 308
Starting round 309
Removed Edge (259, 237) named 01040809040802150604080903070514
Starting round 310
Removed Edge (260, 240) named 01040809040802150705011305010311
Starting round 311
Removed Edge (260, 241) named 01040809040802150705011305010412
Starting round 312
Removed Edge (260, 242) named 01040809040802150705011305020509
Starting round 313
Removed Edge (260, 243) named 01040809040802150705011305020514
Starting round 314
Starting round 315
Removed Edge (260, 244) named 01040809040802150705021003060311
Starting round 316
Removed Edge (260, 245) named 01040809040802150705021003060412
Starting round 317
Removed Edge (260, 246) named 01040809040802150705021003070514
Starting round 318
Removed Edge (260, 247) named 01040809040802150705021004080116
Starting round 319
Removed Edge (260, 248) named 01040809040802150705021004080215
Starting round 320
Starting round 321
Removed Edge (260, 2) named 02050113050103110103061305010412
Starting round 322
Removed Edge (260, 3) named 02050113050103110103061305020509
Starting round 323
Removed Edge (262, 8) named 02050113050103110104080903060311
Starting round 324
Removed Edge (262, 9) named 02050113050103110104080903060412
Starting round 325
Removed Edge (262, 10) named 02050113050103110104080904080116
Starting round 326
Removed Edge (262, 11) named 02050113050103110104080904080215
Starting round 327
Starting round 328
Removed Edge (262, 15) named 02050113050103110205011305020509
Starting round 329
Removed Edge (263, 18) named 02050113050103110205011608010311
Starting round 330
Removed Edge (263, 19) named 02050113050103110205011608010412
Starting round 331
Removed Edge (263, 20) named 02050113050103110205011608020509
Starting round 332
Starting round 333
Removed Edge (263, 23) named 02050113050103110205021003060412
Starting round 334
Removed Edge (263, 25) named 02050113050103110205021004080116
Starting round 335
Removed Edge (263, 26) named 02050113050103110205021004080215
Starting round 336
Removed Edge (264, 28) named 02050113050103110205021506030613
Starting round 337
Removed Edge (264, 29) named 02050113050103110205021506030710
Starting round 338
Removed Edge (264, 30) named 02050113050103110205021506040809
Starting round 339
Removed Edge (264, 31) named 02050113050103110205021507050113
Starting round 340
Removed Edge (264, 32) named 02050113050103110205021507050210
Starting round 341
Starting round 342
Removed Edge (264, 36) named 02050113050104120103061305020509
Starting round 343
Removed Edge (265, 38) named 02050113050104120103071003060311
Starting round 344
Removed Edge (265, 39) named 02050113050104120103071003070514
Starting round 345
Starting round 346
Removed Edge (266, 45) named 02050113050104120205011305010311
Starting round 347
Removed Edge (266, 46) named 02050113050104120205011305010412
Starting round 348
Removed Edge (266, 47) named 02050113050104120205011305020509
Starting round 349
Removed Edge (266, 48) named 02050113050104120205011305020514
Starting round 350
Starting round 351
Removed Edge (266, 49) named 02050113050104120205011608010311
Starting round 352
Removed Edge (266, 50) named 02050113050104120205011608010412
Starting round 353
Removed Edge (266, 51) named 02050113050104120205011608020509
Starting round 354
Starting round 355
Removed Edge (266, 52) named 02050113050104120205021003060311
Starting round 356
Removed Edge (266, 53) named 02050113050104120205021003060412
Starting round 357
Removed Edge (266, 54) named 02050113050104120205021003070514
Starting round 358
Removed Edge (266, 55) named 02050113050104120205021004080116
Starting round 359
Removed Edge (266, 56) named 02050113050104120205021004080215
Starting round 360
Starting round 361
Removed Edge (266, 57) named 02050113050104120205021506030613
Starting round 362
Removed Edge (266, 58) named 02050113050104120205021506030710
Starting round 363
Removed Edge (266, 59) named 02050113050104120205021506040809
Starting round 364
Removed Edge (266, 60) named 02050113050104120205021507050113
Starting round 365
Removed Edge (266, 61) named 02050113050104120205021507050210
Starting round 366
Starting round 367
Removed Edge (266, 63) named 02050113050205090306031101030613
Starting round 368
Removed Edge (266, 64) named 02050113050205090306031101030710
Starting round 369
Removed Edge (266, 65) named 02050113050205090306031101040809
Starting round 370
Removed Edge (266, 66) named 02050113050205090306031102050113
Starting round 371
Removed Edge (266, 67) named 02050113050205090306031102050116
Starting round 372
Removed Edge (266, 68) named 02050113050205090306031102050210
Starting round 373
Removed Edge (266, 69) named 02050113050205090306031102050215
Starting round 374
Starting round 375
Removed Edge (266, 71) named 02050113050205090306041201030613
Starting round 376
Removed Edge (266, 72) named 02050113050205090306041201030710
Starting round 377
Removed Edge (266, 73) named 02050113050205090306041201040809
Starting round 378
Removed Edge (266, 74) named 02050113050205090306041202050113
Starting round 379
Removed Edge (266, 75) named 02050113050205090306041202050116
Starting round 380
Removed Edge (266, 76) named 02050113050205090306041202050210
Starting round 381
Removed Edge (266, 77) named 02050113050205090306041202050215
Starting round 382
Starting round 383
Removed Edge (266, 78) named 02050113050205090307051406030613
Starting round 384
Removed Edge (266, 79) named 02050113050205090307051406030710
Starting round 385
Removed Edge (266, 80) named 02050113050205090307051406040809
Starting round 386
Removed Edge (266, 81) named 02050113050205090307051407050113
Starting round 387
Removed Edge (266, 82) named 02050113050205090307051407050210
Starting round 388
Starting round 389
Removed Edge (266, 84) named 02050113050205090408011608010311
Starting round 390
Removed Edge (266, 85) named 02050113050205090408011608010412
Starting round 391
Removed Edge (266, 86) named 02050113050205090408011608020509
Starting round 392
Starting round 393
Removed Edge (266, 88) named 02050113050205090408021506030613
Starting round 394
Removed Edge (266, 89) named 02050113050205090408021506030710
Starting round 395
Removed Edge (266, 90) named 02050113050205090408021506040809
Starting round 396
Removed Edge (266, 91) named 02050113050205090408021507050113
Starting round 397
Removed Edge (266, 92) named 02050113050205090408021507050210
Starting round 398
Starting round 399
Starting round 400
Starting round 401
Starting round 402
Starting round 403
Starting round 404
Starting round 405
Removed Edge (262, 93) named 02050113050205140603061305010412
Starting round 406
Removed Edge (263, 98) named 02050113050205140603071003060412
Starting round 407
Removed Edge (263, 100) named 02050113050205140603071004080116
Starting round 408
Removed Edge (263, 101) named 02050113050205140603071004080215
Starting round 409
Removed Edge (264, 102) named 02050113050205140604080903060311
Starting round 410
Removed Edge (264, 103) named 02050113050205140604080903060412
Starting round 411
Removed Edge (264, 104) named 02050113050205140604080903070514
Starting round 412
Removed Edge (264, 105) named 02050113050205140604080904080116
Starting round 413
Removed Edge (264, 106) named 02050113050205140604080904080215
Starting round 414
Starting round 415
Removed Edge (264, 110) named 02050113050205140705011305020509
Starting round 416
Removed Edge (265, 114) named 02050113050205140705021003060412
Starting round 417
Removed Edge (265, 116) named 02050113050205140705021004080116
Starting round 418
Removed Edge (265, 117) named 02050113050205140705021004080215
Starting round 419
Removed Edge (266, 268) named 02050116080103110103061305010412
Starting round 420
Removed Edge (266, 270) named 02050116080103110103061305020514
Starting round 421
Removed Edge (274, 275) named 02050116080103110104080903060311
Starting round 422
Removed Edge (274, 276) named 02050116080103110104080903060412
Starting round 423
Removed Edge (274, 277) named 02050116080103110104080904080116
Starting round 424
Removed Edge (274, 278) named 02050116080103110104080904080215
Starting round 425
Starting round 426
Removed Edge (278, 279) named 02050116080103110205011305010311
Starting round 427
Removed Edge (278, 280) named 02050116080103110205011305010412
Starting round 428
Removed Edge (278, 281) named 02050116080103110205011305020514
Starting round 429
Starting round 430
Removed Edge (285, 286) named 02050116080103110205021003060311
Starting round 431
Removed Edge (285, 287) named 02050116080103110205021003060412
Starting round 432
Removed Edge (285, 288) named 02050116080103110205021003070514
Starting round 433
Removed Edge (285, 289) named 02050116080103110205021004080116
Starting round 434
Removed Edge (285, 290) named 02050116080103110205021004080215
Starting round 435
Starting round 436
Removed Edge (290, 292) named 02050116080103110205021506030710
Starting round 437
Removed Edge (290, 294) named 02050116080103110205021507050113
Starting round 438
Removed Edge (290, 295) named 02050116080103110205021507050210
Starting round 439
Removed Edge (296, 300) named 02050116080104120103061305020514
Starting round 440
Removed Edge (301, 302) named 02050116080104120103071003060311
Starting round 441
Removed Edge (301, 303) named 02050116080104120103071003070514
Starting round 442
Starting round 443
Removed Edge (308, 309) named 02050116080104120205011305010311
Starting round 444
Removed Edge (308, 310) named 02050116080104120205011305010412
Starting round 445
Removed Edge (308, 311) named 02050116080104120205011305020514
Starting round 446
Starting round 447
Removed Edge (311, 312) named 02050116080104120205011608010311
Starting round 448
Removed Edge (311, 313) named 02050116080104120205011608010412
Starting round 449
Removed Edge (311, 314) named 02050116080104120205011608020509
Starting round 450
Starting round 451
Removed Edge (314, 315) named 02050116080104120205021003060311
Starting round 452
Removed Edge (314, 316) named 02050116080104120205021003060412
Starting round 453
Removed Edge (314, 317) named 02050116080104120205021003070514
Starting round 454
Removed Edge (314, 318) named 02050116080104120205021004080116
Starting round 455
Removed Edge (314, 319) named 02050116080104120205021004080215
Starting round 456
Starting round 457
Removed Edge (319, 320) named 02050116080104120205021506030613
Starting round 458
Removed Edge (319, 321) named 02050116080104120205021506030710
Starting round 459
Removed Edge (319, 322) named 02050116080104120205021506040809
Starting round 460
Removed Edge (319, 323) named 02050116080104120205021507050113
Starting round 461
Removed Edge (319, 324) named 02050116080104120205021507050210
Starting round 462
Starting round 463
Removed Edge (324, 325) named 02050116080205090306031101030613
Starting round 464
Removed Edge (324, 326) named 02050116080205090306031101030710
Starting round 465
Removed Edge (324, 327) named 02050116080205090306031101040809
Starting round 466
Removed Edge (332, 334) named 02050116080205090306041201030710
Starting round 467
Removed Edge (332, 336) named 02050116080205090306041202050113
Starting round 468
Removed Edge (332, 337) named 02050116080205090306041202050116
Starting round 469
Removed Edge (332, 338) named 02050116080205090306041202050210
Starting round 470
Removed Edge (332, 339) named 02050116080205090306041202050215
Starting round 471
Removed Edge (340, 341) named 02050116080205090307051406030613
Starting round 472
Removed Edge (340, 342) named 02050116080205090307051406030710
Starting round 473
Removed Edge (340, 343) named 02050116080205090307051406040809
Starting round 474
Removed Edge (340, 344) named 02050116080205090307051407050113
Starting round 475
Removed Edge (340, 345) named 02050116080205090307051407050210
Starting round 476
Starting round 477
Removed Edge (349, 351) named 02050116080205090408021506030710
Starting round 478
Removed Edge (349, 353) named 02050116080205090408021507050113
Starting round 479
Removed Edge (349, 354) named 02050116080205090408021507050210
Starting round 480
Removed Edge (355, 120) named 02050210030603110103061305010412
Starting round 481
Removed Edge (357, 126) named 02050210030603110104080903060311
Starting round 482
Removed Edge (357, 127) named 02050210030603110104080903060412
Starting round 483
Removed Edge (357, 128) named 02050210030603110104080904080116
Starting round 484
Removed Edge (357, 129) named 02050210030603110104080904080215
Starting round 485
Starting round 486
Removed Edge (359, 140) named 02050210030603110205021003060412
Starting round 487
Removed Edge (359, 142) named 02050210030603110205021004080116
Starting round 488
Removed Edge (359, 143) named 02050210030603110205021004080215
Starting round 489
Removed Edge (360, 146) named 02050210030603110205021506030710
Starting round 490
Removed Edge (360, 148) named 02050210030603110205021507050113
Starting round 491
Removed Edge (360, 149) named 02050210030603110205021507050210
Starting round 492
Removed Edge (361, 150) named 02050210030604120103061305010311
Starting round 493
Removed Edge (361, 151) named 02050210030604120103061305010412
Starting round 494
Removed Edge (361, 152) named 02050210030604120103061305020509
Starting round 495
Removed Edge (361, 153) named 02050210030604120103061305020514
Starting round 496
Starting round 497
Removed Edge (361, 154) named 02050210030604120103071003060311
Starting round 498
Removed Edge (361, 155) named 02050210030604120103071003070514
Starting round 499
Starting round 500
Removed Edge (361, 156) named 02050210030604120104080903060311
Starting round 501
Removed Edge (361, 157) named 02050210030604120104080903060412
Starting round 502
Removed Edge (361, 158) named 02050210030604120104080904080116
Starting round 503
Removed Edge (361, 159) named 02050210030604120104080904080215
Starting round 504
Starting round 505
Removed Edge (361, 160) named 02050210030604120205011305010311
Starting round 506
Removed Edge (361, 161) named 02050210030604120205011305010412
Starting round 507
Removed Edge (361, 162) named 02050210030604120205011305020514
Starting round 508
Starting round 509
Removed Edge (361, 163) named 02050210030604120205011608010311
Starting round 510
Removed Edge (361, 164) named 02050210030604120205011608010412
Starting round 511
Removed Edge (361, 165) named 02050210030604120205011608020509
Starting round 512
Starting round 513
Removed Edge (361, 166) named 02050210030604120205021003060311
Starting round 514
Removed Edge (361, 167) named 02050210030604120205021003060412
Starting round 515
Removed Edge (361, 168) named 02050210030604120205021003070514
Starting round 516
Removed Edge (361, 169) named 02050210030604120205021004080116
Starting round 517
Removed Edge (361, 170) named 02050210030604120205021004080215
Starting round 518
Starting round 519
Removed Edge (361, 171) named 02050210030604120205021506030613
Starting round 520
Removed Edge (361, 172) named 02050210030604120205021506030710
Starting round 521
Removed Edge (361, 173) named 02050210030604120205021506040809
Starting round 522
Removed Edge (361, 174) named 02050210030604120205021507050113
Starting round 523
Removed Edge (361, 175) named 02050210030604120205021507050210
Starting round 524
Starting round 525
Starting round 526
Starting round 527
Starting round 528
Starting round 529
Starting round 530
Starting round 531
Removed Edge (355, 174) named 02050210030705140603061305010412
Starting round 532
Removed Edge (356, 179) named 02050210030705140603071003060412
Starting round 533
Removed Edge (356, 181) named 02050210030705140603071004080116
Starting round 534
Removed Edge (356, 182) named 02050210030705140603071004080215
Starting round 535
Removed Edge (357, 183) named 02050210030705140604080903060311
Starting round 536
Removed Edge (357, 184) named 02050210030705140604080903060412
Starting round 537
Removed Edge (357, 185) named 02050210030705140604080903070514
Starting round 538
Removed Edge (357, 186) named 02050210030705140604080904080116
Starting round 539
Removed Edge (357, 187) named 02050210030705140604080904080215
Starting round 540
Starting round 541
Removed Edge (357, 191) named 02050210030705140705011305020509
Starting round 542
Removed Edge (358, 195) named 02050210030705140705021003060412
Starting round 543
Removed Edge (358, 197) named 02050210030705140705021004080116
Starting round 544
Removed Edge (358, 198) named 02050210030705140705021004080215
Starting round 545
Removed Edge (359, 199) named 02050210040801160801031101030613
Starting round 546
Removed Edge (359, 200) named 02050210040801160801031101030710
Starting round 547
Removed Edge (359, 201) named 02050210040801160801031101040809
Starting round 548
Removed Edge (359, 202) named 02050210040801160801031102050113
Starting round 549
Removed Edge (359, 203) named 02050210040801160801031102050116
Starting round 550
Removed Edge (359, 204) named 02050210040801160801031102050210
Starting round 551
Removed Edge (359, 205) named 02050210040801160801031102050215
Starting round 552
Starting round 553
Removed Edge (359, 206) named 02050210040801160801041201030613
Starting round 554
Removed Edge (359, 207) named 02050210040801160801041201030710
Starting round 555
Removed Edge (359, 208) named 02050210040801160801041201040809
Starting round 556
Removed Edge (359, 209) named 02050210040801160801041202050113
Starting round 557
Removed Edge (359, 210) named 02050210040801160801041202050116
Starting round 558
Removed Edge (359, 211) named 02050210040801160801041202050210
Starting round 559
Removed Edge (359, 212) named 02050210040801160801041202050215
Starting round 560
Starting round 561
Removed Edge (128, 130) named 01030710030603110205011305010412
Starting round 562
Removed Edge (132, 134) named 01030710030603110205011608010412
Starting round 563
Removed Edge (351, 130) named 02050210030603110205011305010412
Starting round 564
Removed Edge (352, 134) named 02050210030603110205011608010412
Starting round 565
Removed Edge (359, 213) named 02050210040801160802050903060311
Starting round 566
Removed Edge (359, 214) named 02050210040801160802050903060412
Starting round 567
Removed Edge (359, 215) named 02050210040801160802050903070514
Starting round 568
Removed Edge (359, 216) named 02050210040801160802050904080116
Starting round 569
Removed Edge (359, 217) named 02050210040801160802050904080215
Starting round 570
Starting round 571
Starting round 572
Starting round 573
Starting round 574
Starting round 575
Starting round 576
Starting round 577
Removed Edge (353, 214) named 02050210040802150603061305010311
Starting round 578
Removed Edge (353, 215) named 02050210040802150603061305010412
Starting round 579
Removed Edge (353, 216) named 02050210040802150603061305020509
Starting round 580
Removed Edge (353, 217) named 02050210040802150603061305020514
Starting round 581
Starting round 582
Removed Edge (353, 218) named 02050210040802150603071003060311
Starting round 583
Removed Edge (353, 219) named 02050210040802150603071003060412
Starting round 584
Removed Edge (353, 220) named 02050210040802150603071003070514
Starting round 585
Removed Edge (353, 221) named 02050210040802150603071004080116
Starting round 586
Removed Edge (353, 222) named 02050210040802150603071004080215
Starting round 587
Starting round 588
Removed Edge (353, 223) named 02050210040802150604080903060311
Starting round 589
Removed Edge (353, 224) named 02050210040802150604080903060412
Starting round 590
Removed Edge (353, 225) named 02050210040802150604080903070514
Starting round 591
Removed Edge (353, 226) named 02050210040802150604080904080116
Starting round 592
Removed Edge (353, 227) named 02050210040802150604080904080215
Starting round 593
Starting round 594
Removed Edge (353, 228) named 02050210040802150705011305010311
Starting round 595
Removed Edge (353, 229) named 02050210040802150705011305010412
Starting round 596
Removed Edge (353, 230) named 02050210040802150705011305020509
Starting round 597
Removed Edge (353, 231) named 02050210040802150705011305020514
Starting round 598
Starting round 599
Removed Edge (353, 232) named 02050210040802150705021003060311
Starting round 600
Removed Edge (353, 233) named 02050210040802150705021003060412
Starting round 601
Removed Edge (353, 234) named 02050210040802150705021003070514
Starting round 602
Removed Edge (353, 235) named 02050210040802150705021004080116
Starting round 603
Removed Edge (353, 236) named 02050210040802150705021004080215
Starting round 604
Starting round 605
Starting round 606
Starting round 607
Starting round 608
Starting round 609
Starting round 610
Starting round 611
Removed Edge (347, 350) named 02050215060306130501031101040809
Starting round 612
Removed Edge (355, 357) named 02050215060306130501041201030710
Starting round 613
Removed Edge (355, 359) named 02050215060306130501041202050113
Starting round 614
Removed Edge (355, 360) named 02050215060306130501041202050116
Starting round 615
Removed Edge (355, 361) named 02050215060306130501041202050210
Starting round 616
Removed Edge (355, 362) named 02050215060306130501041202050215
Starting round 617
Removed Edge (363, 366) named 02050215060306130502050903070514
Starting round 618
Removed Edge (369, 372) named 02050215060306130502051406040809
Starting round 619
Removed Edge (375, 376) named 02050215060307100306031101030613
Starting round 620
Removed Edge (375, 377) named 02050215060307100306031101030710
Starting round 621
Removed Edge (375, 378) named 02050215060307100306031101040809
Starting round 622
Removed Edge (375, 379) named 02050215060307100306031102050113
Starting round 623
Removed Edge (375, 380) named 02050215060307100306031102050116
Starting round 624
Removed Edge (375, 381) named 02050215060307100306031102050210
Starting round 625
Removed Edge (375, 382) named 02050215060307100306031102050215
Starting round 626
Starting round 627
Removed Edge (382, 383) named 02050215060307100306041201030613
Starting round 628
Removed Edge (382, 384) named 02050215060307100306041201030710
Starting round 629
Removed Edge (382, 385) named 02050215060307100306041201040809
Starting round 630
Removed Edge (382, 386) named 02050215060307100306041202050113
Starting round 631
Removed Edge (382, 387) named 02050215060307100306041202050116
Starting round 632
Removed Edge (382, 388) named 02050215060307100306041202050210
Starting round 633
Removed Edge (382, 389) named 02050215060307100306041202050215
Starting round 634
Starting round 635
Removed Edge (389, 390) named 02050215060307100307051406030613
Starting round 636
Removed Edge (389, 391) named 02050215060307100307051406030710
Starting round 637
Removed Edge (389, 392) named 02050215060307100307051406040809
Starting round 638
Removed Edge (389, 393) named 02050215060307100307051407050113
Starting round 639
Removed Edge (389, 394) named 02050215060307100307051407050210
Starting round 640
Starting round 641
Removed Edge (394, 395) named 02050215060307100408011608010311
Starting round 642
Removed Edge (394, 396) named 02050215060307100408011608010412
Starting round 643
Removed Edge (394, 397) named 02050215060307100408011608020509
Starting round 644
Starting round 645
Removed Edge (397, 398) named 02050215060307100408021506030613
Starting round 646
Removed Edge (397, 399) named 02050215060307100408021506030710
Starting round 647
Removed Edge (397, 400) named 02050215060307100408021506040809
Starting round 648
Removed Edge (397, 401) named 02050215060307100408021507050113
Starting round 649
Removed Edge (397, 402) named 02050215060307100408021507050210
Starting round 650
Starting round 651
Starting round 652
Starting round 653
Starting round 654
Starting round 655
Starting round 656
Starting round 657
Removed Edge (396, 397) named 02050215060408090306031101030613
Starting round 658
Removed Edge (396, 398) named 02050215060408090306031101030710
Starting round 659
Removed Edge (396, 399) named 02050215060408090306031101040809
Starting round 660
Removed Edge (404, 406) named 02050215060408090306041201030710
Starting round 661
Removed Edge (404, 408) named 02050215060408090306041202050113
Starting round 662
Removed Edge (404, 409) named 02050215060408090306041202050116
Starting round 663
Removed Edge (404, 410) named 02050215060408090306041202050210
Starting round 664
Removed Edge (404, 411) named 02050215060408090306041202050215
Starting round 665
Removed Edge (412, 413) named 02050215060408090307051406030613
Starting round 666
Removed Edge (412, 414) named 02050215060408090307051406030710
Starting round 667
Removed Edge (412, 415) named 02050215060408090307051406040809
Starting round 668
Removed Edge (412, 416) named 02050215060408090307051407050113
Starting round 669
Removed Edge (412, 417) named 02050215060408090307051407050210
Starting round 670
Starting round 671
Removed Edge (421, 423) named 02050215060408090408021506030710
Starting round 672
Removed Edge (421, 425) named 02050215060408090408021507050113
Starting round 673
Removed Edge (421, 426) named 02050215060408090408021507050210
Starting round 674
Removed Edge (427, 428) named 02050215070501130501031101030613
Starting round 675
Removed Edge (427, 429) named 02050215070501130501031101030710
Starting round 676
Removed Edge (427, 430) named 02050215070501130501031101040809
Starting round 677
Removed Edge (427, 431) named 02050215070501130501031102050113
Starting round 678
Removed Edge (427, 432) named 02050215070501130501031102050116
Starting round 679
Removed Edge (427, 433) named 02050215070501130501031102050210
Starting round 680
Removed Edge (427, 434) named 02050215070501130501031102050215
Starting round 681
Starting round 682
Removed Edge (434, 435) named 02050215070501130501041201030613
Starting round 683
Removed Edge (434, 436) named 02050215070501130501041201030710
Starting round 684
Removed Edge (434, 437) named 02050215070501130501041201040809
Starting round 685
Removed Edge (434, 438) named 02050215070501130501041202050113
Starting round 686
Removed Edge (434, 439) named 02050215070501130501041202050116
Starting round 687
Removed Edge (434, 440) named 02050215070501130501041202050210
Starting round 688
Removed Edge (434, 441) named 02050215070501130501041202050215
Starting round 689
Starting round 690
Removed Edge (341, 343) named 02050215060306130501031101030710
Starting round 691
Removed Edge (441, 442) named 02050215070501130502050903060311
Starting round 692
Removed Edge (441, 443) named 02050215070501130502050903060412
Starting round 693
Removed Edge (441, 444) named 02050215070501130502050903070514
Starting round 694
Removed Edge (441, 445) named 02050215070501130502050904080116
Starting round 695
Removed Edge (441, 446) named 02050215070501130502050904080215
Starting round 696
Starting round 697
Removed Edge (446, 447) named 02050215070501130502051406030613
Starting round 698
Removed Edge (446, 448) named 02050215070501130502051406030710
Starting round 699
Removed Edge (446, 449) named 02050215070501130502051406040809
Starting round 700
Removed Edge (446, 450) named 02050215070501130502051407050113
Starting round 701
Removed Edge (446, 451) named 02050215070501130502051407050210
Starting round 702
Starting round 703
Starting round 704
Starting round 705
Starting round 706
Starting round 707
Starting round 708
Starting round 709
Removed Edge (335, 336) named 02050215060306130501031101030613
Starting round 710
Removed Edge (445, 446) named 02050215070502100306031101030613
Starting round 711
Removed Edge (445, 447) named 02050215070502100306031101030710
Starting round 712
Removed Edge (445, 448) named 02050215070502100306031101040809
Starting round 713
Removed Edge (445, 449) named 02050215070502100306031102050113
Starting round 714
Removed Edge (445, 450) named 02050215070502100306031102050116
Starting round 715
Removed Edge (445, 451) named 02050215070502100306031102050210
Starting round 716
Removed Edge (445, 452) named 02050215070502100306031102050215
Starting round 717
Starting round 718
Removed Edge (452, 453) named 02050215070502100306041201030613
Starting round 719
Removed Edge (452, 454) named 02050215070502100306041201030710
Starting round 720
Removed Edge (452, 455) named 02050215070502100306041201040809
Starting round 721
Removed Edge (452, 456) named 02050215070502100306041202050113
Starting round 722
Removed Edge (452, 457) named 02050215070502100306041202050116
Starting round 723
Removed Edge (452, 458) named 02050215070502100306041202050210
Starting round 724
Removed Edge (452, 459) named 02050215070502100306041202050215
Starting round 725
Starting round 726
Removed Edge (459, 460) named 02050215070502100307051406030613
Starting round 727
Removed Edge (459, 461) named 02050215070502100307051406030710
Starting round 728
Removed Edge (459, 462) named 02050215070502100307051406040809
Starting round 729
Removed Edge (459, 463) named 02050215070502100307051407050113
Starting round 730
Removed Edge (459, 464) named 02050215070502100307051407050210
Starting round 731
Starting round 732
Removed Edge (464, 465) named 02050215070502100408011608010311
Starting round 733
Removed Edge (464, 466) named 02050215070502100408011608010412
Starting round 734
Removed Edge (464, 467) named 02050215070502100408011608020509
Starting round 735
Starting round 736
Removed Edge (467, 468) named 02050215070502100408021506030613
Starting round 737
Removed Edge (467, 469) named 02050215070502100408021506030710
Starting round 738
Removed Edge (467, 470) named 02050215070502100408021506040809
Starting round 739
Removed Edge (467, 471) named 02050215070502100408021507050113
Starting round 740
Removed Edge (467, 472) named 02050215070502100408021507050210
Starting round 741
Starting round 742
Starting round 743
Starting round 744
Starting round 745
Starting round 746
Starting round 747
Starting round 748
Removed Edge (108, 26) named 03060311010306130501041201030613
Starting round 749
Removed Edge (108, 33) named 03060311010306130501041201040809
Starting round 750
Starting round 751
Removed Edge (113, 220) named 03060311010408090306031102050113
Starting round 752
Removed Edge (113, 221) named 03060311010408090306031102050116
Starting round 753
Removed Edge (113, 222) named 03060311010408090306031102050210
Starting round 754
Removed Edge (113, 223) named 03060311010408090306031102050215
Starting round 755
Starting round 756
Removed Edge (113, 223) named 03060311010408090306041201030613
Starting round 757
Removed Edge (113, 224) named 03060311010408090306041201040809
Starting round 758
Starting round 759
Removed Edge (113, 224) named 03060311010408090408011608010311
Starting round 760
Removed Edge (113, 225) named 03060311010408090408011608010412
Starting round 761
Removed Edge (113, 226) named 03060311010408090408011608020509
Starting round 762
Starting round 763
Removed Edge (113, 226) named 03060311010408090408021506030613
Starting round 764
Removed Edge (113, 227) named 03060311010408090408021506040809
Starting round 765
Starting round 766
Starting round 767
Starting round 768
Starting round 769
Starting round 770
Starting round 771
Removed Edge (126, 0) named 03060412010306130501031101030613
Starting round 772
Removed Edge (126, 5) named 03060412010306130501031101030710
Starting round 773
Removed Edge (130, 105) named 03060412010307100306031101030613
Starting round 774
Removed Edge (130, 109) named 03060412010307100306031101030710
Starting round 775
Removed Edge (130, 112) named 03060412010307100306031102050113
Starting round 776
Removed Edge (130, 116) named 03060412010307100306031102050116
Starting round 777
Removed Edge (130, 120) named 03060412010307100306031102050210
Starting round 778
Removed Edge (130, 123) named 03060412010307100306031102050215
Starting round 779
Starting round 780
Removed Edge (130, 145) named 03060412010307100307051406030613
Starting round 781
Removed Edge (130, 150) named 03060412010307100307051406030710
Starting round 782
Removed Edge (130, 161) named 03060412010307100307051407050113
Starting round 783
Removed Edge (130, 166) named 03060412010307100307051407050210
Starting round 784
Starting round 785
Starting round 786
Starting round 787
Starting round 788
Starting round 789
Starting round 790
Removed Edge (133, 223) named 03060412020501130501031101030613
Starting round 791
Removed Edge (133, 224) named 03060412020501130501031101030710
Starting round 792
Removed Edge (133, 225) named 03060412020501130501031102050113
Starting round 793
Removed Edge (133, 226) named 03060412020501130501031102050210
Starting round 794
Starting round 795
Removed Edge (133, 226) named 03060412020501130501041201030613
Starting round 796
Removed Edge (133, 227) named 03060412020501130501041201040809
Starting round 797
Starting round 798
Removed Edge (133, 227) named 03060412020501130502051406030613
Starting round 799
Removed Edge (133, 228) named 03060412020501130502051406030710
Starting round 800
Removed Edge (133, 229) named 03060412020501130502051407050113
Starting round 801
Removed Edge (133, 230) named 03060412020501130502051407050210
Starting round 802
Starting round 803
Starting round 804
Starting round 805
Starting round 806
Starting round 807
Starting round 808
Removed Edge (132, 229) named 03060412020501160801031101030613
Starting round 809
Removed Edge (132, 234) named 03060412020501160801031101030710
Starting round 810
Removed Edge (132, 244) named 03060412020501160801031102050116
Starting round 811
Removed Edge (132, 250) named 03060412020501160801031102050215
Starting round 812
Starting round 813
Removed Edge (132, 252) named 03060412020501160801041201030613
Starting round 814
Removed Edge (132, 259) named 03060412020501160801041201040809
Starting round 815
Starting round 816
Removed Edge (132, 273) named 03060412020501160802050903060311
Starting round 817
Removed Edge (132, 280) named 03060412020501160802050903060412
Starting round 818
Removed Edge (132, 291) named 03060412020501160802050904080116
Starting round 819
Removed Edge (132, 295) named 03060412020501160802050904080215
Starting round 820
Starting round 821
Starting round 822
Starting round 823
Starting round 824
Starting round 825
Starting round 826
Removed Edge (131, 298) named 03060412020502100306031101030613
Starting round 827
Removed Edge (131, 299) named 03060412020502100306031101030710
Starting round 828
Removed Edge (131, 300) named 03060412020502100306031102050113
Starting round 829
Removed Edge (131, 301) named 03060412020502100306031102050116
Starting round 830
Removed Edge (131, 302) named 03060412020502100306031102050210
Starting round 831
Removed Edge (131, 303) named 03060412020502100306031102050215
Starting round 832
Starting round 833
Removed Edge (131, 303) named 03060412020502100307051406030613
Starting round 834
Removed Edge (131, 304) named 03060412020502100307051406030710
Starting round 835
Removed Edge (131, 305) named 03060412020502100307051407050113
Starting round 836
Removed Edge (131, 306) named 03060412020502100307051407050210
Starting round 837
Starting round 838
Starting round 839
Starting round 840
Starting round 841
Starting round 842
Starting round 843
Removed Edge (130, 304) named 03060412020502150603061305010311
Starting round 844
Removed Edge (130, 312) named 03060412020502150603061305010412
Starting round 845
Removed Edge (130, 320) named 03060412020502150603061305020509
Starting round 846
Removed Edge (130, 326) named 03060412020502150603061305020514
Starting round 847
Starting round 848
Removed Edge (130, 353) named 03060412020502150604080903060311
Starting round 849
Removed Edge (130, 360) named 03060412020502150604080903060412
Starting round 850
Removed Edge (130, 369) named 03060412020502150604080904080116
Starting round 851
Removed Edge (130, 373) named 03060412020502150604080904080215
Starting round 852
Starting round 853
Starting round 854
Starting round 855
Starting round 856
Starting round 857
Starting round 858
Removed Edge (130, 303) named 03070514060306130501031101040809
Starting round 859
Removed Edge (131, 309) named 03070514060306130501041201030613
Starting round 860
Removed Edge (131, 310) named 03070514060306130501041201030710
Starting round 861
Removed Edge (131, 311) named 03070514060306130501041201040809
Starting round 862
Removed Edge (131, 312) named 03070514060306130501041202050113
Starting round 863
Removed Edge (131, 313) named 03070514060306130501041202050116
Starting round 864
Removed Edge (131, 314) named 03070514060306130501041202050210
Starting round 865
Removed Edge (131, 315) named 03070514060306130501041202050215
Starting round 866
Starting round 867
Removed Edge (131, 318) named 03070514060306130502050903070514
Starting round 868
Removed Edge (132, 324) named 03070514060306130502051406040809
Starting round 869
Removed Edge (135, 333) named 03070514060307100306041201030613
Starting round 870
Removed Edge (135, 334) named 03070514060307100306041201040809
Starting round 871
Starting round 872
Removed Edge (135, 336) named 03070514060307100307051406040809
Starting round 873
Removed Edge (136, 339) named 03070514060307100408011608010311
Starting round 874
Removed Edge (136, 340) named 03070514060307100408011608010412
Starting round 875
Removed Edge (136, 341) named 03070514060307100408011608020509
Starting round 876
Starting round 877
Removed Edge (136, 341) named 03070514060307100408021506030613
Starting round 878
Removed Edge (136, 342) named 03070514060307100408021506030710
Starting round 879
Removed Edge (136, 343) named 03070514060307100408021506040809
Starting round 880
Removed Edge (136, 344) named 03070514060307100408021507050113
Starting round 881
Removed Edge (136, 345) named 03070514060307100408021507050210
Starting round 882
Starting round 883
Removed Edge (136, 346) named 03070514060408090306031101030613
Starting round 884
Removed Edge (136, 347) named 03070514060408090306031101030710
Starting round 885
Removed Edge (136, 348) named 03070514060408090306031102050113
Starting round 886
Removed Edge (136, 349) named 03070514060408090306031102050116
Starting round 887
Removed Edge (136, 350) named 03070514060408090306031102050210
Starting round 888
Removed Edge (136, 351) named 03070514060408090306031102050215
Starting round 889
Starting round 890
Removed Edge (136, 352) named 03070514060408090306041201030613
Starting round 891
Removed Edge (136, 353) named 03070514060408090306041201040809
Starting round 892
Starting round 893
Removed Edge (136, 353) named 03070514060408090307051406030613
Starting round 894
Removed Edge (136, 354) named 03070514060408090307051406030710
Starting round 895
Removed Edge (136, 355) named 03070514060408090307051406040809
Starting round 896
Removed Edge (136, 356) named 03070514060408090307051407050113
Starting round 897
Removed Edge (136, 357) named 03070514060408090307051407050210
Starting round 898
Starting round 899
Removed Edge (136, 358) named 03070514060408090408011608010311
Starting round 900
Removed Edge (136, 359) named 03070514060408090408011608010412
Starting round 901
Removed Edge (136, 360) named 03070514060408090408011608020509
Starting round 902
Starting round 903
Removed Edge (136, 361) named 03070514060408090408021506030613
Starting round 904
Removed Edge (136, 362) named 03070514060408090408021506030710
Starting round 905
Removed Edge (136, 363) named 03070514060408090408021506040809
Starting round 906
Removed Edge (136, 364) named 03070514060408090408021507050113
Starting round 907
Removed Edge (136, 365) named 03070514060408090408021507050210
Starting round 908
Starting round 909
Starting round 910
Starting round 911
Starting round 912
Starting round 913
Starting round 914
Removed Edge (136, 363) named 03070514070501130501031101040809
Starting round 915
Removed Edge (136, 365) named 03070514070501130501031102050116
Starting round 916
Removed Edge (136, 367) named 03070514070501130501031102050215
Starting round 917
Removed Edge (137, 369) named 03070514070501130501041201030710
Starting round 918
Removed Edge (137, 371) named 03070514070501130501041202050113
Starting round 919
Removed Edge (137, 372) named 03070514070501130501041202050116
Starting round 920
Removed Edge (137, 373) named 03070514070501130501041202050210
Starting round 921
Removed Edge (137, 374) named 03070514070501130501041202050215
Starting round 922
Removed Edge (138, 375) named 03070514070501130502050903060311
Starting round 923
Removed Edge (138, 376) named 03070514070501130502050903060412
Starting round 924
Removed Edge (138, 377) named 03070514070501130502050903070514
Starting round 925
Removed Edge (138, 378) named 03070514070501130502050904080116
Starting round 926
Removed Edge (138, 379) named 03070514070501130502050904080215
Starting round 927
Starting round 928
Removed Edge (138, 381) named 03070514070501130502051406040809
Starting round 929
Removed Edge (141, 390) named 03070514070502100306041201030613
Starting round 930
Removed Edge (141, 391) named 03070514070502100306041201040809
Starting round 931
Starting round 932
Removed Edge (142, 395) named 03070514070502100408011608010311
Starting round 933
Removed Edge (142, 396) named 03070514070502100408011608010412
Starting round 934
Removed Edge (142, 397) named 03070514070502100408011608020509
Starting round 935
Starting round 936
Removed Edge (142, 397) named 03070514070502100408021506030613
Starting round 937
Removed Edge (142, 398) named 03070514070502100408021506030710
Starting round 938
Removed Edge (142, 399) named 03070514070502100408021506040809
Starting round 939
Removed Edge (142, 400) named 03070514070502100408021507050113
Starting round 940
Removed Edge (142, 401) named 03070514070502100408021507050210
Starting round 941
Starting round 942
Removed Edge (142, 207) named 04080116080103110103061305010412
Starting round 943
Starting round 944
Removed Edge (142, 208) named 04080116080103110103061305020514
Starting round 945
Starting round 946
Removed Edge (144, 211) named 04080116080103110104080903060311
Starting round 947
Starting round 948
Removed Edge (144, 211) named 04080116080103110104080903060412
Starting round 949
Starting round 950
Removed Edge (144, 211) named 04080116080103110104080904080116
Starting round 951
Starting round 952
Removed Edge (144, 211) named 04080116080103110104080904080215
Starting round 953
Starting round 954
Starting round 955
Removed Edge (144, 210) named 04080116080103110205011305010311
Starting round 956
Starting round 957
Removed Edge (144, 210) named 04080116080103110205011305010412
Starting round 958
Starting round 959
Removed Edge (144, 210) named 04080116080103110205011305020514
Starting round 960
Starting round 961
Starting round 962
Removed Edge (145, 213) named 04080116080103110205021003060311
Starting round 963
Starting round 964
Removed Edge (145, 213) named 04080116080103110205021003070514
Starting round 965
Starting round 966
Starting round 967
Removed Edge (146, 219) named 04080116080104120103061305020514
Starting round 968
Starting round 969
Removed Edge (147, 219) named 04080116080104120103071003060311
Starting round 970
Starting round 971
Removed Edge (147, 219) named 04080116080104120103071003070514
Starting round 972
Starting round 973
Starting round 974
Removed Edge (148, 223) named 04080116080104120205011305010311
Starting round 975
Starting round 976
Removed Edge (148, 223) named 04080116080104120205011305010412
Starting round 977
Starting round 978
Removed Edge (148, 223) named 04080116080104120205011305020514
Starting round 979
Starting round 980
Starting round 981
Removed Edge (148, 222) named 04080116080104120205011608010311
Starting round 982
Starting round 983
Removed Edge (148, 222) named 04080116080104120205011608010412
Starting round 984
Starting round 985
Removed Edge (148, 222) named 04080116080104120205011608020509
Starting round 986
Starting round 987
Starting round 988
Removed Edge (148, 221) named 04080116080104120205021003060311
Starting round 989
Starting round 990
Removed Edge (148, 221) named 04080116080104120205021003070514
Starting round 991
Starting round 992
Starting round 993
Removed Edge (148, 220) named 04080116080104120205021506030613
Starting round 994
Starting round 995
Removed Edge (148, 220) named 04080116080104120205021506040809
Starting round 996
Starting round 997
Starting round 998
Removed Edge (148, 220) named 04080116080205090306031101030613
Starting round 999
Starting round 1000
Removed Edge (148, 220) named 04080116080205090306031101030710
Starting round 1001
Starting round 1002
Removed Edge (150, 227) named 04080116080205090307051406030613
Starting round 1003
Starting round 1004
Removed Edge (150, 227) named 04080116080205090307051406030710
Starting round 1005
Starting round 1006
Removed Edge (150, 227) named 04080116080205090307051407050113
Starting round 1007
Starting round 1008
Removed Edge (150, 227) named 04080116080205090307051407050210
Starting round 1009
Starting round 1010
Starting round 1011
Removed Edge (151, 232) named 04080116080205090408021506030710
Starting round 1012
Starting round 1013
Removed Edge (151, 233) named 04080116080205090408021507050113
Starting round 1014
Starting round 1015
Removed Edge (151, 233) named 04080116080205090408021507050210
Starting round 1016
Starting round 1017
Removed Edge (152, 244) named 04080215060306130501031101030613
Starting round 1018
Removed Edge (152, 245) named 04080215060306130501031101030710
Starting round 1019
Removed Edge (152, 246) named 04080215060306130501031101040809
Starting round 1020
Removed Edge (153, 253) named 04080215060306130501041201030710
Starting round 1021
Removed Edge (153, 255) named 04080215060306130501041202050113
Starting round 1022
Removed Edge (153, 256) named 04080215060306130501041202050116
Starting round 1023
Removed Edge (153, 257) named 04080215060306130501041202050210
Starting round 1024
Removed Edge (153, 258) named 04080215060306130501041202050215
Starting round 1025
Removed Edge (154, 262) named 04080215060306130502050903070514
Starting round 1026
Removed Edge (155, 268) named 04080215060306130502051406040809
Starting round 1027
Removed Edge (156, 271) named 04080215060307100306031101030613
Starting round 1028
Removed Edge (156, 272) named 04080215060307100306031101030710
Starting round 1029
Removed Edge (156, 273) named 04080215060307100306031102050113
Starting round 1030
Removed Edge (156, 274) named 04080215060307100306031102050116
Starting round 1031
Removed Edge (156, 275) named 04080215060307100306031102050210
Starting round 1032
Removed Edge (156, 276) named 04080215060307100306031102050215
Starting round 1033
Starting round 1034
Removed Edge (156, 276) named 04080215060307100306041201030613
Starting round 1035
Removed Edge (156, 277) named 04080215060307100306041201040809
Starting round 1036
Starting round 1037
Removed Edge (156, 277) named 04080215060307100307051406030613
Starting round 1038
Removed Edge (156, 278) named 04080215060307100307051406030710
Starting round 1039
Removed Edge (156, 279) named 04080215060307100307051407050113
Starting round 1040
Removed Edge (156, 280) named 04080215060307100307051407050210
Starting round 1041
Starting round 1042
Removed Edge (156, 280) named 04080215060307100408011608010311
Starting round 1043
Removed Edge (156, 281) named 04080215060307100408011608010412
Starting round 1044
Removed Edge (156, 282) named 04080215060307100408011608020509
Starting round 1045
Starting round 1046
Removed Edge (156, 282) named 04080215060307100408021506030613
Starting round 1047
Removed Edge (156, 283) named 04080215060307100408021506030710
Starting round 1048
Removed Edge (156, 284) named 04080215060307100408021506040809
Starting round 1049
Removed Edge (156, 285) named 04080215060307100408021507050113
Starting round 1050
Removed Edge (156, 286) named 04080215060307100408021507050210
Starting round 1051
Starting round 1052
Starting round 1053
Starting round 1054
Starting round 1055
Starting round 1056
Removed Edge (155, 285) named 04080215060408090306031101030613
Starting round 1057
Removed Edge (155, 286) named 04080215060408090306031101030710
Starting round 1058
Removed Edge (157, 294) named 04080215060408090307051406030613
Starting round 1059
Removed Edge (157, 295) named 04080215060408090307051406030710
Starting round 1060
Removed Edge (157, 296) named 04080215060408090307051407050113
Starting round 1061
Removed Edge (157, 297) named 04080215060408090307051407050210
Starting round 1062
Starting round 1063
Removed Edge (158, 304) named 04080215060408090408021507050113
Starting round 1064
Removed Edge (158, 305) named 04080215060408090408021507050210
Starting round 1065
Removed Edge (159, 306) named 04080215070501130501031101030613
Starting round 1066
Removed Edge (159, 307) named 04080215070501130501031101030710
Starting round 1067
Removed Edge (159, 308) named 04080215070501130501031101040809
Starting round 1068
Removed Edge (159, 309) named 04080215070501130501031102050113
Starting round 1069
Removed Edge (159, 310) named 04080215070501130501031102050116
Starting round 1070
Removed Edge (159, 311) named 04080215070501130501031102050210
Starting round 1071
Removed Edge (159, 312) named 04080215070501130501031102050215
Starting round 1072
Starting round 1073
Removed Edge (159, 312) named 04080215070501130501041201030613
Starting round 1074
Removed Edge (159, 313) named 04080215070501130501041201030710
Starting round 1075
Removed Edge (159, 314) named 04080215070501130501041201040809
Starting round 1076
Removed Edge (159, 315) named 04080215070501130501041202050113
Starting round 1077
Removed Edge (159, 316) named 04080215070501130501041202050116
Starting round 1078
Removed Edge (159, 317) named 04080215070501130501041202050210
Starting round 1079
Removed Edge (159, 318) named 04080215070501130501041202050215
Starting round 1080
Starting round 1081
Removed Edge (159, 318) named 04080215070501130502050903060311
Starting round 1082
Removed Edge (159, 319) named 04080215070501130502050903060412
Starting round 1083
Removed Edge (159, 320) named 04080215070501130502050903070514
Starting round 1084
Removed Edge (159, 321) named 04080215070501130502050904080116
Starting round 1085
Removed Edge (159, 322) named 04080215070501130502050904080215
Starting round 1086
Starting round 1087
Removed Edge (159, 322) named 04080215070501130502051406030613
Starting round 1088
Removed Edge (159, 323) named 04080215070501130502051406030710
Starting round 1089
Removed Edge (159, 324) named 04080215070501130502051406040809
Starting round 1090
Removed Edge (159, 325) named 04080215070501130502051407050113
Starting round 1091
Removed Edge (159, 326) named 04080215070501130502051407050210
Starting round 1092
Starting round 1093
Starting round 1094
Starting round 1095
Starting round 1096
Starting round 1097
Removed Edge (158, 323) named 04080215070502100306031101030613
Starting round 1098
Removed Edge (158, 324) named 04080215070502100306031101030710
Starting round 1099
Removed Edge (158, 325) named 04080215070502100306031102050113
Starting round 1100
Removed Edge (158, 326) named 04080215070502100306031102050116
Starting round 1101
Removed Edge (158, 327) named 04080215070502100306031102050210
Starting round 1102
Removed Edge (158, 328) named 04080215070502100306031102050215
Starting round 1103
Starting round 1104
Removed Edge (158, 328) named 04080215070502100306041201030613
Starting round 1105
Removed Edge (158, 329) named 04080215070502100306041201040809
Starting round 1106
Starting round 1107
Removed Edge (158, 329) named 04080215070502100307051406030613
Starting round 1108
Removed Edge (158, 330) named 04080215070502100307051406030710
Starting round 1109
Removed Edge (158, 331) named 04080215070502100307051407050113
Starting round 1110
Removed Edge (158, 332) named 04080215070502100307051407050210
Starting round 1111
Starting round 1112
Removed Edge (158, 332) named 04080215070502100408011608010311
Starting round 1113
Removed Edge (158, 333) named 04080215070502100408011608010412
Starting round 1114
Removed Edge (158, 334) named 04080215070502100408011608020509
Starting round 1115
Starting round 1116
Removed Edge (158, 334) named 04080215070502100408021506030613
Starting round 1117
Removed Edge (158, 335) named 04080215070502100408021506040809
Starting round 1118
Removed Edge (158, 336) named 04080215070502100408021507050210
Starting round 1119
Starting round 1120
Starting round 1121
Starting round 1122
Starting round 1123
Starting round 1124
Removed Edge (2, 26) named 05010311010306130501041201030613
Starting round 1125
Removed Edge (2, 33) named 05010311010306130501041201040809
Starting round 1126
Starting round 1127
Removed Edge (7, 156) named 05010311010408090306031102050113
Starting round 1128
Removed Edge (7, 157) named 05010311010408090306031102050116
Starting round 1129
Removed Edge (7, 158) named 05010311010408090306031102050210
Starting round 1130
Removed Edge (7, 159) named 05010311010408090306031102050215
Starting round 1131
Starting round 1132
Removed Edge (7, 159) named 05010311010408090306041201030613
Starting round 1133
Removed Edge (7, 160) named 05010311010408090306041201040809
Starting round 1134
Starting round 1135
Removed Edge (7, 160) named 05010311010408090408011608010311
Starting round 1136
Removed Edge (7, 161) named 05010311010408090408011608010412
Starting round 1137
Removed Edge (7, 162) named 05010311010408090408011608020509
Starting round 1138
Starting round 1139
Removed Edge (7, 162) named 05010311010408090408021506030613
Starting round 1140
Removed Edge (7, 163) named 05010311010408090408021506040809
Starting round 1141
Starting round 1142
Starting round 1143
Starting round 1144
Removed Edge (22, 0) named 05010412010306130501031101030613
Starting round 1145
Removed Edge (22, 4) named 05010412010306130501031101030710
Starting round 1146
Removed Edge (26, 91) named 05010412010307100306031101030613
Starting round 1147
Removed Edge (26, 95) named 05010412010307100306031101030710
Starting round 1148
Removed Edge (26, 98) named 05010412010307100306031102050113
Starting round 1149
Removed Edge (26, 102) named 05010412010307100306031102050116
Starting round 1150
Removed Edge (26, 106) named 05010412010307100306031102050210
Starting round 1151
Removed Edge (26, 109) named 05010412010307100306031102050215
Starting round 1152
Starting round 1153
Removed Edge (26, 119) named 05010412010307100307051406030613
Starting round 1154
Removed Edge (26, 123) named 05010412010307100307051406030710
Starting round 1155
Removed Edge (26, 126) named 05010412010307100307051407050113
Starting round 1156
Removed Edge (26, 130) named 05010412010307100307051407050210
Starting round 1157
Starting round 1158
Starting round 1159
Starting round 1160
Removed Edge (31, 161) named 05010412020501130501031101030613
Starting round 1161
Removed Edge (31, 162) named 05010412020501130501031101030710
Starting round 1162
Removed Edge (31, 163) named 05010412020501130501031102050113
Starting round 1163
Removed Edge (31, 164) named 05010412020501130501031102050210
Starting round 1164
Starting round 1165
Removed Edge (31, 164) named 05010412020501130501041201030613
Starting round 1166
Removed Edge (31, 165) named 05010412020501130501041201040809
Starting round 1167
Starting round 1168
Removed Edge (31, 165) named 05010412020501130502051406030613
Starting round 1169
Removed Edge (31, 166) named 05010412020501130502051406030710
Starting round 1170
Removed Edge (31, 167) named 05010412020501130502051407050113
Starting round 1171
Removed Edge (31, 168) named 05010412020501130502051407050210
Starting round 1172
Starting round 1173
Starting round 1174
Starting round 1175
Removed Edge (31, 168) named 05010412020501160801031101030613
Starting round 1176
Removed Edge (31, 171) named 05010412020501160801031101030710
Starting round 1177
Removed Edge (31, 174) named 05010412020501160801031102050116
Starting round 1178
Removed Edge (31, 178) named 05010412020501160801031102050215
Starting round 1179
Starting round 1180
Removed Edge (31, 180) named 05010412020501160801041201030613
Starting round 1181
Removed Edge (31, 184) named 05010412020501160801041201040809
Starting round 1182
Starting round 1183
Removed Edge (31, 188) named 05010412020501160802050903060311
Starting round 1184
Removed Edge (31, 193) named 05010412020501160802050903060412
Starting round 1185
Removed Edge (31, 196) named 05010412020501160802050904080116
Starting round 1186
Removed Edge (31, 200) named 05010412020501160802050904080215
Starting round 1187
Starting round 1188
Starting round 1189
Starting round 1190
Removed Edge (31, 202) named 05010412020502100306031101030613
Starting round 1191
Removed Edge (31, 203) named 05010412020502100306031101030710
Starting round 1192
Removed Edge (31, 204) named 05010412020502100306031102050113
Starting round 1193
Removed Edge (31, 205) named 05010412020502100306031102050116
Starting round 1194
Removed Edge (31, 206) named 05010412020502100306031102050210
Starting round 1195
Removed Edge (31, 207) named 05010412020502100306031102050215
Starting round 1196
Starting round 1197
Removed Edge (31, 207) named 05010412020502100307051406030613
Starting round 1198
Removed Edge (31, 208) named 05010412020502100307051406030710
Starting round 1199
Removed Edge (31, 209) named 05010412020502100307051407050113
Starting round 1200
Removed Edge (31, 210) named 05010412020502100307051407050210
Starting round 1201
Starting round 1202
Starting round 1203
Starting round 1204
Removed Edge (31, 210) named 05010412020502150603061305010311
Starting round 1205
Removed Edge (31, 217) named 05010412020502150603061305010412
Starting round 1206
Removed Edge (31, 221) named 05010412020502150603061305020509
Starting round 1207
Removed Edge (31, 227) named 05010412020502150603061305020514
Starting round 1208
Starting round 1209
Removed Edge (31, 249) named 05010412020502150604080903060311
Starting round 1210
Removed Edge (31, 256) named 05010412020502150604080903060412
Starting round 1211
Removed Edge (31, 263) named 05010412020502150604080904080116
Starting round 1212
Removed Edge (31, 267) named 05010412020502150604080904080215
Starting round 1213
Starting round 1214
Starting round 1215
Starting round 1216
Removed Edge (32, 80) named 05020509030603110103061305010311
Starting round 1217
Removed Edge (32, 81) named 05020509030603110103061305020509
Starting round 1218
Removed Edge (32, 82) named 05020509030603110103061305020514
Starting round 1219
Starting round 1220
Removed Edge (32, 83) named 05020509030603110103071003060311
Starting round 1221
Removed Edge (32, 84) named 05020509030603110103071003070514
Starting round 1222
Starting round 1223
Removed Edge (39, 107) named 05020509030705140603061305010311
Starting round 1224
Removed Edge (39, 108) named 05020509030705140603061305020509
Starting round 1225
Removed Edge (39, 109) named 05020509030705140603061305020514
Starting round 1226
Starting round 1227
Removed Edge (39, 110) named 05020509030705140603071003060311
Starting round 1228
Removed Edge (39, 111) named 05020509030705140603071003070514
Starting round 1229
Starting round 1230
Removed Edge (39, 112) named 05020509030705140705011305010311
Starting round 1231
Removed Edge (39, 113) named 05020509030705140705011305010412
Starting round 1232
Removed Edge (39, 114) named 05020509030705140705011305020514
Starting round 1233
Starting round 1234
Removed Edge (39, 115) named 05020509030705140705021003060311
Starting round 1235
Removed Edge (39, 116) named 05020509030705140705021003070514
Starting round 1236
Starting round 1237
Starting round 1238
Starting round 1239
Removed Edge (48, 210) named 05020514060306130501041201030613
Starting round 1240
Removed Edge (48, 211) named 05020514060306130501041201040809
Starting round 1241
Starting round 1242
Removed Edge (49, 219) named 05020514060306130502051406040809
Starting round 1243
Starting round 1244
Removed Edge (52, 227) named 05020514060307100306041201030613
Starting round 1245
Starting round 1246
Removed Edge (52, 227) named 05020514060307100306041201040809
Starting round 1247
Starting round 1248
Starting round 1249
Removed Edge (53, 230) named 05020514060307100408011608010311
Starting round 1250
Starting round 1251
Removed Edge (53, 230) named 05020514060307100408011608010412
Starting round 1252
Starting round 1253
Removed Edge (53, 230) named 05020514060307100408011608020509
Starting round 1254
Starting round 1255
Starting round 1256
Removed Edge (53, 229) named 05020514060307100408021506030613
Starting round 1257
Starting round 1258
Removed Edge (53, 229) named 05020514060307100408021506040809
Starting round 1259
Starting round 1260
Starting round 1261
Removed Edge (53, 229) named 05020514060408090306031101030613
Starting round 1262
Starting round 1263
Removed Edge (53, 229) named 05020514060408090306031101030710
Starting round 1264
Starting round 1265
Removed Edge (53, 229) named 05020514060408090306031102050113
Starting round 1266
Removed Edge (53, 230) named 05020514060408090306031102050116
Starting round 1267
Removed Edge (53, 231) named 05020514060408090306031102050210
Starting round 1268
Removed Edge (53, 232) named 05020514060408090306031102050215
Starting round 1269
Starting round 1270
Removed Edge (53, 233) named 05020514060408090306041201030613
Starting round 1271
Removed Edge (53, 234) named 05020514060408090306041201040809
Starting round 1272
Starting round 1273
Removed Edge (53, 234) named 05020514060408090307051406030613
Starting round 1274
Starting round 1275
Removed Edge (53, 234) named 05020514060408090307051406030710
Starting round 1276
Starting round 1277
Removed Edge (53, 234) named 05020514060408090307051407050113
Starting round 1278
Starting round 1279
Removed Edge (53, 234) named 05020514060408090307051407050210
Starting round 1280
Starting round 1281
Starting round 1282
Removed Edge (53, 234) named 05020514060408090408011608010311
Starting round 1283
Removed Edge (53, 235) named 05020514060408090408011608010412
Starting round 1284
Removed Edge (53, 236) named 05020514060408090408011608020509
Starting round 1285
Starting round 1286
Removed Edge (53, 237) named 05020514060408090408021506030613
Starting round 1287
Removed Edge (53, 238) named 05020514060408090408021506040809
Starting round 1288
Starting round 1289
Starting round 1290
Removed Edge (54, 241) named 05020514070501130501031102050116
Starting round 1291
Starting round 1292
Removed Edge (54, 242) named 05020514070501130501031102050215
Starting round 1293
Starting round 1294
Removed Edge (56, 244) named 05020514070501130502050903060311
Starting round 1295
Starting round 1296
Removed Edge (56, 244) named 05020514070501130502050903060412
Starting round 1297
Starting round 1298
Removed Edge (56, 244) named 05020514070501130502050904080116
Starting round 1299
Starting round 1300
Removed Edge (56, 244) named 05020514070501130502050904080215
Starting round 1301
Starting round 1302
Starting round 1303
Removed Edge (59, 253) named 05020514070502100306041201030613
Starting round 1304
Starting round 1305
Removed Edge (59, 253) named 05020514070502100306041201040809
Starting round 1306
Starting round 1307
Starting round 1308
Removed Edge (60, 256) named 05020514070502100408011608010311
Starting round 1309
Starting round 1310
Removed Edge (60, 256) named 05020514070502100408011608010412
Starting round 1311
Starting round 1312
Removed Edge (60, 256) named 05020514070502100408011608020509
Starting round 1313
Starting round 1314
Starting round 1315
Removed Edge (60, 255) named 05020514070502100408021506030613
Starting round 1316
Starting round 1317
Removed Edge (60, 255) named 05020514070502100408021506040809
Starting round 1318
Starting round 1319
Starting round 1320
Removed Edge (211, 69) named 06030710030603110205011305010412
Starting round 1321
Removed Edge (212, 73) named 06030710030603110205011608010412
Starting round 1322
Removed Edge (234, 2) named 07050113050103110103061305020509
Starting round 1323
Removed Edge (238, 24) named 07050113050104120103061305020509
Starting round 1324
Removed Edge (246, 69) named 07050210030603110205011305010412
Starting round 1325
Removed Edge (247, 73) named 07050210030603110205011608010412
Starting round 1326
Removed Edge (143, 7) named 08010311010306130501031102050113
Starting round 1327
Removed Edge (143, 15) named 08010311010306130501031102050210
Starting round 1328
Removed Edge (146, 67) named 08010311010307100306031102050113
Starting round 1329
Removed Edge (146, 75) named 08010311010307100306031102050210
Starting round 1330
Removed Edge (156, 0) named 08010412010306130501031101030613
Starting round 1331
Removed Edge (156, 4) named 08010412010306130501031101030710
Starting round 1332
Removed Edge (156, 7) named 08010412010306130501031102050113
Starting round 1333
Removed Edge (156, 15) named 08010412010306130501031102050210
Starting round 1334
Removed Edge (160, 121) named 08010412010408090306031102050113
Starting round 1335
Removed Edge (160, 123) named 08010412010408090306031102050210
Starting round 1336
We have deleted 245 from G
We have deleted 244 from G
We have deleted 242 from G
We have deleted 236 from G
We have deleted 235 from G
We have deleted 234 from G
We have deleted 233 from G
We have deleted 232 from G
We have deleted 231 from G
We have deleted 230 from G
We have deleted 229 from G
We have deleted 227 from G
We have deleted 223 from G
We have deleted 219 from G
We have deleted 218 from G
We have deleted 217 from G
We have deleted 216 from G
We have deleted 215 from G
We have deleted 214 from G
We have deleted 213 from G
We have deleted 212 from G
We have deleted 211 from G
We have deleted 210 from G
We have deleted 209 from G
We have deleted 208 from G
We have deleted 207 from G
We have deleted 204 from G
We have deleted 202 from G
We have deleted 200 from G
We have deleted 199 from G
We have deleted 198 from G
We have deleted 197 from G
We have deleted 196 from G
We have deleted 195 from G
We have deleted 191 from G
We have deleted 190 from G
We have deleted 189 from G
We have deleted 188 from G
We have deleted 187 from G
We have deleted 186 from G
We have deleted 185 from G
We have deleted 184 from G
We have deleted 182 from G
We have deleted 176 from G
We have deleted 175 from G
We have deleted 174 from G
We have deleted 173 from G
We have deleted 172 from G
We have deleted 171 from G
We have deleted 170 from G
We have deleted 169 from G
We have deleted 167 from G
We have deleted 166 from G
We have deleted 163 from G
We have deleted 161 from G
We have deleted 160 from G
We have deleted 159 from G
We have deleted 158 from G
We have deleted 157 from G
We have deleted 156 from G
We have deleted 155 from G
We have deleted 154 from G
We have deleted 153 from G
We have deleted 152 from G
We have deleted 151 from G
We have deleted 150 from G
We have deleted 149 from G
We have deleted 148 from G
We have deleted 147 from G
We have deleted 144 from G
We have deleted 140 from G
We have deleted 139 from G
We have deleted 138 from G
We have deleted 137 from G
We have deleted 136 from G
We have deleted 135 from G
We have deleted 129 from G
We have deleted 126 from G
We have deleted 123 from G
We have deleted 119 from G
We have deleted 118 from G
We have deleted 116 from G
We have deleted 114 from G
We have deleted 111 from G
We have deleted 108 from G
We have deleted 107 from G
We have deleted 106 from G
We have deleted 104 from G
We have deleted 98 from G
We have deleted 97 from G
We have deleted 96 from G
We have deleted 95 from G
We have deleted 94 from G
We have deleted 93 from G
We have deleted 92 from G
We have deleted 91 from G
We have deleted 89 from G
We have deleted 85 from G
We have deleted 81 from G
We have deleted 80 from G
We have deleted 79 from G
We have deleted 78 from G
We have deleted 77 from G
We have deleted 76 from G
We have deleted 75 from G
We have deleted 74 from G
We have deleted 73 from G
We have deleted 72 from G
We have deleted 71 from G
We have deleted 70 from G
We have deleted 69 from G
We have deleted 66 from G
We have deleted 62 from G
We have deleted 61 from G
We have deleted 60 from G
We have deleted 59 from G
We have deleted 58 from G
We have deleted 57 from G
We have deleted 51 from G
We have deleted 48 from G
We have deleted 45 from G
We have deleted 41 from G
We have deleted 40 from G
We have deleted 38 from G
We have deleted 36 from G
We have deleted 33 from G
We have deleted 30 from G
We have deleted 29 from G
We have deleted 28 from G
We have deleted 26 from G
We have deleted 20 from G
We have deleted 19 from G
We have deleted 18 from G
We have deleted 17 from G
We have deleted 16 from G
We have deleted 15 from G
We have deleted 14 from G
We have deleted 13 from G
We have deleted 11 from G
We have deleted 10 from G
We have deleted 7 from G
We have deleted 5 from G
We have deleted 4 from G
We have deleted 3 from G
We have deleted 2 from G
We have deleted 1 from G
We have deleted 0 from G
TiD has been created, starting to check if nondegen
Our final Seen consists of:
